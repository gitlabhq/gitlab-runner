// Code generated by mockery v2.53.3. DO NOT EDIT.

package gcs

import (
	context "context"

	credentialspb "cloud.google.com/go/iam/credentials/apiv1/credentialspb"
	gax "github.com/googleapis/gax-go/v2"

	mock "github.com/stretchr/testify/mock"
)

// MockIamCredentialsClient is an autogenerated mock type for the IamCredentialsClient type
type MockIamCredentialsClient struct {
	mock.Mock
}

type MockIamCredentialsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIamCredentialsClient) EXPECT() *MockIamCredentialsClient_Expecter {
	return &MockIamCredentialsClient_Expecter{mock: &_m.Mock}
}

// SignBlob provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIamCredentialsClient) SignBlob(_a0 context.Context, _a1 *credentialspb.SignBlobRequest, _a2 ...gax.CallOption) (*credentialspb.SignBlobResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignBlob")
	}

	var r0 *credentialspb.SignBlobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *credentialspb.SignBlobRequest, ...gax.CallOption) (*credentialspb.SignBlobResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *credentialspb.SignBlobRequest, ...gax.CallOption) *credentialspb.SignBlobResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credentialspb.SignBlobResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *credentialspb.SignBlobRequest, ...gax.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamCredentialsClient_SignBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignBlob'
type MockIamCredentialsClient_SignBlob_Call struct {
	*mock.Call
}

// SignBlob is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *credentialspb.SignBlobRequest
//   - _a2 ...gax.CallOption
func (_e *MockIamCredentialsClient_Expecter) SignBlob(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIamCredentialsClient_SignBlob_Call {
	return &MockIamCredentialsClient_SignBlob_Call{Call: _e.mock.On("SignBlob",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIamCredentialsClient_SignBlob_Call) Run(run func(_a0 context.Context, _a1 *credentialspb.SignBlobRequest, _a2 ...gax.CallOption)) *MockIamCredentialsClient_SignBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gax.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gax.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*credentialspb.SignBlobRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockIamCredentialsClient_SignBlob_Call) Return(_a0 *credentialspb.SignBlobResponse, _a1 error) *MockIamCredentialsClient_SignBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamCredentialsClient_SignBlob_Call) RunAndReturn(run func(context.Context, *credentialspb.SignBlobRequest, ...gax.CallOption) (*credentialspb.SignBlobResponse, error)) *MockIamCredentialsClient_SignBlob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIamCredentialsClient creates a new instance of MockIamCredentialsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIamCredentialsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIamCredentialsClient {
	mock := &MockIamCredentialsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
