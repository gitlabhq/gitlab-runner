// Code generated by mockery v2.53.3. DO NOT EDIT.

package gcs

import (
	context "context"

	common "gitlab.com/gitlab-org/gitlab-runner/common"

	mock "github.com/stretchr/testify/mock"
)

// mockCredentialsResolver is an autogenerated mock type for the credentialsResolver type
type mockCredentialsResolver struct {
	mock.Mock
}

type mockCredentialsResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCredentialsResolver) EXPECT() *mockCredentialsResolver_Expecter {
	return &mockCredentialsResolver_Expecter{mock: &_m.Mock}
}

// Credentials provides a mock function with no fields
func (_m *mockCredentialsResolver) Credentials() *common.CacheGCSCredentials {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Credentials")
	}

	var r0 *common.CacheGCSCredentials
	if rf, ok := ret.Get(0).(func() *common.CacheGCSCredentials); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CacheGCSCredentials)
		}
	}

	return r0
}

// mockCredentialsResolver_Credentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Credentials'
type mockCredentialsResolver_Credentials_Call struct {
	*mock.Call
}

// Credentials is a helper method to define mock.On call
func (_e *mockCredentialsResolver_Expecter) Credentials() *mockCredentialsResolver_Credentials_Call {
	return &mockCredentialsResolver_Credentials_Call{Call: _e.mock.On("Credentials")}
}

func (_c *mockCredentialsResolver_Credentials_Call) Run(run func()) *mockCredentialsResolver_Credentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCredentialsResolver_Credentials_Call) Return(_a0 *common.CacheGCSCredentials) *mockCredentialsResolver_Credentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCredentialsResolver_Credentials_Call) RunAndReturn(run func() *common.CacheGCSCredentials) *mockCredentialsResolver_Credentials_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function with no fields
func (_m *mockCredentialsResolver) Resolve() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCredentialsResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type mockCredentialsResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
func (_e *mockCredentialsResolver_Expecter) Resolve() *mockCredentialsResolver_Resolve_Call {
	return &mockCredentialsResolver_Resolve_Call{Call: _e.mock.On("Resolve")}
}

func (_c *mockCredentialsResolver_Resolve_Call) Run(run func()) *mockCredentialsResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCredentialsResolver_Resolve_Call) Return(_a0 error) *mockCredentialsResolver_Resolve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCredentialsResolver_Resolve_Call) RunAndReturn(run func() error) *mockCredentialsResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// SignBytesFunc provides a mock function with given fields: _a0
func (_m *mockCredentialsResolver) SignBytesFunc(_a0 context.Context) func([]byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SignBytesFunc")
	}

	var r0 func([]byte) ([]byte, error)
	if rf, ok := ret.Get(0).(func(context.Context) func([]byte) ([]byte, error)); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func([]byte) ([]byte, error))
		}
	}

	return r0
}

// mockCredentialsResolver_SignBytesFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignBytesFunc'
type mockCredentialsResolver_SignBytesFunc_Call struct {
	*mock.Call
}

// SignBytesFunc is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockCredentialsResolver_Expecter) SignBytesFunc(_a0 interface{}) *mockCredentialsResolver_SignBytesFunc_Call {
	return &mockCredentialsResolver_SignBytesFunc_Call{Call: _e.mock.On("SignBytesFunc", _a0)}
}

func (_c *mockCredentialsResolver_SignBytesFunc_Call) Run(run func(_a0 context.Context)) *mockCredentialsResolver_SignBytesFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockCredentialsResolver_SignBytesFunc_Call) Return(_a0 func([]byte) ([]byte, error)) *mockCredentialsResolver_SignBytesFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCredentialsResolver_SignBytesFunc_Call) RunAndReturn(run func(context.Context) func([]byte) ([]byte, error)) *mockCredentialsResolver_SignBytesFunc_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCredentialsResolver creates a new instance of mockCredentialsResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCredentialsResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCredentialsResolver {
	mock := &mockCredentialsResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
