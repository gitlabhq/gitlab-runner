// Code generated by mockery v2.53.3. DO NOT EDIT.

package gcs

import (
	storage "cloud.google.com/go/storage"
	mock "github.com/stretchr/testify/mock"
)

// mockSignedURLGenerator is an autogenerated mock type for the signedURLGenerator type
type mockSignedURLGenerator struct {
	mock.Mock
}

type mockSignedURLGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSignedURLGenerator) EXPECT() *mockSignedURLGenerator_Expecter {
	return &mockSignedURLGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: bucket, name, opts
func (_m *mockSignedURLGenerator) Execute(bucket string, name string, opts *storage.SignedURLOptions) (string, error) {
	ret := _m.Called(bucket, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *storage.SignedURLOptions) (string, error)); ok {
		return rf(bucket, name, opts)
	}
	if rf, ok := ret.Get(0).(func(string, string, *storage.SignedURLOptions) string); ok {
		r0 = rf(bucket, name, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, *storage.SignedURLOptions) error); ok {
		r1 = rf(bucket, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSignedURLGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockSignedURLGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - bucket string
//   - name string
//   - opts *storage.SignedURLOptions
func (_e *mockSignedURLGenerator_Expecter) Execute(bucket interface{}, name interface{}, opts interface{}) *mockSignedURLGenerator_Execute_Call {
	return &mockSignedURLGenerator_Execute_Call{Call: _e.mock.On("Execute", bucket, name, opts)}
}

func (_c *mockSignedURLGenerator_Execute_Call) Run(run func(bucket string, name string, opts *storage.SignedURLOptions)) *mockSignedURLGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*storage.SignedURLOptions))
	})
	return _c
}

func (_c *mockSignedURLGenerator_Execute_Call) Return(_a0 string, _a1 error) *mockSignedURLGenerator_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSignedURLGenerator_Execute_Call) RunAndReturn(run func(string, string, *storage.SignedURLOptions) (string, error)) *mockSignedURLGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSignedURLGenerator creates a new instance of mockSignedURLGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSignedURLGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSignedURLGenerator {
	mock := &mockSignedURLGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
