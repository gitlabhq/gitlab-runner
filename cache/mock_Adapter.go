// Code generated by mockery v2.53.3. DO NOT EDIT.

package cache

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// GetDownloadURL provides a mock function with given fields: _a0
func (_m *MockAdapter) GetDownloadURL(_a0 context.Context) PresignedURL {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadURL")
	}

	var r0 PresignedURL
	if rf, ok := ret.Get(0).(func(context.Context) PresignedURL); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(PresignedURL)
	}

	return r0
}

// MockAdapter_GetDownloadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadURL'
type MockAdapter_GetDownloadURL_Call struct {
	*mock.Call
}

// GetDownloadURL is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockAdapter_Expecter) GetDownloadURL(_a0 interface{}) *MockAdapter_GetDownloadURL_Call {
	return &MockAdapter_GetDownloadURL_Call{Call: _e.mock.On("GetDownloadURL", _a0)}
}

func (_c *MockAdapter_GetDownloadURL_Call) Run(run func(_a0 context.Context)) *MockAdapter_GetDownloadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAdapter_GetDownloadURL_Call) Return(_a0 PresignedURL) *MockAdapter_GetDownloadURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_GetDownloadURL_Call) RunAndReturn(run func(context.Context) PresignedURL) *MockAdapter_GetDownloadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoCloudURL provides a mock function with given fields: ctx, upload
func (_m *MockAdapter) GetGoCloudURL(ctx context.Context, upload bool) (GoCloudURL, error) {
	ret := _m.Called(ctx, upload)

	if len(ret) == 0 {
		panic("no return value specified for GetGoCloudURL")
	}

	var r0 GoCloudURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (GoCloudURL, error)); ok {
		return rf(ctx, upload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) GoCloudURL); ok {
		r0 = rf(ctx, upload)
	} else {
		r0 = ret.Get(0).(GoCloudURL)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, upload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_GetGoCloudURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoCloudURL'
type MockAdapter_GetGoCloudURL_Call struct {
	*mock.Call
}

// GetGoCloudURL is a helper method to define mock.On call
//   - ctx context.Context
//   - upload bool
func (_e *MockAdapter_Expecter) GetGoCloudURL(ctx interface{}, upload interface{}) *MockAdapter_GetGoCloudURL_Call {
	return &MockAdapter_GetGoCloudURL_Call{Call: _e.mock.On("GetGoCloudURL", ctx, upload)}
}

func (_c *MockAdapter_GetGoCloudURL_Call) Run(run func(ctx context.Context, upload bool)) *MockAdapter_GetGoCloudURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAdapter_GetGoCloudURL_Call) Return(_a0 GoCloudURL, _a1 error) *MockAdapter_GetGoCloudURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_GetGoCloudURL_Call) RunAndReturn(run func(context.Context, bool) (GoCloudURL, error)) *MockAdapter_GetGoCloudURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetUploadURL provides a mock function with given fields: _a0
func (_m *MockAdapter) GetUploadURL(_a0 context.Context) PresignedURL {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUploadURL")
	}

	var r0 PresignedURL
	if rf, ok := ret.Get(0).(func(context.Context) PresignedURL); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(PresignedURL)
	}

	return r0
}

// MockAdapter_GetUploadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUploadURL'
type MockAdapter_GetUploadURL_Call struct {
	*mock.Call
}

// GetUploadURL is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockAdapter_Expecter) GetUploadURL(_a0 interface{}) *MockAdapter_GetUploadURL_Call {
	return &MockAdapter_GetUploadURL_Call{Call: _e.mock.On("GetUploadURL", _a0)}
}

func (_c *MockAdapter_GetUploadURL_Call) Run(run func(_a0 context.Context)) *MockAdapter_GetUploadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAdapter_GetUploadURL_Call) Return(_a0 PresignedURL) *MockAdapter_GetUploadURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_GetUploadURL_Call) RunAndReturn(run func(context.Context) PresignedURL) *MockAdapter_GetUploadURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
