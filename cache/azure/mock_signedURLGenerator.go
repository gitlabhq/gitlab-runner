// Code generated by mockery v2.53.3. DO NOT EDIT.

package azure

import (
	context "context"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// mockSignedURLGenerator is an autogenerated mock type for the signedURLGenerator type
type mockSignedURLGenerator struct {
	mock.Mock
}

type mockSignedURLGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSignedURLGenerator) EXPECT() *mockSignedURLGenerator_Expecter {
	return &mockSignedURLGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, name, options
func (_m *mockSignedURLGenerator) Execute(ctx context.Context, name string, options *signedURLOptions) (*url.URL, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *url.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *signedURLOptions) (*url.URL, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *signedURLOptions) *url.URL); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *signedURLOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSignedURLGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockSignedURLGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options *signedURLOptions
func (_e *mockSignedURLGenerator_Expecter) Execute(ctx interface{}, name interface{}, options interface{}) *mockSignedURLGenerator_Execute_Call {
	return &mockSignedURLGenerator_Execute_Call{Call: _e.mock.On("Execute", ctx, name, options)}
}

func (_c *mockSignedURLGenerator_Execute_Call) Run(run func(ctx context.Context, name string, options *signedURLOptions)) *mockSignedURLGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*signedURLOptions))
	})
	return _c
}

func (_c *mockSignedURLGenerator_Execute_Call) Return(_a0 *url.URL, _a1 error) *mockSignedURLGenerator_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSignedURLGenerator_Execute_Call) RunAndReturn(run func(context.Context, string, *signedURLOptions) (*url.URL, error)) *mockSignedURLGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSignedURLGenerator creates a new instance of mockSignedURLGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSignedURLGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSignedURLGenerator {
	mock := &mockSignedURLGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
