// Code generated by mockery v2.53.3. DO NOT EDIT.

package azure

import mock "github.com/stretchr/testify/mock"

// mockCredentialsResolver is an autogenerated mock type for the credentialsResolver type
type mockCredentialsResolver struct {
	mock.Mock
}

type mockCredentialsResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCredentialsResolver) EXPECT() *mockCredentialsResolver_Expecter {
	return &mockCredentialsResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with no fields
func (_m *mockCredentialsResolver) Resolve() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCredentialsResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type mockCredentialsResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
func (_e *mockCredentialsResolver_Expecter) Resolve() *mockCredentialsResolver_Resolve_Call {
	return &mockCredentialsResolver_Resolve_Call{Call: _e.mock.On("Resolve")}
}

func (_c *mockCredentialsResolver_Resolve_Call) Run(run func()) *mockCredentialsResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCredentialsResolver_Resolve_Call) Return(_a0 error) *mockCredentialsResolver_Resolve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCredentialsResolver_Resolve_Call) RunAndReturn(run func() error) *mockCredentialsResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// Signer provides a mock function with no fields
func (_m *mockCredentialsResolver) Signer() (sasSigner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signer")
	}

	var r0 sasSigner
	var r1 error
	if rf, ok := ret.Get(0).(func() (sasSigner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() sasSigner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sasSigner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCredentialsResolver_Signer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signer'
type mockCredentialsResolver_Signer_Call struct {
	*mock.Call
}

// Signer is a helper method to define mock.On call
func (_e *mockCredentialsResolver_Expecter) Signer() *mockCredentialsResolver_Signer_Call {
	return &mockCredentialsResolver_Signer_Call{Call: _e.mock.On("Signer")}
}

func (_c *mockCredentialsResolver_Signer_Call) Run(run func()) *mockCredentialsResolver_Signer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCredentialsResolver_Signer_Call) Return(_a0 sasSigner, _a1 error) *mockCredentialsResolver_Signer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCredentialsResolver_Signer_Call) RunAndReturn(run func() (sasSigner, error)) *mockCredentialsResolver_Signer_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCredentialsResolver creates a new instance of mockCredentialsResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCredentialsResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCredentialsResolver {
	mock := &mockCredentialsResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
