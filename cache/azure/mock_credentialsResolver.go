// Code generated by mockery v2.43.0. DO NOT EDIT.

package azure

import mock "github.com/stretchr/testify/mock"

// mockCredentialsResolver is an autogenerated mock type for the credentialsResolver type
type mockCredentialsResolver struct {
	mock.Mock
}

// Resolve provides a mock function with given fields:
func (_m *mockCredentialsResolver) Resolve() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signer provides a mock function with given fields:
func (_m *mockCredentialsResolver) Signer() (sasSigner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Signer")
	}

	var r0 sasSigner
	var r1 error
	if rf, ok := ret.Get(0).(func() (sasSigner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() sasSigner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sasSigner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockCredentialsResolver creates a new instance of mockCredentialsResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCredentialsResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCredentialsResolver {
	mock := &mockCredentialsResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
