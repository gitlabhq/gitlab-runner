// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cache

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// GetDownloadURL provides a mock function for the type MockAdapter
func (_mock *MockAdapter) GetDownloadURL(context1 context.Context) PresignedURL {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadURL")
	}

	var r0 PresignedURL
	if returnFunc, ok := ret.Get(0).(func(context.Context) PresignedURL); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(PresignedURL)
	}
	return r0
}

// MockAdapter_GetDownloadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadURL'
type MockAdapter_GetDownloadURL_Call struct {
	*mock.Call
}

// GetDownloadURL is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockAdapter_Expecter) GetDownloadURL(context1 interface{}) *MockAdapter_GetDownloadURL_Call {
	return &MockAdapter_GetDownloadURL_Call{Call: _e.mock.On("GetDownloadURL", context1)}
}

func (_c *MockAdapter_GetDownloadURL_Call) Run(run func(context1 context.Context)) *MockAdapter_GetDownloadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdapter_GetDownloadURL_Call) Return(presignedURL PresignedURL) *MockAdapter_GetDownloadURL_Call {
	_c.Call.Return(presignedURL)
	return _c
}

func (_c *MockAdapter_GetDownloadURL_Call) RunAndReturn(run func(context1 context.Context) PresignedURL) *MockAdapter_GetDownloadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoCloudURL provides a mock function for the type MockAdapter
func (_mock *MockAdapter) GetGoCloudURL(ctx context.Context, upload bool) (GoCloudURL, error) {
	ret := _mock.Called(ctx, upload)

	if len(ret) == 0 {
		panic("no return value specified for GetGoCloudURL")
	}

	var r0 GoCloudURL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) (GoCloudURL, error)); ok {
		return returnFunc(ctx, upload)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool) GoCloudURL); ok {
		r0 = returnFunc(ctx, upload)
	} else {
		r0 = ret.Get(0).(GoCloudURL)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = returnFunc(ctx, upload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAdapter_GetGoCloudURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoCloudURL'
type MockAdapter_GetGoCloudURL_Call struct {
	*mock.Call
}

// GetGoCloudURL is a helper method to define mock.On call
//   - ctx context.Context
//   - upload bool
func (_e *MockAdapter_Expecter) GetGoCloudURL(ctx interface{}, upload interface{}) *MockAdapter_GetGoCloudURL_Call {
	return &MockAdapter_GetGoCloudURL_Call{Call: _e.mock.On("GetGoCloudURL", ctx, upload)}
}

func (_c *MockAdapter_GetGoCloudURL_Call) Run(run func(ctx context.Context, upload bool)) *MockAdapter_GetGoCloudURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAdapter_GetGoCloudURL_Call) Return(goCloudURL GoCloudURL, err error) *MockAdapter_GetGoCloudURL_Call {
	_c.Call.Return(goCloudURL, err)
	return _c
}

func (_c *MockAdapter_GetGoCloudURL_Call) RunAndReturn(run func(ctx context.Context, upload bool) (GoCloudURL, error)) *MockAdapter_GetGoCloudURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetUploadURL provides a mock function for the type MockAdapter
func (_mock *MockAdapter) GetUploadURL(context1 context.Context) PresignedURL {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetUploadURL")
	}

	var r0 PresignedURL
	if returnFunc, ok := ret.Get(0).(func(context.Context) PresignedURL); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(PresignedURL)
	}
	return r0
}

// MockAdapter_GetUploadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUploadURL'
type MockAdapter_GetUploadURL_Call struct {
	*mock.Call
}

// GetUploadURL is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockAdapter_Expecter) GetUploadURL(context1 interface{}) *MockAdapter_GetUploadURL_Call {
	return &MockAdapter_GetUploadURL_Call{Call: _e.mock.On("GetUploadURL", context1)}
}

func (_c *MockAdapter_GetUploadURL_Call) Run(run func(context1 context.Context)) *MockAdapter_GetUploadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAdapter_GetUploadURL_Call) Return(presignedURL PresignedURL) *MockAdapter_GetUploadURL_Call {
	_c.Call.Return(presignedURL)
	return _c
}

func (_c *MockAdapter_GetUploadURL_Call) RunAndReturn(run func(context1 context.Context) PresignedURL) *MockAdapter_GetUploadURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialsAdapter creates a new instance of MockCredentialsAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialsAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialsAdapter {
	mock := &MockCredentialsAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCredentialsAdapter is an autogenerated mock type for the CredentialsAdapter type
type MockCredentialsAdapter struct {
	mock.Mock
}

type MockCredentialsAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialsAdapter) EXPECT() *MockCredentialsAdapter_Expecter {
	return &MockCredentialsAdapter_Expecter{mock: &_m.Mock}
}

// GetCredentials provides a mock function for the type MockCredentialsAdapter
func (_mock *MockCredentialsAdapter) GetCredentials() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockCredentialsAdapter_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type MockCredentialsAdapter_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
func (_e *MockCredentialsAdapter_Expecter) GetCredentials() *MockCredentialsAdapter_GetCredentials_Call {
	return &MockCredentialsAdapter_GetCredentials_Call{Call: _e.mock.On("GetCredentials")}
}

func (_c *MockCredentialsAdapter_GetCredentials_Call) Run(run func()) *MockCredentialsAdapter_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCredentialsAdapter_GetCredentials_Call) Return(stringToString map[string]string) *MockCredentialsAdapter_GetCredentials_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockCredentialsAdapter_GetCredentials_Call) RunAndReturn(run func() map[string]string) *MockCredentialsAdapter_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}
