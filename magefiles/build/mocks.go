// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package build

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTargetBlueprint creates a new instance of MockTargetBlueprint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTargetBlueprint[T Component, E Component, F any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTargetBlueprint[T, E, F] {
	mock := &MockTargetBlueprint[T, E, F]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTargetBlueprint is an autogenerated mock type for the TargetBlueprint type
type MockTargetBlueprint[T Component, E Component, F any] struct {
	mock.Mock
}

type MockTargetBlueprint_Expecter[T Component, E Component, F any] struct {
	mock *mock.Mock
}

func (_m *MockTargetBlueprint[T, E, F]) EXPECT() *MockTargetBlueprint_Expecter[T, E, F] {
	return &MockTargetBlueprint_Expecter[T, E, F]{mock: &_m.Mock}
}

// Artifacts provides a mock function for the type MockTargetBlueprint
func (_mock *MockTargetBlueprint[T, E, F]) Artifacts() []E {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Artifacts")
	}

	var r0 []E
	if returnFunc, ok := ret.Get(0).(func() []E); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]E)
		}
	}
	return r0
}

// MockTargetBlueprint_Artifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Artifacts'
type MockTargetBlueprint_Artifacts_Call[T Component, E Component, F any] struct {
	*mock.Call
}

// Artifacts is a helper method to define mock.On call
func (_e *MockTargetBlueprint_Expecter[T, E, F]) Artifacts() *MockTargetBlueprint_Artifacts_Call[T, E, F] {
	return &MockTargetBlueprint_Artifacts_Call[T, E, F]{Call: _e.mock.On("Artifacts")}
}

func (_c *MockTargetBlueprint_Artifacts_Call[T, E, F]) Run(run func()) *MockTargetBlueprint_Artifacts_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTargetBlueprint_Artifacts_Call[T, E, F]) Return(vs []E) *MockTargetBlueprint_Artifacts_Call[T, E, F] {
	_c.Call.Return(vs)
	return _c
}

func (_c *MockTargetBlueprint_Artifacts_Call[T, E, F]) RunAndReturn(run func() []E) *MockTargetBlueprint_Artifacts_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function for the type MockTargetBlueprint
func (_mock *MockTargetBlueprint[T, E, F]) Data() F {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 F
	if returnFunc, ok := ret.Get(0).(func() F); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(F)
		}
	}
	return r0
}

// MockTargetBlueprint_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockTargetBlueprint_Data_Call[T Component, E Component, F any] struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockTargetBlueprint_Expecter[T, E, F]) Data() *MockTargetBlueprint_Data_Call[T, E, F] {
	return &MockTargetBlueprint_Data_Call[T, E, F]{Call: _e.mock.On("Data")}
}

func (_c *MockTargetBlueprint_Data_Call[T, E, F]) Run(run func()) *MockTargetBlueprint_Data_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTargetBlueprint_Data_Call[T, E, F]) Return(v F) *MockTargetBlueprint_Data_Call[T, E, F] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockTargetBlueprint_Data_Call[T, E, F]) RunAndReturn(run func() F) *MockTargetBlueprint_Data_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// Dependencies provides a mock function for the type MockTargetBlueprint
func (_mock *MockTargetBlueprint[T, E, F]) Dependencies() []T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dependencies")
	}

	var r0 []T
	if returnFunc, ok := ret.Get(0).(func() []T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}
	return r0
}

// MockTargetBlueprint_Dependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dependencies'
type MockTargetBlueprint_Dependencies_Call[T Component, E Component, F any] struct {
	*mock.Call
}

// Dependencies is a helper method to define mock.On call
func (_e *MockTargetBlueprint_Expecter[T, E, F]) Dependencies() *MockTargetBlueprint_Dependencies_Call[T, E, F] {
	return &MockTargetBlueprint_Dependencies_Call[T, E, F]{Call: _e.mock.On("Dependencies")}
}

func (_c *MockTargetBlueprint_Dependencies_Call[T, E, F]) Run(run func()) *MockTargetBlueprint_Dependencies_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTargetBlueprint_Dependencies_Call[T, E, F]) Return(vs []T) *MockTargetBlueprint_Dependencies_Call[T, E, F] {
	_c.Call.Return(vs)
	return _c
}

func (_c *MockTargetBlueprint_Dependencies_Call[T, E, F]) RunAndReturn(run func() []T) *MockTargetBlueprint_Dependencies_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// Env provides a mock function for the type MockTargetBlueprint
func (_mock *MockTargetBlueprint[T, E, F]) Env() BlueprintEnv {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Env")
	}

	var r0 BlueprintEnv
	if returnFunc, ok := ret.Get(0).(func() BlueprintEnv); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(BlueprintEnv)
	}
	return r0
}

// MockTargetBlueprint_Env_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Env'
type MockTargetBlueprint_Env_Call[T Component, E Component, F any] struct {
	*mock.Call
}

// Env is a helper method to define mock.On call
func (_e *MockTargetBlueprint_Expecter[T, E, F]) Env() *MockTargetBlueprint_Env_Call[T, E, F] {
	return &MockTargetBlueprint_Env_Call[T, E, F]{Call: _e.mock.On("Env")}
}

func (_c *MockTargetBlueprint_Env_Call[T, E, F]) Run(run func()) *MockTargetBlueprint_Env_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTargetBlueprint_Env_Call[T, E, F]) Return(blueprintEnv BlueprintEnv) *MockTargetBlueprint_Env_Call[T, E, F] {
	_c.Call.Return(blueprintEnv)
	return _c
}

func (_c *MockTargetBlueprint_Env_Call[T, E, F]) RunAndReturn(run func() BlueprintEnv) *MockTargetBlueprint_Env_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceChecker creates a new instance of MockResourceChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceChecker {
	mock := &MockResourceChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResourceChecker is an autogenerated mock type for the ResourceChecker type
type MockResourceChecker struct {
	mock.Mock
}

type MockResourceChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceChecker) EXPECT() *MockResourceChecker_Expecter {
	return &MockResourceChecker_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockResourceChecker
func (_mock *MockResourceChecker) Exists() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResourceChecker_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockResourceChecker_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *MockResourceChecker_Expecter) Exists() *MockResourceChecker_Exists_Call {
	return &MockResourceChecker_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *MockResourceChecker_Exists_Call) Run(run func()) *MockResourceChecker_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceChecker_Exists_Call) Return(err error) *MockResourceChecker_Exists_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResourceChecker_Exists_Call) RunAndReturn(run func() error) *MockResourceChecker_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponent creates a new instance of MockComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponent {
	mock := &MockComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComponent is an autogenerated mock type for the Component type
type MockComponent struct {
	mock.Mock
}

type MockComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponent) EXPECT() *MockComponent_Expecter {
	return &MockComponent_Expecter{mock: &_m.Mock}
}

// Description provides a mock function for the type MockComponent
func (_mock *MockComponent) Description() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockComponent_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockComponent_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Description() *MockComponent_Description_Call {
	return &MockComponent_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockComponent_Description_Call) Run(run func()) *MockComponent_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Description_Call) Return(s string) *MockComponent_Description_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockComponent_Description_Call) RunAndReturn(run func() string) *MockComponent_Description_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function for the type MockComponent
func (_mock *MockComponent) MarshalJSON() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComponent_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockComponent_MarshalJSON_Call struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockComponent_Expecter) MarshalJSON() *MockComponent_MarshalJSON_Call {
	return &MockComponent_MarshalJSON_Call{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockComponent_MarshalJSON_Call) Run(run func()) *MockComponent_MarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_MarshalJSON_Call) Return(bytes []byte, err error) *MockComponent_MarshalJSON_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockComponent_MarshalJSON_Call) RunAndReturn(run func() ([]byte, error)) *MockComponent_MarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Required provides a mock function for the type MockComponent
func (_mock *MockComponent) Required() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Required")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockComponent_Required_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Required'
type MockComponent_Required_Call struct {
	*mock.Call
}

// Required is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Required() *MockComponent_Required_Call {
	return &MockComponent_Required_Call{Call: _e.mock.On("Required")}
}

func (_c *MockComponent_Required_Call) Run(run func()) *MockComponent_Required_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Required_Call) Return(b bool) *MockComponent_Required_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockComponent_Required_Call) RunAndReturn(run func() bool) *MockComponent_Required_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type MockComponent
func (_mock *MockComponent) Type() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockComponent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockComponent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Type() *MockComponent_Type_Call {
	return &MockComponent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockComponent_Type_Call) Run(run func()) *MockComponent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Type_Call) Return(s string) *MockComponent_Type_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockComponent_Type_Call) RunAndReturn(run func() string) *MockComponent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function for the type MockComponent
func (_mock *MockComponent) UnmarshalJSON(bytes []byte) error {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = returnFunc(bytes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockComponent_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type MockComponent_UnmarshalJSON_Call struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - bytes []byte
func (_e *MockComponent_Expecter) UnmarshalJSON(bytes interface{}) *MockComponent_UnmarshalJSON_Call {
	return &MockComponent_UnmarshalJSON_Call{Call: _e.mock.On("UnmarshalJSON", bytes)}
}

func (_c *MockComponent_UnmarshalJSON_Call) Run(run func(bytes []byte)) *MockComponent_UnmarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponent_UnmarshalJSON_Call) Return(err error) *MockComponent_UnmarshalJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockComponent_UnmarshalJSON_Call) RunAndReturn(run func(bytes []byte) error) *MockComponent_UnmarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockComponent
func (_mock *MockComponent) Value() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockComponent_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockComponent_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Value() *MockComponent_Value_Call {
	return &MockComponent_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockComponent_Value_Call) Run(run func()) *MockComponent_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Value_Call) Return(s string) *MockComponent_Value_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockComponent_Value_Call) RunAndReturn(run func() string) *MockComponent_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WithDescription provides a mock function for the type MockComponent
func (_mock *MockComponent) WithDescription(s string) Component {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WithDescription")
	}

	var r0 Component
	if returnFunc, ok := ret.Get(0).(func(string) Component); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Component)
		}
	}
	return r0
}

// MockComponent_WithDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDescription'
type MockComponent_WithDescription_Call struct {
	*mock.Call
}

// WithDescription is a helper method to define mock.On call
//   - s string
func (_e *MockComponent_Expecter) WithDescription(s interface{}) *MockComponent_WithDescription_Call {
	return &MockComponent_WithDescription_Call{Call: _e.mock.On("WithDescription", s)}
}

func (_c *MockComponent_WithDescription_Call) Run(run func(s string)) *MockComponent_WithDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponent_WithDescription_Call) Return(component Component) *MockComponent_WithDescription_Call {
	_c.Call.Return(component)
	return _c
}

func (_c *MockComponent_WithDescription_Call) RunAndReturn(run func(s string) Component) *MockComponent_WithDescription_Call {
	_c.Call.Return(run)
	return _c
}

// WithRequired provides a mock function for the type MockComponent
func (_mock *MockComponent) WithRequired() Component {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithRequired")
	}

	var r0 Component
	if returnFunc, ok := ret.Get(0).(func() Component); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Component)
		}
	}
	return r0
}

// MockComponent_WithRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRequired'
type MockComponent_WithRequired_Call struct {
	*mock.Call
}

// WithRequired is a helper method to define mock.On call
func (_e *MockComponent_Expecter) WithRequired() *MockComponent_WithRequired_Call {
	return &MockComponent_WithRequired_Call{Call: _e.mock.On("WithRequired")}
}

func (_c *MockComponent_WithRequired_Call) Run(run func()) *MockComponent_WithRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_WithRequired_Call) Return(component Component) *MockComponent_WithRequired_Call {
	_c.Call.Return(component)
	return _c
}

func (_c *MockComponent_WithRequired_Call) RunAndReturn(run func() Component) *MockComponent_WithRequired_Call {
	_c.Call.Return(run)
	return _c
}
