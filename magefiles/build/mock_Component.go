// Code generated by mockery v2.53.3. DO NOT EDIT.

package build

import mock "github.com/stretchr/testify/mock"

// MockComponent is an autogenerated mock type for the Component type
type MockComponent struct {
	mock.Mock
}

type MockComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponent) EXPECT() *MockComponent_Expecter {
	return &MockComponent_Expecter{mock: &_m.Mock}
}

// Description provides a mock function with no fields
func (_m *MockComponent) Description() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockComponent_Description_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Description'
type MockComponent_Description_Call struct {
	*mock.Call
}

// Description is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Description() *MockComponent_Description_Call {
	return &MockComponent_Description_Call{Call: _e.mock.On("Description")}
}

func (_c *MockComponent_Description_Call) Run(run func()) *MockComponent_Description_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Description_Call) Return(_a0 string) *MockComponent_Description_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_Description_Call) RunAndReturn(run func() string) *MockComponent_Description_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with no fields
func (_m *MockComponent) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComponent_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockComponent_MarshalJSON_Call struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockComponent_Expecter) MarshalJSON() *MockComponent_MarshalJSON_Call {
	return &MockComponent_MarshalJSON_Call{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockComponent_MarshalJSON_Call) Run(run func()) *MockComponent_MarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_MarshalJSON_Call) Return(_a0 []byte, _a1 error) *MockComponent_MarshalJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComponent_MarshalJSON_Call) RunAndReturn(run func() ([]byte, error)) *MockComponent_MarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Required provides a mock function with no fields
func (_m *MockComponent) Required() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Required")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockComponent_Required_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Required'
type MockComponent_Required_Call struct {
	*mock.Call
}

// Required is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Required() *MockComponent_Required_Call {
	return &MockComponent_Required_Call{Call: _e.mock.On("Required")}
}

func (_c *MockComponent_Required_Call) Run(run func()) *MockComponent_Required_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Required_Call) Return(_a0 bool) *MockComponent_Required_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_Required_Call) RunAndReturn(run func() bool) *MockComponent_Required_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockComponent) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockComponent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockComponent_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Type() *MockComponent_Type_Call {
	return &MockComponent_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockComponent_Type_Call) Run(run func()) *MockComponent_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Type_Call) Return(_a0 string) *MockComponent_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_Type_Call) RunAndReturn(run func() string) *MockComponent_Type_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function with given fields: _a0
func (_m *MockComponent) UnmarshalJSON(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockComponent_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type MockComponent_UnmarshalJSON_Call struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockComponent_Expecter) UnmarshalJSON(_a0 interface{}) *MockComponent_UnmarshalJSON_Call {
	return &MockComponent_UnmarshalJSON_Call{Call: _e.mock.On("UnmarshalJSON", _a0)}
}

func (_c *MockComponent_UnmarshalJSON_Call) Run(run func(_a0 []byte)) *MockComponent_UnmarshalJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockComponent_UnmarshalJSON_Call) Return(_a0 error) *MockComponent_UnmarshalJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_UnmarshalJSON_Call) RunAndReturn(run func([]byte) error) *MockComponent_UnmarshalJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with no fields
func (_m *MockComponent) Value() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockComponent_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockComponent_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockComponent_Expecter) Value() *MockComponent_Value_Call {
	return &MockComponent_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockComponent_Value_Call) Run(run func()) *MockComponent_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_Value_Call) Return(_a0 string) *MockComponent_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_Value_Call) RunAndReturn(run func() string) *MockComponent_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WithDescription provides a mock function with given fields: _a0
func (_m *MockComponent) WithDescription(_a0 string) Component {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithDescription")
	}

	var r0 Component
	if rf, ok := ret.Get(0).(func(string) Component); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Component)
		}
	}

	return r0
}

// MockComponent_WithDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithDescription'
type MockComponent_WithDescription_Call struct {
	*mock.Call
}

// WithDescription is a helper method to define mock.On call
//   - _a0 string
func (_e *MockComponent_Expecter) WithDescription(_a0 interface{}) *MockComponent_WithDescription_Call {
	return &MockComponent_WithDescription_Call{Call: _e.mock.On("WithDescription", _a0)}
}

func (_c *MockComponent_WithDescription_Call) Run(run func(_a0 string)) *MockComponent_WithDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockComponent_WithDescription_Call) Return(_a0 Component) *MockComponent_WithDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_WithDescription_Call) RunAndReturn(run func(string) Component) *MockComponent_WithDescription_Call {
	_c.Call.Return(run)
	return _c
}

// WithRequired provides a mock function with no fields
func (_m *MockComponent) WithRequired() Component {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithRequired")
	}

	var r0 Component
	if rf, ok := ret.Get(0).(func() Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Component)
		}
	}

	return r0
}

// MockComponent_WithRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithRequired'
type MockComponent_WithRequired_Call struct {
	*mock.Call
}

// WithRequired is a helper method to define mock.On call
func (_e *MockComponent_Expecter) WithRequired() *MockComponent_WithRequired_Call {
	return &MockComponent_WithRequired_Call{Call: _e.mock.On("WithRequired")}
}

func (_c *MockComponent_WithRequired_Call) Run(run func()) *MockComponent_WithRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockComponent_WithRequired_Call) Return(_a0 Component) *MockComponent_WithRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponent_WithRequired_Call) RunAndReturn(run func() Component) *MockComponent_WithRequired_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponent creates a new instance of MockComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponent {
	mock := &MockComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
