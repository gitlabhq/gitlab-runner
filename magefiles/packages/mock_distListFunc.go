// Code generated by mockery v2.53.3. DO NOT EDIT.

package packages

import mock "github.com/stretchr/testify/mock"

// mockDistListFunc is an autogenerated mock type for the distListFunc type
type mockDistListFunc struct {
	mock.Mock
}

type mockDistListFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDistListFunc) EXPECT() *mockDistListFunc_Expecter {
	return &mockDistListFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *mockDistListFunc) Execute(_a0 string, _a1 string) ([]string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDistListFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockDistListFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *mockDistListFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *mockDistListFunc_Execute_Call {
	return &mockDistListFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *mockDistListFunc_Execute_Call) Run(run func(_a0 string, _a1 string)) *mockDistListFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDistListFunc_Execute_Call) Return(_a0 []string, _a1 error) *mockDistListFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDistListFunc_Execute_Call) RunAndReturn(run func(string, string) ([]string, error)) *mockDistListFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDistListFunc creates a new instance of mockDistListFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDistListFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDistListFunc {
	mock := &mockDistListFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
