// Code generated by mockery v2.53.3. DO NOT EDIT.

package packages

import (
	mock "github.com/stretchr/testify/mock"
	build "gitlab.com/gitlab-org/gitlab-runner/magefiles/build"
)

// MockBlueprint is an autogenerated mock type for the Blueprint type
type MockBlueprint[T build.Component, E build.Component, F interface{}] struct {
	mock.Mock
}

type MockBlueprint_Expecter[T build.Component, E build.Component, F interface{}] struct {
	mock *mock.Mock
}

func (_m *MockBlueprint[T, E, F]) EXPECT() *MockBlueprint_Expecter[T, E, F] {
	return &MockBlueprint_Expecter[T, E, F]{mock: &_m.Mock}
}

// Artifacts provides a mock function with no fields
func (_m *MockBlueprint[T, E, F]) Artifacts() []build.Component {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Artifacts")
	}

	var r0 []build.Component
	if rf, ok := ret.Get(0).(func() []build.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]build.Component)
		}
	}

	return r0
}

// MockBlueprint_Artifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Artifacts'
type MockBlueprint_Artifacts_Call[T build.Component, E build.Component, F interface{}] struct {
	*mock.Call
}

// Artifacts is a helper method to define mock.On call
func (_e *MockBlueprint_Expecter[T, E, F]) Artifacts() *MockBlueprint_Artifacts_Call[T, E, F] {
	return &MockBlueprint_Artifacts_Call[T, E, F]{Call: _e.mock.On("Artifacts")}
}

func (_c *MockBlueprint_Artifacts_Call[T, E, F]) Run(run func()) *MockBlueprint_Artifacts_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlueprint_Artifacts_Call[T, E, F]) Return(_a0 []build.Component) *MockBlueprint_Artifacts_Call[T, E, F] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprint_Artifacts_Call[T, E, F]) RunAndReturn(run func() []build.Component) *MockBlueprint_Artifacts_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with no fields
func (_m *MockBlueprint[T, E, F]) Data() blueprintParams {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 blueprintParams
	if rf, ok := ret.Get(0).(func() blueprintParams); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(blueprintParams)
	}

	return r0
}

// MockBlueprint_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockBlueprint_Data_Call[T build.Component, E build.Component, F interface{}] struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockBlueprint_Expecter[T, E, F]) Data() *MockBlueprint_Data_Call[T, E, F] {
	return &MockBlueprint_Data_Call[T, E, F]{Call: _e.mock.On("Data")}
}

func (_c *MockBlueprint_Data_Call[T, E, F]) Run(run func()) *MockBlueprint_Data_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlueprint_Data_Call[T, E, F]) Return(_a0 blueprintParams) *MockBlueprint_Data_Call[T, E, F] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprint_Data_Call[T, E, F]) RunAndReturn(run func() blueprintParams) *MockBlueprint_Data_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// Dependencies provides a mock function with no fields
func (_m *MockBlueprint[T, E, F]) Dependencies() []build.Component {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dependencies")
	}

	var r0 []build.Component
	if rf, ok := ret.Get(0).(func() []build.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]build.Component)
		}
	}

	return r0
}

// MockBlueprint_Dependencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dependencies'
type MockBlueprint_Dependencies_Call[T build.Component, E build.Component, F interface{}] struct {
	*mock.Call
}

// Dependencies is a helper method to define mock.On call
func (_e *MockBlueprint_Expecter[T, E, F]) Dependencies() *MockBlueprint_Dependencies_Call[T, E, F] {
	return &MockBlueprint_Dependencies_Call[T, E, F]{Call: _e.mock.On("Dependencies")}
}

func (_c *MockBlueprint_Dependencies_Call[T, E, F]) Run(run func()) *MockBlueprint_Dependencies_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlueprint_Dependencies_Call[T, E, F]) Return(_a0 []build.Component) *MockBlueprint_Dependencies_Call[T, E, F] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprint_Dependencies_Call[T, E, F]) RunAndReturn(run func() []build.Component) *MockBlueprint_Dependencies_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// Env provides a mock function with no fields
func (_m *MockBlueprint[T, E, F]) Env() build.BlueprintEnv {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Env")
	}

	var r0 build.BlueprintEnv
	if rf, ok := ret.Get(0).(func() build.BlueprintEnv); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(build.BlueprintEnv)
	}

	return r0
}

// MockBlueprint_Env_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Env'
type MockBlueprint_Env_Call[T build.Component, E build.Component, F interface{}] struct {
	*mock.Call
}

// Env is a helper method to define mock.On call
func (_e *MockBlueprint_Expecter[T, E, F]) Env() *MockBlueprint_Env_Call[T, E, F] {
	return &MockBlueprint_Env_Call[T, E, F]{Call: _e.mock.On("Env")}
}

func (_c *MockBlueprint_Env_Call[T, E, F]) Run(run func()) *MockBlueprint_Env_Call[T, E, F] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBlueprint_Env_Call[T, E, F]) Return(_a0 build.BlueprintEnv) *MockBlueprint_Env_Call[T, E, F] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprint_Env_Call[T, E, F]) RunAndReturn(run func() build.BlueprintEnv) *MockBlueprint_Env_Call[T, E, F] {
	_c.Call.Return(run)
	return _c
}

// NewMockBlueprint creates a new instance of MockBlueprint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlueprint[T build.Component, E build.Component, F interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlueprint[T, E, F] {
	mock := &MockBlueprint[T, E, F]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
