// Code generated by mockery v2.53.3. DO NOT EDIT.

package docs

import mock "github.com/stretchr/testify/mock"

// mockConfigFlag is an autogenerated mock type for the configFlag type
type mockConfigFlag struct {
	mock.Mock
}

type mockConfigFlag_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConfigFlag) EXPECT() *mockConfigFlag_Expecter {
	return &mockConfigFlag_Expecter{mock: &_m.Mock}
}

// String provides a mock function with no fields
func (_m *mockConfigFlag) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockConfigFlag_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type mockConfigFlag_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *mockConfigFlag_Expecter) String() *mockConfigFlag_String_Call {
	return &mockConfigFlag_String_Call{Call: _e.mock.On("String")}
}

func (_c *mockConfigFlag_String_Call) Run(run func()) *mockConfigFlag_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockConfigFlag_String_Call) Return(_a0 string) *mockConfigFlag_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigFlag_String_Call) RunAndReturn(run func() string) *mockConfigFlag_String_Call {
	_c.Call.Return(run)
	return _c
}

// valid provides a mock function with no fields
func (_m *mockConfigFlag) valid() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for valid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockConfigFlag_valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'valid'
type mockConfigFlag_valid_Call struct {
	*mock.Call
}

// valid is a helper method to define mock.On call
func (_e *mockConfigFlag_Expecter) valid() *mockConfigFlag_valid_Call {
	return &mockConfigFlag_valid_Call{Call: _e.mock.On("valid")}
}

func (_c *mockConfigFlag_valid_Call) Run(run func()) *mockConfigFlag_valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockConfigFlag_valid_Call) Return(_a0 bool) *mockConfigFlag_valid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConfigFlag_valid_Call) RunAndReturn(run func() bool) *mockConfigFlag_valid_Call {
	_c.Call.Return(run)
	return _c
}

// newMockConfigFlag creates a new instance of mockConfigFlag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockConfigFlag(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockConfigFlag {
	mock := &mockConfigFlag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
