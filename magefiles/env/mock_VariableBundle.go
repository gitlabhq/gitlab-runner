// Code generated by mockery v2.53.3. DO NOT EDIT.

package env

import mock "github.com/stretchr/testify/mock"

// MockVariableBundle is an autogenerated mock type for the VariableBundle type
type MockVariableBundle struct {
	mock.Mock
}

type MockVariableBundle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVariableBundle) EXPECT() *MockVariableBundle_Expecter {
	return &MockVariableBundle_Expecter{mock: &_m.Mock}
}

// Variables provides a mock function with no fields
func (_m *MockVariableBundle) Variables() []Variable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Variables")
	}

	var r0 []Variable
	if rf, ok := ret.Get(0).(func() []Variable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Variable)
		}
	}

	return r0
}

// MockVariableBundle_Variables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Variables'
type MockVariableBundle_Variables_Call struct {
	*mock.Call
}

// Variables is a helper method to define mock.On call
func (_e *MockVariableBundle_Expecter) Variables() *MockVariableBundle_Variables_Call {
	return &MockVariableBundle_Variables_Call{Call: _e.mock.On("Variables")}
}

func (_c *MockVariableBundle_Variables_Call) Run(run func()) *MockVariableBundle_Variables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVariableBundle_Variables_Call) Return(_a0 []Variable) *MockVariableBundle_Variables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVariableBundle_Variables_Call) RunAndReturn(run func() []Variable) *MockVariableBundle_Variables_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVariableBundle creates a new instance of MockVariableBundle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVariableBundle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVariableBundle {
	mock := &MockVariableBundle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
