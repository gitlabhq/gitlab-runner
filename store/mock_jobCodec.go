// Code generated by mockery v2.53.3. DO NOT EDIT.

package store

import (
	io "io"

	common "gitlab.com/gitlab-org/gitlab-runner/common"

	mock "github.com/stretchr/testify/mock"
)

// mockJobCodec is an autogenerated mock type for the jobCodec type
type mockJobCodec struct {
	mock.Mock
}

type mockJobCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *mockJobCodec) EXPECT() *mockJobCodec_Expecter {
	return &mockJobCodec_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: _a0
func (_m *mockJobCodec) Decode(_a0 io.Reader) (*common.Job, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 *common.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (*common.Job, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) *common.Job); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockJobCodec_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type mockJobCodec_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - _a0 io.Reader
func (_e *mockJobCodec_Expecter) Decode(_a0 interface{}) *mockJobCodec_Decode_Call {
	return &mockJobCodec_Decode_Call{Call: _e.mock.On("Decode", _a0)}
}

func (_c *mockJobCodec_Decode_Call) Run(run func(_a0 io.Reader)) *mockJobCodec_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *mockJobCodec_Decode_Call) Return(_a0 *common.Job, _a1 error) *mockJobCodec_Decode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockJobCodec_Decode_Call) RunAndReturn(run func(io.Reader) (*common.Job, error)) *mockJobCodec_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: _a0, _a1
func (_m *mockJobCodec) Encode(_a0 io.Writer, _a1 *common.Job) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, *common.Job) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockJobCodec_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type mockJobCodec_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - _a0 io.Writer
//   - _a1 *common.Job
func (_e *mockJobCodec_Expecter) Encode(_a0 interface{}, _a1 interface{}) *mockJobCodec_Encode_Call {
	return &mockJobCodec_Encode_Call{Call: _e.mock.On("Encode", _a0, _a1)}
}

func (_c *mockJobCodec_Encode_Call) Run(run func(_a0 io.Writer, _a1 *common.Job)) *mockJobCodec_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(*common.Job))
	})
	return _c
}

func (_c *mockJobCodec_Encode_Call) Return(_a0 error) *mockJobCodec_Encode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockJobCodec_Encode_Call) RunAndReturn(run func(io.Writer, *common.Job) error) *mockJobCodec_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// newMockJobCodec creates a new instance of mockJobCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockJobCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockJobCodec {
	mock := &mockJobCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
