// Code generated by mockery v2.53.3. DO NOT EDIT.

package store

import (
	mock "github.com/stretchr/testify/mock"
	common "gitlab.com/gitlab-org/gitlab-runner/common"
)

// mockJobScanner is an autogenerated mock type for the jobScanner type
type mockJobScanner struct {
	mock.Mock
}

type mockJobScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *mockJobScanner) EXPECT() *mockJobScanner_Expecter {
	return &mockJobScanner_Expecter{mock: &_m.Mock}
}

// Job provides a mock function with no fields
func (_m *mockJobScanner) Job() (*common.Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Job")
	}

	var r0 *common.Job
	var r1 error
	if rf, ok := ret.Get(0).(func() (*common.Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *common.Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockJobScanner_Job_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Job'
type mockJobScanner_Job_Call struct {
	*mock.Call
}

// Job is a helper method to define mock.On call
func (_e *mockJobScanner_Expecter) Job() *mockJobScanner_Job_Call {
	return &mockJobScanner_Job_Call{Call: _e.mock.On("Job")}
}

func (_c *mockJobScanner_Job_Call) Run(run func()) *mockJobScanner_Job_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockJobScanner_Job_Call) Return(_a0 *common.Job, _a1 error) *mockJobScanner_Job_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockJobScanner_Job_Call) RunAndReturn(run func() (*common.Job, error)) *mockJobScanner_Job_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with no fields
func (_m *mockJobScanner) Scan() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockJobScanner_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type mockJobScanner_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
func (_e *mockJobScanner_Expecter) Scan() *mockJobScanner_Scan_Call {
	return &mockJobScanner_Scan_Call{Call: _e.mock.On("Scan")}
}

func (_c *mockJobScanner_Scan_Call) Run(run func()) *mockJobScanner_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockJobScanner_Scan_Call) Return(_a0 bool) *mockJobScanner_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockJobScanner_Scan_Call) RunAndReturn(run func() bool) *mockJobScanner_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// newMockJobScanner creates a new instance of mockJobScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockJobScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockJobScanner {
	mock := &mockJobScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
