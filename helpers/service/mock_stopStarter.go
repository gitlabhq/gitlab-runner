// Code generated by mockery v2.43.0. DO NOT EDIT.

package service_helpers

import (
	service "github.com/kardianos/service"
	mock "github.com/stretchr/testify/mock"
)

// mockStopStarter is an autogenerated mock type for the stopStarter type
type mockStopStarter struct {
	mock.Mock
}

// Start provides a mock function with given fields: _a0
func (_m *mockStopStarter) Start(_a0 service.Service) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(service.Service) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: _a0
func (_m *mockStopStarter) Stop(_a0 service.Service) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(service.Service) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockStopStarter creates a new instance of mockStopStarter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStopStarter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStopStarter {
	mock := &mockStopStarter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
