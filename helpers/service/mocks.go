// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service_helpers

import (
	"github.com/kardianos/service"
	mock "github.com/stretchr/testify/mock"
)

// newMockStopStarter creates a new instance of mockStopStarter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStopStarter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStopStarter {
	mock := &mockStopStarter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockStopStarter is an autogenerated mock type for the stopStarter type
type mockStopStarter struct {
	mock.Mock
}

type mockStopStarter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStopStarter) EXPECT() *mockStopStarter_Expecter {
	return &mockStopStarter_Expecter{mock: &_m.Mock}
}

// Start provides a mock function for the type mockStopStarter
func (_mock *mockStopStarter) Start(service1 service.Service) error {
	ret := _mock.Called(service1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(service.Service) error); ok {
		r0 = returnFunc(service1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockStopStarter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type mockStopStarter_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - service1 service.Service
func (_e *mockStopStarter_Expecter) Start(service1 interface{}) *mockStopStarter_Start_Call {
	return &mockStopStarter_Start_Call{Call: _e.mock.On("Start", service1)}
}

func (_c *mockStopStarter_Start_Call) Run(run func(service1 service.Service)) *mockStopStarter_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 service.Service
		if args[0] != nil {
			arg0 = args[0].(service.Service)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockStopStarter_Start_Call) Return(err error) *mockStopStarter_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockStopStarter_Start_Call) RunAndReturn(run func(service1 service.Service) error) *mockStopStarter_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type mockStopStarter
func (_mock *mockStopStarter) Stop(service1 service.Service) error {
	ret := _mock.Called(service1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(service.Service) error); ok {
		r0 = returnFunc(service1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockStopStarter_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockStopStarter_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - service1 service.Service
func (_e *mockStopStarter_Expecter) Stop(service1 interface{}) *mockStopStarter_Stop_Call {
	return &mockStopStarter_Stop_Call{Call: _e.mock.On("Stop", service1)}
}

func (_c *mockStopStarter_Stop_Call) Run(run func(service1 service.Service)) *mockStopStarter_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 service.Service
		if args[0] != nil {
			arg0 = args[0].(service.Service)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockStopStarter_Stop_Call) Return(err error) *mockStopStarter_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockStopStarter_Stop_Call) RunAndReturn(run func(service1 service.Service) error) *mockStopStarter_Stop_Call {
	_c.Call.Return(run)
	return _c
}
