// Code generated by mockery v2.53.3. DO NOT EDIT.

package process

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockCommander is an autogenerated mock type for the Commander type
type MockCommander struct {
	mock.Mock
}

type MockCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommander) EXPECT() *MockCommander_Expecter {
	return &MockCommander_Expecter{mock: &_m.Mock}
}

// Process provides a mock function with no fields
func (_m *MockCommander) Process() *os.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 *os.Process
	if rf, ok := ret.Get(0).(func() *os.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.Process)
		}
	}

	return r0
}

// MockCommander_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockCommander_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
func (_e *MockCommander_Expecter) Process() *MockCommander_Process_Call {
	return &MockCommander_Process_Call{Call: _e.mock.On("Process")}
}

func (_c *MockCommander_Process_Call) Run(run func()) *MockCommander_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommander_Process_Call) Return(_a0 *os.Process) *MockCommander_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommander_Process_Call) RunAndReturn(run func() *os.Process) *MockCommander_Process_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockCommander) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommander_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCommander_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockCommander_Expecter) Start() *MockCommander_Start_Call {
	return &MockCommander_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockCommander_Start_Call) Run(run func()) *MockCommander_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommander_Start_Call) Return(_a0 error) *MockCommander_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommander_Start_Call) RunAndReturn(run func() error) *MockCommander_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with no fields
func (_m *MockCommander) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommander_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockCommander_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockCommander_Expecter) Wait() *MockCommander_Wait_Call {
	return &MockCommander_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *MockCommander_Wait_Call) Run(run func()) *MockCommander_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommander_Wait_Call) Return(_a0 error) *MockCommander_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommander_Wait_Call) RunAndReturn(run func() error) *MockCommander_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommander creates a new instance of MockCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommander {
	mock := &MockCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
