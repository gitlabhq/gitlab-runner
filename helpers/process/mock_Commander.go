// Code generated by mockery v2.43.0. DO NOT EDIT.

package process

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// MockCommander is an autogenerated mock type for the Commander type
type MockCommander struct {
	mock.Mock
}

// Process provides a mock function with given fields:
func (_m *MockCommander) Process() *os.Process {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 *os.Process
	if rf, ok := ret.Get(0).(func() *os.Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.Process)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockCommander) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *MockCommander) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommander creates a new instance of MockCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommander {
	mock := &MockCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
