// Code generated by mockery v2.53.3. DO NOT EDIT.

package process

import mock "github.com/stretchr/testify/mock"

// mockKiller is an autogenerated mock type for the killer type
type mockKiller struct {
	mock.Mock
}

type mockKiller_Expecter struct {
	mock *mock.Mock
}

func (_m *mockKiller) EXPECT() *mockKiller_Expecter {
	return &mockKiller_Expecter{mock: &_m.Mock}
}

// ForceKill provides a mock function with no fields
func (_m *mockKiller) ForceKill() {
	_m.Called()
}

// mockKiller_ForceKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceKill'
type mockKiller_ForceKill_Call struct {
	*mock.Call
}

// ForceKill is a helper method to define mock.On call
func (_e *mockKiller_Expecter) ForceKill() *mockKiller_ForceKill_Call {
	return &mockKiller_ForceKill_Call{Call: _e.mock.On("ForceKill")}
}

func (_c *mockKiller_ForceKill_Call) Run(run func()) *mockKiller_ForceKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockKiller_ForceKill_Call) Return() *mockKiller_ForceKill_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockKiller_ForceKill_Call) RunAndReturn(run func()) *mockKiller_ForceKill_Call {
	_c.Run(run)
	return _c
}

// Terminate provides a mock function with no fields
func (_m *mockKiller) Terminate() {
	_m.Called()
}

// mockKiller_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type mockKiller_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
func (_e *mockKiller_Expecter) Terminate() *mockKiller_Terminate_Call {
	return &mockKiller_Terminate_Call{Call: _e.mock.On("Terminate")}
}

func (_c *mockKiller_Terminate_Call) Run(run func()) *mockKiller_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockKiller_Terminate_Call) Return() *mockKiller_Terminate_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockKiller_Terminate_Call) RunAndReturn(run func()) *mockKiller_Terminate_Call {
	_c.Run(run)
	return _c
}

// newMockKiller creates a new instance of mockKiller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockKiller(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockKiller {
	mock := &mockKiller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
