// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usage_log

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockDummyWriteCloser creates a new instance of mockDummyWriteCloser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDummyWriteCloser(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDummyWriteCloser {
	mock := &mockDummyWriteCloser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockDummyWriteCloser is an autogenerated mock type for the dummyWriteCloser type
type mockDummyWriteCloser struct {
	mock.Mock
}

type mockDummyWriteCloser_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDummyWriteCloser) EXPECT() *mockDummyWriteCloser_Expecter {
	return &mockDummyWriteCloser_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type mockDummyWriteCloser
func (_mock *mockDummyWriteCloser) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockDummyWriteCloser_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockDummyWriteCloser_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockDummyWriteCloser_Expecter) Close() *mockDummyWriteCloser_Close_Call {
	return &mockDummyWriteCloser_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockDummyWriteCloser_Close_Call) Run(run func()) *mockDummyWriteCloser_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDummyWriteCloser_Close_Call) Return(err error) *mockDummyWriteCloser_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockDummyWriteCloser_Close_Call) RunAndReturn(run func() error) *mockDummyWriteCloser_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type mockDummyWriteCloser
func (_mock *mockDummyWriteCloser) Write(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockDummyWriteCloser_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mockDummyWriteCloser_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *mockDummyWriteCloser_Expecter) Write(p interface{}) *mockDummyWriteCloser_Write_Call {
	return &mockDummyWriteCloser_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *mockDummyWriteCloser_Write_Call) Run(run func(p []byte)) *mockDummyWriteCloser_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockDummyWriteCloser_Write_Call) Return(n int, err error) *mockDummyWriteCloser_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mockDummyWriteCloser_Write_Call) RunAndReturn(run func(p []byte) (int, error)) *mockDummyWriteCloser_Write_Call {
	_c.Call.Return(run)
	return _c
}
