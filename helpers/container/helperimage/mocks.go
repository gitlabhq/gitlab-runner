// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package helperimage

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockCreator creates a new instance of mockCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCreator {
	mock := &mockCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockCreator is an autogenerated mock type for the creator type
type mockCreator struct {
	mock.Mock
}

type mockCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCreator) EXPECT() *mockCreator_Expecter {
	return &mockCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type mockCreator
func (_mock *mockCreator) Create(revision string, cfg Config) (Info, error) {
	ret := _mock.Called(revision, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 Info
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, Config) (Info, error)); ok {
		return returnFunc(revision, cfg)
	}
	if returnFunc, ok := ret.Get(0).(func(string, Config) Info); ok {
		r0 = returnFunc(revision, cfg)
	} else {
		r0 = ret.Get(0).(Info)
	}
	if returnFunc, ok := ret.Get(1).(func(string, Config) error); ok {
		r1 = returnFunc(revision, cfg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - revision string
//   - cfg Config
func (_e *mockCreator_Expecter) Create(revision interface{}, cfg interface{}) *mockCreator_Create_Call {
	return &mockCreator_Create_Call{Call: _e.mock.On("Create", revision, cfg)}
}

func (_c *mockCreator_Create_Call) Run(run func(revision string, cfg Config)) *mockCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 Config
		if args[1] != nil {
			arg1 = args[1].(Config)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockCreator_Create_Call) Return(info Info, err error) *mockCreator_Create_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *mockCreator_Create_Call) RunAndReturn(run func(revision string, cfg Config) (Info, error)) *mockCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}
