// Code generated by mockery v2.53.3. DO NOT EDIT.

package gcp_secret_manager

import (
	context "context"

	common "gitlab.com/gitlab-org/gitlab-runner/common"

	mock "github.com/stretchr/testify/mock"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

type mockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClient) EXPECT() *mockClient_Expecter {
	return &mockClient_Expecter{mock: &_m.Mock}
}

// GetSecret provides a mock function with given fields: ctx, s
func (_m *mockClient) GetSecret(ctx context.Context, s *common.GCPSecretManagerSecret) (string, error) {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.GCPSecretManagerSecret) (string, error)); ok {
		return rf(ctx, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.GCPSecretManagerSecret) string); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.GCPSecretManagerSecret) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type mockClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - s *common.GCPSecretManagerSecret
func (_e *mockClient_Expecter) GetSecret(ctx interface{}, s interface{}) *mockClient_GetSecret_Call {
	return &mockClient_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, s)}
}

func (_c *mockClient_GetSecret_Call) Run(run func(ctx context.Context, s *common.GCPSecretManagerSecret)) *mockClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*common.GCPSecretManagerSecret))
	})
	return _c
}

func (_c *mockClient_GetSecret_Call) Return(_a0 string, _a1 error) *mockClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockClient_GetSecret_Call) RunAndReturn(run func(context.Context, *common.GCPSecretManagerSecret) (string, error)) *mockClient_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// newMockClient creates a new instance of mockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockClient {
	mock := &mockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
