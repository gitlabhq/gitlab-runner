// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package aws

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAWSSecretsManager creates a new instance of MockAWSSecretsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSSecretsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSSecretsManager {
	mock := &MockAWSSecretsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAWSSecretsManager is an autogenerated mock type for the AWSSecretsManager type
type MockAWSSecretsManager struct {
	mock.Mock
}

type MockAWSSecretsManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSSecretsManager) EXPECT() *MockAWSSecretsManager_Expecter {
	return &MockAWSSecretsManager_Expecter{mock: &_m.Mock}
}

// GetSecretString provides a mock function for the type MockAWSSecretsManager
func (_mock *MockAWSSecretsManager) GetSecretString(ctx context.Context, secretId string, versionId *string, versionStage *string) (string, error) {
	ret := _mock.Called(ctx, secretId, versionId, versionStage)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretString")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, *string) (string, error)); ok {
		return returnFunc(ctx, secretId, versionId, versionStage)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, *string) string); ok {
		r0 = returnFunc(ctx, secretId, versionId, versionStage)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, *string) error); ok {
		r1 = returnFunc(ctx, secretId, versionId, versionStage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAWSSecretsManager_GetSecretString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretString'
type MockAWSSecretsManager_GetSecretString_Call struct {
	*mock.Call
}

// GetSecretString is a helper method to define mock.On call
//   - ctx context.Context
//   - secretId string
//   - versionId *string
//   - versionStage *string
func (_e *MockAWSSecretsManager_Expecter) GetSecretString(ctx interface{}, secretId interface{}, versionId interface{}, versionStage interface{}) *MockAWSSecretsManager_GetSecretString_Call {
	return &MockAWSSecretsManager_GetSecretString_Call{Call: _e.mock.On("GetSecretString", ctx, secretId, versionId, versionStage)}
}

func (_c *MockAWSSecretsManager_GetSecretString_Call) Run(run func(ctx context.Context, secretId string, versionId *string, versionStage *string)) *MockAWSSecretsManager_GetSecretString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAWSSecretsManager_GetSecretString_Call) Return(s string, err error) *MockAWSSecretsManager_GetSecretString_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAWSSecretsManager_GetSecretString_Call) RunAndReturn(run func(ctx context.Context, secretId string, versionId *string, versionStage *string) (string, error)) *MockAWSSecretsManager_GetSecretString_Call {
	_c.Call.Return(run)
	return _c
}
