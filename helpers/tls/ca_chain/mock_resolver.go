// Code generated by mockery v2.53.3. DO NOT EDIT.

package ca_chain

import (
	x509 "crypto/x509"

	mock "github.com/stretchr/testify/mock"
)

// mockResolver is an autogenerated mock type for the resolver type
type mockResolver struct {
	mock.Mock
}

type mockResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *mockResolver) EXPECT() *mockResolver_Expecter {
	return &mockResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: certs
func (_m *mockResolver) Resolve(certs []*x509.Certificate) ([]*x509.Certificate, error) {
	ret := _m.Called(certs)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 []*x509.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func([]*x509.Certificate) ([]*x509.Certificate, error)); ok {
		return rf(certs)
	}
	if rf, ok := ret.Get(0).(func([]*x509.Certificate) []*x509.Certificate); ok {
		r0 = rf(certs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*x509.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func([]*x509.Certificate) error); ok {
		r1 = rf(certs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type mockResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - certs []*x509.Certificate
func (_e *mockResolver_Expecter) Resolve(certs interface{}) *mockResolver_Resolve_Call {
	return &mockResolver_Resolve_Call{Call: _e.mock.On("Resolve", certs)}
}

func (_c *mockResolver_Resolve_Call) Run(run func(certs []*x509.Certificate)) *mockResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*x509.Certificate))
	})
	return _c
}

func (_c *mockResolver_Resolve_Call) Return(_a0 []*x509.Certificate, _a1 error) *mockResolver_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockResolver_Resolve_Call) RunAndReturn(run func([]*x509.Certificate) ([]*x509.Certificate, error)) *mockResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// newMockResolver creates a new instance of mockResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockResolver {
	mock := &mockResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
