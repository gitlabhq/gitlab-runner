// Code generated by mockery v2.53.3. DO NOT EDIT.

package ca_chain

import (
	tls "crypto/tls"

	mock "github.com/stretchr/testify/mock"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// BuildChainFromTLSConnectionState provides a mock function with given fields: TLS
func (_m *MockBuilder) BuildChainFromTLSConnectionState(TLS *tls.ConnectionState) error {
	ret := _m.Called(TLS)

	if len(ret) == 0 {
		panic("no return value specified for BuildChainFromTLSConnectionState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*tls.ConnectionState) error); ok {
		r0 = rf(TLS)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBuilder_BuildChainFromTLSConnectionState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildChainFromTLSConnectionState'
type MockBuilder_BuildChainFromTLSConnectionState_Call struct {
	*mock.Call
}

// BuildChainFromTLSConnectionState is a helper method to define mock.On call
//   - TLS *tls.ConnectionState
func (_e *MockBuilder_Expecter) BuildChainFromTLSConnectionState(TLS interface{}) *MockBuilder_BuildChainFromTLSConnectionState_Call {
	return &MockBuilder_BuildChainFromTLSConnectionState_Call{Call: _e.mock.On("BuildChainFromTLSConnectionState", TLS)}
}

func (_c *MockBuilder_BuildChainFromTLSConnectionState_Call) Run(run func(TLS *tls.ConnectionState)) *MockBuilder_BuildChainFromTLSConnectionState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tls.ConnectionState))
	})
	return _c
}

func (_c *MockBuilder_BuildChainFromTLSConnectionState_Call) Return(_a0 error) *MockBuilder_BuildChainFromTLSConnectionState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_BuildChainFromTLSConnectionState_Call) RunAndReturn(run func(*tls.ConnectionState) error) *MockBuilder_BuildChainFromTLSConnectionState_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockBuilder) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBuilder_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockBuilder_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockBuilder_Expecter) String() *MockBuilder_String_Call {
	return &MockBuilder_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockBuilder_String_Call) Run(run func()) *MockBuilder_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBuilder_String_Call) Return(_a0 string) *MockBuilder_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_String_Call) RunAndReturn(run func() string) *MockBuilder_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
