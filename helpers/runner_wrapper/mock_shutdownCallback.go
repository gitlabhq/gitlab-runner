// Code generated by mockery v2.43.0. DO NOT EDIT.

package runner_wrapper

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockShutdownCallback is an autogenerated mock type for the shutdownCallback type
type mockShutdownCallback struct {
	mock.Mock
}

type mockShutdownCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *mockShutdownCallback) EXPECT() *mockShutdownCallback_Expecter {
	return &mockShutdownCallback_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx
func (_m *mockShutdownCallback) Run(ctx context.Context) {
	_m.Called(ctx)
}

// mockShutdownCallback_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type mockShutdownCallback_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockShutdownCallback_Expecter) Run(ctx interface{}) *mockShutdownCallback_Run_Call {
	return &mockShutdownCallback_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *mockShutdownCallback_Run_Call) Run(run func(ctx context.Context)) *mockShutdownCallback_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockShutdownCallback_Run_Call) Return() *mockShutdownCallback_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockShutdownCallback_Run_Call) RunAndReturn(run func(context.Context)) *mockShutdownCallback_Run_Call {
	_c.Call.Return(run)
	return _c
}

// newMockShutdownCallback creates a new instance of mockShutdownCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockShutdownCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockShutdownCallback {
	mock := &mockShutdownCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
