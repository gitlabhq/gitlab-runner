// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package server

import (
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/gitlab-org/gitlab-runner/helpers/runner_wrapper/api"
)

// newMockWrapper creates a new instance of mockWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWrapper {
	mock := &mockWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockWrapper is an autogenerated mock type for the wrapper type
type mockWrapper struct {
	mock.Mock
}

type mockWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *mockWrapper) EXPECT() *mockWrapper_Expecter {
	return &mockWrapper_Expecter{mock: &_m.Mock}
}

// FailureReason provides a mock function for the type mockWrapper
func (_mock *mockWrapper) FailureReason() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FailureReason")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// mockWrapper_FailureReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailureReason'
type mockWrapper_FailureReason_Call struct {
	*mock.Call
}

// FailureReason is a helper method to define mock.On call
func (_e *mockWrapper_Expecter) FailureReason() *mockWrapper_FailureReason_Call {
	return &mockWrapper_FailureReason_Call{Call: _e.mock.On("FailureReason")}
}

func (_c *mockWrapper_FailureReason_Call) Run(run func()) *mockWrapper_FailureReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockWrapper_FailureReason_Call) Return(s string) *mockWrapper_FailureReason_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *mockWrapper_FailureReason_Call) RunAndReturn(run func() string) *mockWrapper_FailureReason_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateForcefulShutdown provides a mock function for the type mockWrapper
func (_mock *mockWrapper) InitiateForcefulShutdown() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitiateForcefulShutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockWrapper_InitiateForcefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateForcefulShutdown'
type mockWrapper_InitiateForcefulShutdown_Call struct {
	*mock.Call
}

// InitiateForcefulShutdown is a helper method to define mock.On call
func (_e *mockWrapper_Expecter) InitiateForcefulShutdown() *mockWrapper_InitiateForcefulShutdown_Call {
	return &mockWrapper_InitiateForcefulShutdown_Call{Call: _e.mock.On("InitiateForcefulShutdown")}
}

func (_c *mockWrapper_InitiateForcefulShutdown_Call) Run(run func()) *mockWrapper_InitiateForcefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockWrapper_InitiateForcefulShutdown_Call) Return(err error) *mockWrapper_InitiateForcefulShutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockWrapper_InitiateForcefulShutdown_Call) RunAndReturn(run func() error) *mockWrapper_InitiateForcefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateGracefulShutdown provides a mock function for the type mockWrapper
func (_mock *mockWrapper) InitiateGracefulShutdown(req api.InitGracefulShutdownRequest) error {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for InitiateGracefulShutdown")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(api.InitGracefulShutdownRequest) error); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockWrapper_InitiateGracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateGracefulShutdown'
type mockWrapper_InitiateGracefulShutdown_Call struct {
	*mock.Call
}

// InitiateGracefulShutdown is a helper method to define mock.On call
//   - req api.InitGracefulShutdownRequest
func (_e *mockWrapper_Expecter) InitiateGracefulShutdown(req interface{}) *mockWrapper_InitiateGracefulShutdown_Call {
	return &mockWrapper_InitiateGracefulShutdown_Call{Call: _e.mock.On("InitiateGracefulShutdown", req)}
}

func (_c *mockWrapper_InitiateGracefulShutdown_Call) Run(run func(req api.InitGracefulShutdownRequest)) *mockWrapper_InitiateGracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 api.InitGracefulShutdownRequest
		if args[0] != nil {
			arg0 = args[0].(api.InitGracefulShutdownRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockWrapper_InitiateGracefulShutdown_Call) Return(err error) *mockWrapper_InitiateGracefulShutdown_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockWrapper_InitiateGracefulShutdown_Call) RunAndReturn(run func(req api.InitGracefulShutdownRequest) error) *mockWrapper_InitiateGracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type mockWrapper
func (_mock *mockWrapper) Status() api.Status {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 api.Status
	if returnFunc, ok := ret.Get(0).(func() api.Status); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(api.Status)
	}
	return r0
}

// mockWrapper_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type mockWrapper_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *mockWrapper_Expecter) Status() *mockWrapper_Status_Call {
	return &mockWrapper_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *mockWrapper_Status_Call) Run(run func()) *mockWrapper_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockWrapper_Status_Call) Return(status api.Status) *mockWrapper_Status_Call {
	_c.Call.Return(status)
	return _c
}

func (_c *mockWrapper_Status_Call) RunAndReturn(run func() api.Status) *mockWrapper_Status_Call {
	_c.Call.Return(run)
	return _c
}
