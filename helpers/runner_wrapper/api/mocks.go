// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package api

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockInitGracefulShutdownRequest creates a new instance of MockInitGracefulShutdownRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInitGracefulShutdownRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInitGracefulShutdownRequest {
	mock := &MockInitGracefulShutdownRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInitGracefulShutdownRequest is an autogenerated mock type for the InitGracefulShutdownRequest type
type MockInitGracefulShutdownRequest struct {
	mock.Mock
}

type MockInitGracefulShutdownRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInitGracefulShutdownRequest) EXPECT() *MockInitGracefulShutdownRequest_Expecter {
	return &MockInitGracefulShutdownRequest_Expecter{mock: &_m.Mock}
}

// ShutdownCallbackDef provides a mock function for the type MockInitGracefulShutdownRequest
func (_mock *MockInitGracefulShutdownRequest) ShutdownCallbackDef() ShutdownCallbackDef {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShutdownCallbackDef")
	}

	var r0 ShutdownCallbackDef
	if returnFunc, ok := ret.Get(0).(func() ShutdownCallbackDef); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ShutdownCallbackDef)
		}
	}
	return r0
}

// MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownCallbackDef'
type MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call struct {
	*mock.Call
}

// ShutdownCallbackDef is a helper method to define mock.On call
func (_e *MockInitGracefulShutdownRequest_Expecter) ShutdownCallbackDef() *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call {
	return &MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call{Call: _e.mock.On("ShutdownCallbackDef")}
}

func (_c *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call) Run(run func()) *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call) Return(shutdownCallbackDef ShutdownCallbackDef) *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call {
	_c.Call.Return(shutdownCallbackDef)
	return _c
}

func (_c *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call) RunAndReturn(run func() ShutdownCallbackDef) *MockInitGracefulShutdownRequest_ShutdownCallbackDef_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShutdownCallbackDef creates a new instance of MockShutdownCallbackDef. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShutdownCallbackDef(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShutdownCallbackDef {
	mock := &MockShutdownCallbackDef{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShutdownCallbackDef is an autogenerated mock type for the ShutdownCallbackDef type
type MockShutdownCallbackDef struct {
	mock.Mock
}

type MockShutdownCallbackDef_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShutdownCallbackDef) EXPECT() *MockShutdownCallbackDef_Expecter {
	return &MockShutdownCallbackDef_Expecter{mock: &_m.Mock}
}

// Headers provides a mock function for the type MockShutdownCallbackDef
func (_mock *MockShutdownCallbackDef) Headers() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockShutdownCallbackDef_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type MockShutdownCallbackDef_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *MockShutdownCallbackDef_Expecter) Headers() *MockShutdownCallbackDef_Headers_Call {
	return &MockShutdownCallbackDef_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *MockShutdownCallbackDef_Headers_Call) Run(run func()) *MockShutdownCallbackDef_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownCallbackDef_Headers_Call) Return(stringToString map[string]string) *MockShutdownCallbackDef_Headers_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockShutdownCallbackDef_Headers_Call) RunAndReturn(run func() map[string]string) *MockShutdownCallbackDef_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// Method provides a mock function for the type MockShutdownCallbackDef
func (_mock *MockShutdownCallbackDef) Method() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockShutdownCallbackDef_Method_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Method'
type MockShutdownCallbackDef_Method_Call struct {
	*mock.Call
}

// Method is a helper method to define mock.On call
func (_e *MockShutdownCallbackDef_Expecter) Method() *MockShutdownCallbackDef_Method_Call {
	return &MockShutdownCallbackDef_Method_Call{Call: _e.mock.On("Method")}
}

func (_c *MockShutdownCallbackDef_Method_Call) Run(run func()) *MockShutdownCallbackDef_Method_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownCallbackDef_Method_Call) Return(s string) *MockShutdownCallbackDef_Method_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockShutdownCallbackDef_Method_Call) RunAndReturn(run func() string) *MockShutdownCallbackDef_Method_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function for the type MockShutdownCallbackDef
func (_mock *MockShutdownCallbackDef) URL() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockShutdownCallbackDef_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type MockShutdownCallbackDef_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
func (_e *MockShutdownCallbackDef_Expecter) URL() *MockShutdownCallbackDef_URL_Call {
	return &MockShutdownCallbackDef_URL_Call{Call: _e.mock.On("URL")}
}

func (_c *MockShutdownCallbackDef_URL_Call) Run(run func()) *MockShutdownCallbackDef_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownCallbackDef_URL_Call) Return(s string) *MockShutdownCallbackDef_URL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockShutdownCallbackDef_URL_Call) RunAndReturn(run func() string) *MockShutdownCallbackDef_URL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShutdownCallback creates a new instance of MockShutdownCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShutdownCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShutdownCallback {
	mock := &MockShutdownCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShutdownCallback is an autogenerated mock type for the ShutdownCallback type
type MockShutdownCallback struct {
	mock.Mock
}

type MockShutdownCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShutdownCallback) EXPECT() *MockShutdownCallback_Expecter {
	return &MockShutdownCallback_Expecter{mock: &_m.Mock}
}

// Run provides a mock function for the type MockShutdownCallback
func (_mock *MockShutdownCallback) Run(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockShutdownCallback_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockShutdownCallback_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockShutdownCallback_Expecter) Run(ctx interface{}) *MockShutdownCallback_Run_Call {
	return &MockShutdownCallback_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockShutdownCallback_Run_Call) Run(run func(ctx context.Context)) *MockShutdownCallback_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShutdownCallback_Run_Call) Return() *MockShutdownCallback_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockShutdownCallback_Run_Call) RunAndReturn(run func(ctx context.Context)) *MockShutdownCallback_Run_Call {
	_c.Run(run)
	return _c
}
