// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package proto

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockProcessWrapperClient creates a new instance of MockProcessWrapperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessWrapperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessWrapperClient {
	mock := &MockProcessWrapperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProcessWrapperClient is an autogenerated mock type for the ProcessWrapperClient type
type MockProcessWrapperClient struct {
	mock.Mock
}

type MockProcessWrapperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessWrapperClient) EXPECT() *MockProcessWrapperClient_Expecter {
	return &MockProcessWrapperClient_Expecter{mock: &_m.Mock}
}

// CheckStatus provides a mock function for the type MockProcessWrapperClient
func (_mock *MockProcessWrapperClient) CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 *CheckStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CheckStatusRequest, ...grpc.CallOption) (*CheckStatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CheckStatusRequest, ...grpc.CallOption) *CheckStatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CheckStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *CheckStatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessWrapperClient_CheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStatus'
type MockProcessWrapperClient_CheckStatus_Call struct {
	*mock.Call
}

// CheckStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CheckStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockProcessWrapperClient_Expecter) CheckStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockProcessWrapperClient_CheckStatus_Call {
	return &MockProcessWrapperClient_CheckStatus_Call{Call: _e.mock.On("CheckStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProcessWrapperClient_CheckStatus_Call) Run(run func(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption)) *MockProcessWrapperClient_CheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *CheckStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*CheckStatusRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProcessWrapperClient_CheckStatus_Call) Return(checkStatusResponse *CheckStatusResponse, err error) *MockProcessWrapperClient_CheckStatus_Call {
	_c.Call.Return(checkStatusResponse, err)
	return _c
}

func (_c *MockProcessWrapperClient_CheckStatus_Call) RunAndReturn(run func(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error)) *MockProcessWrapperClient_CheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// InitForcefulShutdown provides a mock function for the type MockProcessWrapperClient
func (_mock *MockProcessWrapperClient) InitForcefulShutdown(ctx context.Context, in *InitForcefulShutdownRequest, opts ...grpc.CallOption) (*InitForcefulShutdownResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitForcefulShutdown")
	}

	var r0 *InitForcefulShutdownResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) (*InitForcefulShutdownResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) *InitForcefulShutdownResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitForcefulShutdownResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessWrapperClient_InitForcefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitForcefulShutdown'
type MockProcessWrapperClient_InitForcefulShutdown_Call struct {
	*mock.Call
}

// InitForcefulShutdown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *InitForcefulShutdownRequest
//   - opts ...grpc.CallOption
func (_e *MockProcessWrapperClient_Expecter) InitForcefulShutdown(ctx interface{}, in interface{}, opts ...interface{}) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	return &MockProcessWrapperClient_InitForcefulShutdown_Call{Call: _e.mock.On("InitForcefulShutdown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProcessWrapperClient_InitForcefulShutdown_Call) Run(run func(ctx context.Context, in *InitForcefulShutdownRequest, opts ...grpc.CallOption)) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *InitForcefulShutdownRequest
		if args[1] != nil {
			arg1 = args[1].(*InitForcefulShutdownRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProcessWrapperClient_InitForcefulShutdown_Call) Return(initForcefulShutdownResponse *InitForcefulShutdownResponse, err error) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	_c.Call.Return(initForcefulShutdownResponse, err)
	return _c
}

func (_c *MockProcessWrapperClient_InitForcefulShutdown_Call) RunAndReturn(run func(ctx context.Context, in *InitForcefulShutdownRequest, opts ...grpc.CallOption) (*InitForcefulShutdownResponse, error)) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// InitGracefulShutdown provides a mock function for the type MockProcessWrapperClient
func (_mock *MockProcessWrapperClient) InitGracefulShutdown(ctx context.Context, in *InitGracefulShutdownRequest, opts ...grpc.CallOption) (*InitGracefulShutdownResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitGracefulShutdown")
	}

	var r0 *InitGracefulShutdownResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) (*InitGracefulShutdownResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) *InitGracefulShutdownResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitGracefulShutdownResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessWrapperClient_InitGracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitGracefulShutdown'
type MockProcessWrapperClient_InitGracefulShutdown_Call struct {
	*mock.Call
}

// InitGracefulShutdown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *InitGracefulShutdownRequest
//   - opts ...grpc.CallOption
func (_e *MockProcessWrapperClient_Expecter) InitGracefulShutdown(ctx interface{}, in interface{}, opts ...interface{}) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	return &MockProcessWrapperClient_InitGracefulShutdown_Call{Call: _e.mock.On("InitGracefulShutdown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProcessWrapperClient_InitGracefulShutdown_Call) Run(run func(ctx context.Context, in *InitGracefulShutdownRequest, opts ...grpc.CallOption)) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *InitGracefulShutdownRequest
		if args[1] != nil {
			arg1 = args[1].(*InitGracefulShutdownRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProcessWrapperClient_InitGracefulShutdown_Call) Return(initGracefulShutdownResponse *InitGracefulShutdownResponse, err error) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	_c.Call.Return(initGracefulShutdownResponse, err)
	return _c
}

func (_c *MockProcessWrapperClient_InitGracefulShutdown_Call) RunAndReturn(run func(ctx context.Context, in *InitGracefulShutdownRequest, opts ...grpc.CallOption) (*InitGracefulShutdownResponse, error)) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessWrapperServer creates a new instance of MockProcessWrapperServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessWrapperServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessWrapperServer {
	mock := &MockProcessWrapperServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProcessWrapperServer is an autogenerated mock type for the ProcessWrapperServer type
type MockProcessWrapperServer struct {
	mock.Mock
}

type MockProcessWrapperServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessWrapperServer) EXPECT() *MockProcessWrapperServer_Expecter {
	return &MockProcessWrapperServer_Expecter{mock: &_m.Mock}
}

// CheckStatus provides a mock function for the type MockProcessWrapperServer
func (_mock *MockProcessWrapperServer) CheckStatus(context1 context.Context, checkStatusRequest *CheckStatusRequest) (*CheckStatusResponse, error) {
	ret := _mock.Called(context1, checkStatusRequest)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 *CheckStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CheckStatusRequest) (*CheckStatusResponse, error)); ok {
		return returnFunc(context1, checkStatusRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CheckStatusRequest) *CheckStatusResponse); ok {
		r0 = returnFunc(context1, checkStatusRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CheckStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *CheckStatusRequest) error); ok {
		r1 = returnFunc(context1, checkStatusRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessWrapperServer_CheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStatus'
type MockProcessWrapperServer_CheckStatus_Call struct {
	*mock.Call
}

// CheckStatus is a helper method to define mock.On call
//   - context1 context.Context
//   - checkStatusRequest *CheckStatusRequest
func (_e *MockProcessWrapperServer_Expecter) CheckStatus(context1 interface{}, checkStatusRequest interface{}) *MockProcessWrapperServer_CheckStatus_Call {
	return &MockProcessWrapperServer_CheckStatus_Call{Call: _e.mock.On("CheckStatus", context1, checkStatusRequest)}
}

func (_c *MockProcessWrapperServer_CheckStatus_Call) Run(run func(context1 context.Context, checkStatusRequest *CheckStatusRequest)) *MockProcessWrapperServer_CheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *CheckStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*CheckStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProcessWrapperServer_CheckStatus_Call) Return(checkStatusResponse *CheckStatusResponse, err error) *MockProcessWrapperServer_CheckStatus_Call {
	_c.Call.Return(checkStatusResponse, err)
	return _c
}

func (_c *MockProcessWrapperServer_CheckStatus_Call) RunAndReturn(run func(context1 context.Context, checkStatusRequest *CheckStatusRequest) (*CheckStatusResponse, error)) *MockProcessWrapperServer_CheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// InitForcefulShutdown provides a mock function for the type MockProcessWrapperServer
func (_mock *MockProcessWrapperServer) InitForcefulShutdown(context1 context.Context, initForcefulShutdownRequest *InitForcefulShutdownRequest) (*InitForcefulShutdownResponse, error) {
	ret := _mock.Called(context1, initForcefulShutdownRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitForcefulShutdown")
	}

	var r0 *InitForcefulShutdownResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitForcefulShutdownRequest) (*InitForcefulShutdownResponse, error)); ok {
		return returnFunc(context1, initForcefulShutdownRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitForcefulShutdownRequest) *InitForcefulShutdownResponse); ok {
		r0 = returnFunc(context1, initForcefulShutdownRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitForcefulShutdownResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *InitForcefulShutdownRequest) error); ok {
		r1 = returnFunc(context1, initForcefulShutdownRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessWrapperServer_InitForcefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitForcefulShutdown'
type MockProcessWrapperServer_InitForcefulShutdown_Call struct {
	*mock.Call
}

// InitForcefulShutdown is a helper method to define mock.On call
//   - context1 context.Context
//   - initForcefulShutdownRequest *InitForcefulShutdownRequest
func (_e *MockProcessWrapperServer_Expecter) InitForcefulShutdown(context1 interface{}, initForcefulShutdownRequest interface{}) *MockProcessWrapperServer_InitForcefulShutdown_Call {
	return &MockProcessWrapperServer_InitForcefulShutdown_Call{Call: _e.mock.On("InitForcefulShutdown", context1, initForcefulShutdownRequest)}
}

func (_c *MockProcessWrapperServer_InitForcefulShutdown_Call) Run(run func(context1 context.Context, initForcefulShutdownRequest *InitForcefulShutdownRequest)) *MockProcessWrapperServer_InitForcefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *InitForcefulShutdownRequest
		if args[1] != nil {
			arg1 = args[1].(*InitForcefulShutdownRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProcessWrapperServer_InitForcefulShutdown_Call) Return(initForcefulShutdownResponse *InitForcefulShutdownResponse, err error) *MockProcessWrapperServer_InitForcefulShutdown_Call {
	_c.Call.Return(initForcefulShutdownResponse, err)
	return _c
}

func (_c *MockProcessWrapperServer_InitForcefulShutdown_Call) RunAndReturn(run func(context1 context.Context, initForcefulShutdownRequest *InitForcefulShutdownRequest) (*InitForcefulShutdownResponse, error)) *MockProcessWrapperServer_InitForcefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// InitGracefulShutdown provides a mock function for the type MockProcessWrapperServer
func (_mock *MockProcessWrapperServer) InitGracefulShutdown(context1 context.Context, initGracefulShutdownRequest *InitGracefulShutdownRequest) (*InitGracefulShutdownResponse, error) {
	ret := _mock.Called(context1, initGracefulShutdownRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitGracefulShutdown")
	}

	var r0 *InitGracefulShutdownResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitGracefulShutdownRequest) (*InitGracefulShutdownResponse, error)); ok {
		return returnFunc(context1, initGracefulShutdownRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *InitGracefulShutdownRequest) *InitGracefulShutdownResponse); ok {
		r0 = returnFunc(context1, initGracefulShutdownRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitGracefulShutdownResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *InitGracefulShutdownRequest) error); ok {
		r1 = returnFunc(context1, initGracefulShutdownRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProcessWrapperServer_InitGracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitGracefulShutdown'
type MockProcessWrapperServer_InitGracefulShutdown_Call struct {
	*mock.Call
}

// InitGracefulShutdown is a helper method to define mock.On call
//   - context1 context.Context
//   - initGracefulShutdownRequest *InitGracefulShutdownRequest
func (_e *MockProcessWrapperServer_Expecter) InitGracefulShutdown(context1 interface{}, initGracefulShutdownRequest interface{}) *MockProcessWrapperServer_InitGracefulShutdown_Call {
	return &MockProcessWrapperServer_InitGracefulShutdown_Call{Call: _e.mock.On("InitGracefulShutdown", context1, initGracefulShutdownRequest)}
}

func (_c *MockProcessWrapperServer_InitGracefulShutdown_Call) Run(run func(context1 context.Context, initGracefulShutdownRequest *InitGracefulShutdownRequest)) *MockProcessWrapperServer_InitGracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *InitGracefulShutdownRequest
		if args[1] != nil {
			arg1 = args[1].(*InitGracefulShutdownRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProcessWrapperServer_InitGracefulShutdown_Call) Return(initGracefulShutdownResponse *InitGracefulShutdownResponse, err error) *MockProcessWrapperServer_InitGracefulShutdown_Call {
	_c.Call.Return(initGracefulShutdownResponse, err)
	return _c
}

func (_c *MockProcessWrapperServer_InitGracefulShutdown_Call) RunAndReturn(run func(context1 context.Context, initGracefulShutdownRequest *InitGracefulShutdownRequest) (*InitGracefulShutdownResponse, error)) *MockProcessWrapperServer_InitGracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedProcessWrapperServer provides a mock function for the type MockProcessWrapperServer
func (_mock *MockProcessWrapperServer) mustEmbedUnimplementedProcessWrapperServer() {
	_mock.Called()
	return
}

// MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedProcessWrapperServer'
type MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedProcessWrapperServer is a helper method to define mock.On call
func (_e *MockProcessWrapperServer_Expecter) mustEmbedUnimplementedProcessWrapperServer() *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	return &MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call{Call: _e.mock.On("mustEmbedUnimplementedProcessWrapperServer")}
}

func (_c *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call) Run(run func()) *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call) Return() *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call) RunAndReturn(run func()) *MockProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	_c.Run(run)
	return _c
}

// NewMockUnsafeProcessWrapperServer creates a new instance of MockUnsafeProcessWrapperServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnsafeProcessWrapperServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnsafeProcessWrapperServer {
	mock := &MockUnsafeProcessWrapperServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnsafeProcessWrapperServer is an autogenerated mock type for the UnsafeProcessWrapperServer type
type MockUnsafeProcessWrapperServer struct {
	mock.Mock
}

type MockUnsafeProcessWrapperServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnsafeProcessWrapperServer) EXPECT() *MockUnsafeProcessWrapperServer_Expecter {
	return &MockUnsafeProcessWrapperServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedProcessWrapperServer provides a mock function for the type MockUnsafeProcessWrapperServer
func (_mock *MockUnsafeProcessWrapperServer) mustEmbedUnimplementedProcessWrapperServer() {
	_mock.Called()
	return
}

// MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedProcessWrapperServer'
type MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedProcessWrapperServer is a helper method to define mock.On call
func (_e *MockUnsafeProcessWrapperServer_Expecter) mustEmbedUnimplementedProcessWrapperServer() *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	return &MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call{Call: _e.mock.On("mustEmbedUnimplementedProcessWrapperServer")}
}

func (_c *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call) Run(run func()) *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call) Return() *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call) RunAndReturn(run func()) *MockUnsafeProcessWrapperServer_mustEmbedUnimplementedProcessWrapperServer_Call {
	_c.Run(run)
	return _c
}
