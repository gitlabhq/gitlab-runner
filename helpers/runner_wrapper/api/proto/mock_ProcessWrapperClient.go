// Code generated by mockery v2.53.3. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockProcessWrapperClient is an autogenerated mock type for the ProcessWrapperClient type
type MockProcessWrapperClient struct {
	mock.Mock
}

type MockProcessWrapperClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProcessWrapperClient) EXPECT() *MockProcessWrapperClient_Expecter {
	return &MockProcessWrapperClient_Expecter{mock: &_m.Mock}
}

// CheckStatus provides a mock function with given fields: ctx, in, opts
func (_m *MockProcessWrapperClient) CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 *CheckStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CheckStatusRequest, ...grpc.CallOption) (*CheckStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CheckStatusRequest, ...grpc.CallOption) *CheckStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CheckStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CheckStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessWrapperClient_CheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStatus'
type MockProcessWrapperClient_CheckStatus_Call struct {
	*mock.Call
}

// CheckStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CheckStatusRequest
//   - opts ...grpc.CallOption
func (_e *MockProcessWrapperClient_Expecter) CheckStatus(ctx interface{}, in interface{}, opts ...interface{}) *MockProcessWrapperClient_CheckStatus_Call {
	return &MockProcessWrapperClient_CheckStatus_Call{Call: _e.mock.On("CheckStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProcessWrapperClient_CheckStatus_Call) Run(run func(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption)) *MockProcessWrapperClient_CheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CheckStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProcessWrapperClient_CheckStatus_Call) Return(_a0 *CheckStatusResponse, _a1 error) *MockProcessWrapperClient_CheckStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessWrapperClient_CheckStatus_Call) RunAndReturn(run func(context.Context, *CheckStatusRequest, ...grpc.CallOption) (*CheckStatusResponse, error)) *MockProcessWrapperClient_CheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// InitForcefulShutdown provides a mock function with given fields: ctx, in, opts
func (_m *MockProcessWrapperClient) InitForcefulShutdown(ctx context.Context, in *InitForcefulShutdownRequest, opts ...grpc.CallOption) (*InitForcefulShutdownResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitForcefulShutdown")
	}

	var r0 *InitForcefulShutdownResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) (*InitForcefulShutdownResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) *InitForcefulShutdownResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitForcefulShutdownResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessWrapperClient_InitForcefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitForcefulShutdown'
type MockProcessWrapperClient_InitForcefulShutdown_Call struct {
	*mock.Call
}

// InitForcefulShutdown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *InitForcefulShutdownRequest
//   - opts ...grpc.CallOption
func (_e *MockProcessWrapperClient_Expecter) InitForcefulShutdown(ctx interface{}, in interface{}, opts ...interface{}) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	return &MockProcessWrapperClient_InitForcefulShutdown_Call{Call: _e.mock.On("InitForcefulShutdown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProcessWrapperClient_InitForcefulShutdown_Call) Run(run func(ctx context.Context, in *InitForcefulShutdownRequest, opts ...grpc.CallOption)) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*InitForcefulShutdownRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProcessWrapperClient_InitForcefulShutdown_Call) Return(_a0 *InitForcefulShutdownResponse, _a1 error) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessWrapperClient_InitForcefulShutdown_Call) RunAndReturn(run func(context.Context, *InitForcefulShutdownRequest, ...grpc.CallOption) (*InitForcefulShutdownResponse, error)) *MockProcessWrapperClient_InitForcefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// InitGracefulShutdown provides a mock function with given fields: ctx, in, opts
func (_m *MockProcessWrapperClient) InitGracefulShutdown(ctx context.Context, in *InitGracefulShutdownRequest, opts ...grpc.CallOption) (*InitGracefulShutdownResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitGracefulShutdown")
	}

	var r0 *InitGracefulShutdownResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) (*InitGracefulShutdownResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) *InitGracefulShutdownResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*InitGracefulShutdownResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessWrapperClient_InitGracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitGracefulShutdown'
type MockProcessWrapperClient_InitGracefulShutdown_Call struct {
	*mock.Call
}

// InitGracefulShutdown is a helper method to define mock.On call
//   - ctx context.Context
//   - in *InitGracefulShutdownRequest
//   - opts ...grpc.CallOption
func (_e *MockProcessWrapperClient_Expecter) InitGracefulShutdown(ctx interface{}, in interface{}, opts ...interface{}) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	return &MockProcessWrapperClient_InitGracefulShutdown_Call{Call: _e.mock.On("InitGracefulShutdown",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProcessWrapperClient_InitGracefulShutdown_Call) Run(run func(ctx context.Context, in *InitGracefulShutdownRequest, opts ...grpc.CallOption)) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*InitGracefulShutdownRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProcessWrapperClient_InitGracefulShutdown_Call) Return(_a0 *InitGracefulShutdownResponse, _a1 error) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessWrapperClient_InitGracefulShutdown_Call) RunAndReturn(run func(context.Context, *InitGracefulShutdownRequest, ...grpc.CallOption) (*InitGracefulShutdownResponse, error)) *MockProcessWrapperClient_InitGracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessWrapperClient creates a new instance of MockProcessWrapperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessWrapperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessWrapperClient {
	mock := &MockProcessWrapperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
