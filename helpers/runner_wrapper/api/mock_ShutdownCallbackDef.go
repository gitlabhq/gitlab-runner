// Code generated by mockery v2.43.0. DO NOT EDIT.

package api

import mock "github.com/stretchr/testify/mock"

// MockShutdownCallbackDef is an autogenerated mock type for the ShutdownCallbackDef type
type MockShutdownCallbackDef struct {
	mock.Mock
}

type MockShutdownCallbackDef_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShutdownCallbackDef) EXPECT() *MockShutdownCallbackDef_Expecter {
	return &MockShutdownCallbackDef_Expecter{mock: &_m.Mock}
}

// Headers provides a mock function with given fields:
func (_m *MockShutdownCallbackDef) Headers() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Headers")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockShutdownCallbackDef_Headers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Headers'
type MockShutdownCallbackDef_Headers_Call struct {
	*mock.Call
}

// Headers is a helper method to define mock.On call
func (_e *MockShutdownCallbackDef_Expecter) Headers() *MockShutdownCallbackDef_Headers_Call {
	return &MockShutdownCallbackDef_Headers_Call{Call: _e.mock.On("Headers")}
}

func (_c *MockShutdownCallbackDef_Headers_Call) Run(run func()) *MockShutdownCallbackDef_Headers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownCallbackDef_Headers_Call) Return(_a0 map[string]string) *MockShutdownCallbackDef_Headers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShutdownCallbackDef_Headers_Call) RunAndReturn(run func() map[string]string) *MockShutdownCallbackDef_Headers_Call {
	_c.Call.Return(run)
	return _c
}

// Method provides a mock function with given fields:
func (_m *MockShutdownCallbackDef) Method() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockShutdownCallbackDef_Method_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Method'
type MockShutdownCallbackDef_Method_Call struct {
	*mock.Call
}

// Method is a helper method to define mock.On call
func (_e *MockShutdownCallbackDef_Expecter) Method() *MockShutdownCallbackDef_Method_Call {
	return &MockShutdownCallbackDef_Method_Call{Call: _e.mock.On("Method")}
}

func (_c *MockShutdownCallbackDef_Method_Call) Run(run func()) *MockShutdownCallbackDef_Method_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownCallbackDef_Method_Call) Return(_a0 string) *MockShutdownCallbackDef_Method_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShutdownCallbackDef_Method_Call) RunAndReturn(run func() string) *MockShutdownCallbackDef_Method_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with given fields:
func (_m *MockShutdownCallbackDef) URL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockShutdownCallbackDef_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type MockShutdownCallbackDef_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
func (_e *MockShutdownCallbackDef_Expecter) URL() *MockShutdownCallbackDef_URL_Call {
	return &MockShutdownCallbackDef_URL_Call{Call: _e.mock.On("URL")}
}

func (_c *MockShutdownCallbackDef_URL_Call) Run(run func()) *MockShutdownCallbackDef_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShutdownCallbackDef_URL_Call) Return(_a0 string) *MockShutdownCallbackDef_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShutdownCallbackDef_URL_Call) RunAndReturn(run func() string) *MockShutdownCallbackDef_URL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShutdownCallbackDef creates a new instance of MockShutdownCallbackDef. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShutdownCallbackDef(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShutdownCallbackDef {
	mock := &MockShutdownCallbackDef{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
