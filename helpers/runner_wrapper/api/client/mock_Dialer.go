// Code generated by mockery v2.53.3. DO NOT EDIT.

package client

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockDialer is an autogenerated mock type for the Dialer type
type MockDialer struct {
	mock.Mock
}

type MockDialer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDialer) EXPECT() *MockDialer_Expecter {
	return &MockDialer_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: network, address
func (_m *MockDialer) Execute(network string, address string) (net.Conn, error) {
	ret := _m.Called(network, address)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (net.Conn, error)); ok {
		return rf(network, address)
	}
	if rf, ok := ret.Get(0).(func(string, string) net.Conn); ok {
		r0 = rf(network, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(network, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDialer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDialer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - network string
//   - address string
func (_e *MockDialer_Expecter) Execute(network interface{}, address interface{}) *MockDialer_Execute_Call {
	return &MockDialer_Execute_Call{Call: _e.mock.On("Execute", network, address)}
}

func (_c *MockDialer_Execute_Call) Run(run func(network string, address string)) *MockDialer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDialer_Execute_Call) Return(_a0 net.Conn, _a1 error) *MockDialer_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDialer_Execute_Call) RunAndReturn(run func(string, string) (net.Conn, error)) *MockDialer_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDialer creates a new instance of MockDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDialer {
	mock := &MockDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
