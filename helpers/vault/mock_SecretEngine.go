// Code generated by mockery v2.53.3. DO NOT EDIT.

package vault

import mock "github.com/stretchr/testify/mock"

// MockSecretEngine is an autogenerated mock type for the SecretEngine type
type MockSecretEngine struct {
	mock.Mock
}

type MockSecretEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretEngine) EXPECT() *MockSecretEngine_Expecter {
	return &MockSecretEngine_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: path
func (_m *MockSecretEngine) Delete(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecretEngine_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSecretEngine_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
func (_e *MockSecretEngine_Expecter) Delete(path interface{}) *MockSecretEngine_Delete_Call {
	return &MockSecretEngine_Delete_Call{Call: _e.mock.On("Delete", path)}
}

func (_c *MockSecretEngine_Delete_Call) Run(run func(path string)) *MockSecretEngine_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecretEngine_Delete_Call) Return(_a0 error) *MockSecretEngine_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretEngine_Delete_Call) RunAndReturn(run func(string) error) *MockSecretEngine_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// EngineName provides a mock function with no fields
func (_m *MockSecretEngine) EngineName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EngineName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecretEngine_EngineName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EngineName'
type MockSecretEngine_EngineName_Call struct {
	*mock.Call
}

// EngineName is a helper method to define mock.On call
func (_e *MockSecretEngine_Expecter) EngineName() *MockSecretEngine_EngineName_Call {
	return &MockSecretEngine_EngineName_Call{Call: _e.mock.On("EngineName")}
}

func (_c *MockSecretEngine_EngineName_Call) Run(run func()) *MockSecretEngine_EngineName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretEngine_EngineName_Call) Return(_a0 string) *MockSecretEngine_EngineName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretEngine_EngineName_Call) RunAndReturn(run func() string) *MockSecretEngine_EngineName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: path
func (_m *MockSecretEngine) Get(path string) (map[string]interface{}, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretEngine_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSecretEngine_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - path string
func (_e *MockSecretEngine_Expecter) Get(path interface{}) *MockSecretEngine_Get_Call {
	return &MockSecretEngine_Get_Call{Call: _e.mock.On("Get", path)}
}

func (_c *MockSecretEngine_Get_Call) Run(run func(path string)) *MockSecretEngine_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecretEngine_Get_Call) Return(_a0 map[string]interface{}, _a1 error) *MockSecretEngine_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretEngine_Get_Call) RunAndReturn(run func(string) (map[string]interface{}, error)) *MockSecretEngine_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: path, data
func (_m *MockSecretEngine) Put(path string, data map[string]interface{}) error {
	ret := _m.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(path, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecretEngine_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockSecretEngine_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - path string
//   - data map[string]interface{}
func (_e *MockSecretEngine_Expecter) Put(path interface{}, data interface{}) *MockSecretEngine_Put_Call {
	return &MockSecretEngine_Put_Call{Call: _e.mock.On("Put", path, data)}
}

func (_c *MockSecretEngine_Put_Call) Run(run func(path string, data map[string]interface{})) *MockSecretEngine_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockSecretEngine_Put_Call) Return(_a0 error) *MockSecretEngine_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretEngine_Put_Call) RunAndReturn(run func(string, map[string]interface{}) error) *MockSecretEngine_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretEngine creates a new instance of MockSecretEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretEngine {
	mock := &MockSecretEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
