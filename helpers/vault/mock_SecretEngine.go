// Code generated by mockery v2.43.0. DO NOT EDIT.

package vault

import mock "github.com/stretchr/testify/mock"

// MockSecretEngine is an autogenerated mock type for the SecretEngine type
type MockSecretEngine struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path
func (_m *MockSecretEngine) Delete(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EngineName provides a mock function with given fields:
func (_m *MockSecretEngine) EngineName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EngineName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: path
func (_m *MockSecretEngine) Get(path string) (map[string]interface{}, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: path, data
func (_m *MockSecretEngine) Put(path string, data map[string]interface{}) error {
	ret := _m.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(path, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSecretEngine creates a new instance of MockSecretEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretEngine {
	mock := &MockSecretEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
