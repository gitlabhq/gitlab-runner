// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/gitlab-org/gitlab-runner/helpers/vault/auth_methods"
)

// NewMockAuth creates a new instance of MockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth {
	mock := &MockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

type MockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth) EXPECT() *MockAuth_Expecter {
	return &MockAuth_Expecter{mock: &_m.Mock}
}

// AuthData provides a mock function for the type MockAuth
func (_mock *MockAuth) AuthData() auth_methods.Data {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthData")
	}

	var r0 auth_methods.Data
	if returnFunc, ok := ret.Get(0).(func() auth_methods.Data); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth_methods.Data)
		}
	}
	return r0
}

// MockAuth_AuthData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthData'
type MockAuth_AuthData_Call struct {
	*mock.Call
}

// AuthData is a helper method to define mock.On call
func (_e *MockAuth_Expecter) AuthData() *MockAuth_AuthData_Call {
	return &MockAuth_AuthData_Call{Call: _e.mock.On("AuthData")}
}

func (_c *MockAuth_AuthData_Call) Run(run func()) *MockAuth_AuthData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuth_AuthData_Call) Return(data auth_methods.Data) *MockAuth_AuthData_Call {
	_c.Call.Return(data)
	return _c
}

func (_c *MockAuth_AuthData_Call) RunAndReturn(run func() auth_methods.Data) *MockAuth_AuthData_Call {
	_c.Call.Return(run)
	return _c
}

// AuthName provides a mock function for the type MockAuth
func (_mock *MockAuth) AuthName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuth_AuthName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthName'
type MockAuth_AuthName_Call struct {
	*mock.Call
}

// AuthName is a helper method to define mock.On call
func (_e *MockAuth_Expecter) AuthName() *MockAuth_AuthName_Call {
	return &MockAuth_AuthName_Call{Call: _e.mock.On("AuthName")}
}

func (_c *MockAuth_AuthName_Call) Run(run func()) *MockAuth_AuthName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuth_AuthName_Call) Return(s string) *MockAuth_AuthName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuth_AuthName_Call) RunAndReturn(run func() string) *MockAuth_AuthName_Call {
	_c.Call.Return(run)
	return _c
}

// AuthPath provides a mock function for the type MockAuth
func (_mock *MockAuth) AuthPath() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuth_AuthPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthPath'
type MockAuth_AuthPath_Call struct {
	*mock.Call
}

// AuthPath is a helper method to define mock.On call
func (_e *MockAuth_Expecter) AuthPath() *MockAuth_AuthPath_Call {
	return &MockAuth_AuthPath_Call{Call: _e.mock.On("AuthPath")}
}

func (_c *MockAuth_AuthPath_Call) Run(run func()) *MockAuth_AuthPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuth_AuthPath_Call) Return(s string) *MockAuth_AuthPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuth_AuthPath_Call) RunAndReturn(run func() string) *MockAuth_AuthPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

type MockEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngine) EXPECT() *MockEngine_Expecter {
	return &MockEngine_Expecter{mock: &_m.Mock}
}

// EngineName provides a mock function for the type MockEngine
func (_mock *MockEngine) EngineName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EngineName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEngine_EngineName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EngineName'
type MockEngine_EngineName_Call struct {
	*mock.Call
}

// EngineName is a helper method to define mock.On call
func (_e *MockEngine_Expecter) EngineName() *MockEngine_EngineName_Call {
	return &MockEngine_EngineName_Call{Call: _e.mock.On("EngineName")}
}

func (_c *MockEngine_EngineName_Call) Run(run func()) *MockEngine_EngineName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_EngineName_Call) Return(s string) *MockEngine_EngineName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEngine_EngineName_Call) RunAndReturn(run func() string) *MockEngine_EngineName_Call {
	_c.Call.Return(run)
	return _c
}

// EnginePath provides a mock function for the type MockEngine
func (_mock *MockEngine) EnginePath() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnginePath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEngine_EnginePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnginePath'
type MockEngine_EnginePath_Call struct {
	*mock.Call
}

// EnginePath is a helper method to define mock.On call
func (_e *MockEngine_Expecter) EnginePath() *MockEngine_EnginePath_Call {
	return &MockEngine_EnginePath_Call{Call: _e.mock.On("EnginePath")}
}

func (_c *MockEngine_EnginePath_Call) Run(run func()) *MockEngine_EnginePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_EnginePath_Call) Return(s string) *MockEngine_EnginePath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEngine_EnginePath_Call) RunAndReturn(run func() string) *MockEngine_EnginePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecret creates a new instance of MockSecret. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecret(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecret {
	mock := &MockSecret{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecret is an autogenerated mock type for the Secret type
type MockSecret struct {
	mock.Mock
}

type MockSecret_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecret) EXPECT() *MockSecret_Expecter {
	return &MockSecret_Expecter{mock: &_m.Mock}
}

// SecretField provides a mock function for the type MockSecret
func (_mock *MockSecret) SecretField() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretField")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSecret_SecretField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretField'
type MockSecret_SecretField_Call struct {
	*mock.Call
}

// SecretField is a helper method to define mock.On call
func (_e *MockSecret_Expecter) SecretField() *MockSecret_SecretField_Call {
	return &MockSecret_SecretField_Call{Call: _e.mock.On("SecretField")}
}

func (_c *MockSecret_SecretField_Call) Run(run func()) *MockSecret_SecretField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecret_SecretField_Call) Return(s string) *MockSecret_SecretField_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSecret_SecretField_Call) RunAndReturn(run func() string) *MockSecret_SecretField_Call {
	_c.Call.Return(run)
	return _c
}

// SecretPath provides a mock function for the type MockSecret
func (_mock *MockSecret) SecretPath() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSecret_SecretPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretPath'
type MockSecret_SecretPath_Call struct {
	*mock.Call
}

// SecretPath is a helper method to define mock.On call
func (_e *MockSecret_Expecter) SecretPath() *MockSecret_SecretPath_Call {
	return &MockSecret_SecretPath_Call{Call: _e.mock.On("SecretPath")}
}

func (_c *MockSecret_SecretPath_Call) Run(run func()) *MockSecret_SecretPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecret_SecretPath_Call) Return(s string) *MockSecret_SecretPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSecret_SecretPath_Call) RunAndReturn(run func() string) *MockSecret_SecretPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVault creates a new instance of MockVault. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVault(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVault {
	mock := &MockVault{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVault is an autogenerated mock type for the Vault type
type MockVault struct {
	mock.Mock
}

type MockVault_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVault) EXPECT() *MockVault_Expecter {
	return &MockVault_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockVault
func (_mock *MockVault) Delete(engineDetails Engine, secretDetails Secret) error {
	ret := _mock.Called(engineDetails, secretDetails)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Engine, Secret) error); ok {
		r0 = returnFunc(engineDetails, secretDetails)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVault_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVault_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - engineDetails Engine
//   - secretDetails Secret
func (_e *MockVault_Expecter) Delete(engineDetails interface{}, secretDetails interface{}) *MockVault_Delete_Call {
	return &MockVault_Delete_Call{Call: _e.mock.On("Delete", engineDetails, secretDetails)}
}

func (_c *MockVault_Delete_Call) Run(run func(engineDetails Engine, secretDetails Secret)) *MockVault_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Engine
		if args[0] != nil {
			arg0 = args[0].(Engine)
		}
		var arg1 Secret
		if args[1] != nil {
			arg1 = args[1].(Secret)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVault_Delete_Call) Return(err error) *MockVault_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVault_Delete_Call) RunAndReturn(run func(engineDetails Engine, secretDetails Secret) error) *MockVault_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetField provides a mock function for the type MockVault
func (_mock *MockVault) GetField(engineDetails Engine, secretDetails Secret) (interface{}, error) {
	ret := _mock.Called(engineDetails, secretDetails)

	if len(ret) == 0 {
		panic("no return value specified for GetField")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Engine, Secret) (interface{}, error)); ok {
		return returnFunc(engineDetails, secretDetails)
	}
	if returnFunc, ok := ret.Get(0).(func(Engine, Secret) interface{}); ok {
		r0 = returnFunc(engineDetails, secretDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(Engine, Secret) error); ok {
		r1 = returnFunc(engineDetails, secretDetails)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVault_GetField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetField'
type MockVault_GetField_Call struct {
	*mock.Call
}

// GetField is a helper method to define mock.On call
//   - engineDetails Engine
//   - secretDetails Secret
func (_e *MockVault_Expecter) GetField(engineDetails interface{}, secretDetails interface{}) *MockVault_GetField_Call {
	return &MockVault_GetField_Call{Call: _e.mock.On("GetField", engineDetails, secretDetails)}
}

func (_c *MockVault_GetField_Call) Run(run func(engineDetails Engine, secretDetails Secret)) *MockVault_GetField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Engine
		if args[0] != nil {
			arg0 = args[0].(Engine)
		}
		var arg1 Secret
		if args[1] != nil {
			arg1 = args[1].(Secret)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVault_GetField_Call) Return(ifaceVal interface{}, err error) *MockVault_GetField_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockVault_GetField_Call) RunAndReturn(run func(engineDetails Engine, secretDetails Secret) (interface{}, error)) *MockVault_GetField_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockVault
func (_mock *MockVault) Put(engineDetails Engine, secretDetails Secret, data map[string]interface{}) error {
	ret := _mock.Called(engineDetails, secretDetails, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Engine, Secret, map[string]interface{}) error); ok {
		r0 = returnFunc(engineDetails, secretDetails, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVault_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockVault_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - engineDetails Engine
//   - secretDetails Secret
//   - data map[string]interface{}
func (_e *MockVault_Expecter) Put(engineDetails interface{}, secretDetails interface{}, data interface{}) *MockVault_Put_Call {
	return &MockVault_Put_Call{Call: _e.mock.On("Put", engineDetails, secretDetails, data)}
}

func (_c *MockVault_Put_Call) Run(run func(engineDetails Engine, secretDetails Secret, data map[string]interface{})) *MockVault_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Engine
		if args[0] != nil {
			arg0 = args[0].(Engine)
		}
		var arg1 Secret
		if args[1] != nil {
			arg1 = args[1].(Secret)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVault_Put_Call) Return(err error) *MockVault_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVault_Put_Call) RunAndReturn(run func(engineDetails Engine, secretDetails Secret, data map[string]interface{}) error) *MockVault_Put_Call {
	_c.Call.Return(run)
	return _c
}
