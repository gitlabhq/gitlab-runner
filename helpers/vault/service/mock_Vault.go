// Code generated by mockery v2.43.0. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockVault is an autogenerated mock type for the Vault type
type MockVault struct {
	mock.Mock
}

// Delete provides a mock function with given fields: engineDetails, secretDetails
func (_m *MockVault) Delete(engineDetails Engine, secretDetails Secret) error {
	ret := _m.Called(engineDetails, secretDetails)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Engine, Secret) error); ok {
		r0 = rf(engineDetails, secretDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetField provides a mock function with given fields: engineDetails, secretDetails
func (_m *MockVault) GetField(engineDetails Engine, secretDetails Secret) (interface{}, error) {
	ret := _m.Called(engineDetails, secretDetails)

	if len(ret) == 0 {
		panic("no return value specified for GetField")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(Engine, Secret) (interface{}, error)); ok {
		return rf(engineDetails, secretDetails)
	}
	if rf, ok := ret.Get(0).(func(Engine, Secret) interface{}); ok {
		r0 = rf(engineDetails, secretDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(Engine, Secret) error); ok {
		r1 = rf(engineDetails, secretDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: engineDetails, secretDetails, data
func (_m *MockVault) Put(engineDetails Engine, secretDetails Secret, data map[string]interface{}) error {
	ret := _m.Called(engineDetails, secretDetails, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Engine, Secret, map[string]interface{}) error); ok {
		r0 = rf(engineDetails, secretDetails, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockVault creates a new instance of MockVault. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVault(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVault {
	mock := &MockVault{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
