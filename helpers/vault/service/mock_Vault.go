// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockVault is an autogenerated mock type for the Vault type
type MockVault struct {
	mock.Mock
}

type MockVault_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVault) EXPECT() *MockVault_Expecter {
	return &MockVault_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: engineDetails, secretDetails
func (_m *MockVault) Delete(engineDetails Engine, secretDetails Secret) error {
	ret := _m.Called(engineDetails, secretDetails)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Engine, Secret) error); ok {
		r0 = rf(engineDetails, secretDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVault_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVault_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - engineDetails Engine
//   - secretDetails Secret
func (_e *MockVault_Expecter) Delete(engineDetails interface{}, secretDetails interface{}) *MockVault_Delete_Call {
	return &MockVault_Delete_Call{Call: _e.mock.On("Delete", engineDetails, secretDetails)}
}

func (_c *MockVault_Delete_Call) Run(run func(engineDetails Engine, secretDetails Secret)) *MockVault_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Engine), args[1].(Secret))
	})
	return _c
}

func (_c *MockVault_Delete_Call) Return(_a0 error) *MockVault_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVault_Delete_Call) RunAndReturn(run func(Engine, Secret) error) *MockVault_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetField provides a mock function with given fields: engineDetails, secretDetails
func (_m *MockVault) GetField(engineDetails Engine, secretDetails Secret) (interface{}, error) {
	ret := _m.Called(engineDetails, secretDetails)

	if len(ret) == 0 {
		panic("no return value specified for GetField")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(Engine, Secret) (interface{}, error)); ok {
		return rf(engineDetails, secretDetails)
	}
	if rf, ok := ret.Get(0).(func(Engine, Secret) interface{}); ok {
		r0 = rf(engineDetails, secretDetails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(Engine, Secret) error); ok {
		r1 = rf(engineDetails, secretDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVault_GetField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetField'
type MockVault_GetField_Call struct {
	*mock.Call
}

// GetField is a helper method to define mock.On call
//   - engineDetails Engine
//   - secretDetails Secret
func (_e *MockVault_Expecter) GetField(engineDetails interface{}, secretDetails interface{}) *MockVault_GetField_Call {
	return &MockVault_GetField_Call{Call: _e.mock.On("GetField", engineDetails, secretDetails)}
}

func (_c *MockVault_GetField_Call) Run(run func(engineDetails Engine, secretDetails Secret)) *MockVault_GetField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Engine), args[1].(Secret))
	})
	return _c
}

func (_c *MockVault_GetField_Call) Return(_a0 interface{}, _a1 error) *MockVault_GetField_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVault_GetField_Call) RunAndReturn(run func(Engine, Secret) (interface{}, error)) *MockVault_GetField_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: engineDetails, secretDetails, data
func (_m *MockVault) Put(engineDetails Engine, secretDetails Secret, data map[string]interface{}) error {
	ret := _m.Called(engineDetails, secretDetails, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Engine, Secret, map[string]interface{}) error); ok {
		r0 = rf(engineDetails, secretDetails, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVault_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockVault_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - engineDetails Engine
//   - secretDetails Secret
//   - data map[string]interface{}
func (_e *MockVault_Expecter) Put(engineDetails interface{}, secretDetails interface{}, data interface{}) *MockVault_Put_Call {
	return &MockVault_Put_Call{Call: _e.mock.On("Put", engineDetails, secretDetails, data)}
}

func (_c *MockVault_Put_Call) Run(run func(engineDetails Engine, secretDetails Secret, data map[string]interface{})) *MockVault_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Engine), args[1].(Secret), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockVault_Put_Call) Return(_a0 error) *MockVault_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVault_Put_Call) RunAndReturn(run func(Engine, Secret, map[string]interface{}) error) *MockVault_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVault creates a new instance of MockVault. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVault(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVault {
	mock := &MockVault{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
