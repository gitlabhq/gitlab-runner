// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

type MockEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEngine) EXPECT() *MockEngine_Expecter {
	return &MockEngine_Expecter{mock: &_m.Mock}
}

// EngineName provides a mock function with no fields
func (_m *MockEngine) EngineName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EngineName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEngine_EngineName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EngineName'
type MockEngine_EngineName_Call struct {
	*mock.Call
}

// EngineName is a helper method to define mock.On call
func (_e *MockEngine_Expecter) EngineName() *MockEngine_EngineName_Call {
	return &MockEngine_EngineName_Call{Call: _e.mock.On("EngineName")}
}

func (_c *MockEngine_EngineName_Call) Run(run func()) *MockEngine_EngineName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_EngineName_Call) Return(_a0 string) *MockEngine_EngineName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_EngineName_Call) RunAndReturn(run func() string) *MockEngine_EngineName_Call {
	_c.Call.Return(run)
	return _c
}

// EnginePath provides a mock function with no fields
func (_m *MockEngine) EnginePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnginePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEngine_EnginePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnginePath'
type MockEngine_EnginePath_Call struct {
	*mock.Call
}

// EnginePath is a helper method to define mock.On call
func (_e *MockEngine_Expecter) EnginePath() *MockEngine_EnginePath_Call {
	return &MockEngine_EnginePath_Call{Call: _e.mock.On("EnginePath")}
}

func (_c *MockEngine_EnginePath_Call) Run(run func()) *MockEngine_EnginePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEngine_EnginePath_Call) Return(_a0 string) *MockEngine_EnginePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEngine_EnginePath_Call) RunAndReturn(run func() string) *MockEngine_EnginePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEngine creates a new instance of MockEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEngine {
	mock := &MockEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
