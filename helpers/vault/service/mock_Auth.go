// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"
	auth_methods "gitlab.com/gitlab-org/gitlab-runner/helpers/vault/auth_methods"
)

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

type MockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth) EXPECT() *MockAuth_Expecter {
	return &MockAuth_Expecter{mock: &_m.Mock}
}

// AuthData provides a mock function with no fields
func (_m *MockAuth) AuthData() auth_methods.Data {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthData")
	}

	var r0 auth_methods.Data
	if rf, ok := ret.Get(0).(func() auth_methods.Data); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth_methods.Data)
		}
	}

	return r0
}

// MockAuth_AuthData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthData'
type MockAuth_AuthData_Call struct {
	*mock.Call
}

// AuthData is a helper method to define mock.On call
func (_e *MockAuth_Expecter) AuthData() *MockAuth_AuthData_Call {
	return &MockAuth_AuthData_Call{Call: _e.mock.On("AuthData")}
}

func (_c *MockAuth_AuthData_Call) Run(run func()) *MockAuth_AuthData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuth_AuthData_Call) Return(_a0 auth_methods.Data) *MockAuth_AuthData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuth_AuthData_Call) RunAndReturn(run func() auth_methods.Data) *MockAuth_AuthData_Call {
	_c.Call.Return(run)
	return _c
}

// AuthName provides a mock function with no fields
func (_m *MockAuth) AuthName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAuth_AuthName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthName'
type MockAuth_AuthName_Call struct {
	*mock.Call
}

// AuthName is a helper method to define mock.On call
func (_e *MockAuth_Expecter) AuthName() *MockAuth_AuthName_Call {
	return &MockAuth_AuthName_Call{Call: _e.mock.On("AuthName")}
}

func (_c *MockAuth_AuthName_Call) Run(run func()) *MockAuth_AuthName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuth_AuthName_Call) Return(_a0 string) *MockAuth_AuthName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuth_AuthName_Call) RunAndReturn(run func() string) *MockAuth_AuthName_Call {
	_c.Call.Return(run)
	return _c
}

// AuthPath provides a mock function with no fields
func (_m *MockAuth) AuthPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAuth_AuthPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthPath'
type MockAuth_AuthPath_Call struct {
	*mock.Call
}

// AuthPath is a helper method to define mock.On call
func (_e *MockAuth_Expecter) AuthPath() *MockAuth_AuthPath_Call {
	return &MockAuth_AuthPath_Call{Call: _e.mock.On("AuthPath")}
}

func (_c *MockAuth_AuthPath_Call) Run(run func()) *MockAuth_AuthPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuth_AuthPath_Call) Return(_a0 string) *MockAuth_AuthPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuth_AuthPath_Call) RunAndReturn(run func() string) *MockAuth_AuthPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuth creates a new instance of MockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth {
	mock := &MockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
