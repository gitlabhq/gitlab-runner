// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package vault

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthMethod creates a new instance of MockAuthMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthMethod {
	mock := &MockAuthMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthMethod is an autogenerated mock type for the AuthMethod type
type MockAuthMethod struct {
	mock.Mock
}

type MockAuthMethod_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthMethod) EXPECT() *MockAuthMethod_Expecter {
	return &MockAuthMethod_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthMethod
func (_mock *MockAuthMethod) Authenticate(client Client) error {
	ret := _mock.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(Client) error); ok {
		r0 = returnFunc(client)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthMethod_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthMethod_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - client Client
func (_e *MockAuthMethod_Expecter) Authenticate(client interface{}) *MockAuthMethod_Authenticate_Call {
	return &MockAuthMethod_Authenticate_Call{Call: _e.mock.On("Authenticate", client)}
}

func (_c *MockAuthMethod_Authenticate_Call) Run(run func(client Client)) *MockAuthMethod_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Client
		if args[0] != nil {
			arg0 = args[0].(Client)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthMethod_Authenticate_Call) Return(err error) *MockAuthMethod_Authenticate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthMethod_Authenticate_Call) RunAndReturn(run func(client Client) error) *MockAuthMethod_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockAuthMethod
func (_mock *MockAuthMethod) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuthMethod_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockAuthMethod_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockAuthMethod_Expecter) Name() *MockAuthMethod_Name_Call {
	return &MockAuthMethod_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockAuthMethod_Name_Call) Run(run func()) *MockAuthMethod_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthMethod_Name_Call) Return(s string) *MockAuthMethod_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuthMethod_Name_Call) RunAndReturn(run func() string) *MockAuthMethod_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function for the type MockAuthMethod
func (_mock *MockAuthMethod) Token() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuthMethod_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockAuthMethod_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
func (_e *MockAuthMethod_Expecter) Token() *MockAuthMethod_Token_Call {
	return &MockAuthMethod_Token_Call{Call: _e.mock.On("Token")}
}

func (_c *MockAuthMethod_Token_Call) Run(run func()) *MockAuthMethod_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthMethod_Token_Call) Return(s string) *MockAuthMethod_Token_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuthMethod_Token_Call) RunAndReturn(run func() string) *MockAuthMethod_Token_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockClient
func (_mock *MockClient) Authenticate(auth AuthMethod) error {
	ret := _mock.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(AuthMethod) error); ok {
		r0 = returnFunc(auth)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockClient_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - auth AuthMethod
func (_e *MockClient_Expecter) Authenticate(auth interface{}) *MockClient_Authenticate_Call {
	return &MockClient_Authenticate_Call{Call: _e.mock.On("Authenticate", auth)}
}

func (_c *MockClient_Authenticate_Call) Run(run func(auth AuthMethod)) *MockClient_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 AuthMethod
		if args[0] != nil {
			arg0 = args[0].(AuthMethod)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Authenticate_Call) Return(err error) *MockClient_Authenticate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Authenticate_Call) RunAndReturn(run func(auth AuthMethod) error) *MockClient_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockClient
func (_mock *MockClient) Delete(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
func (_e *MockClient_Expecter) Delete(path interface{}) *MockClient_Delete_Call {
	return &MockClient_Delete_Call{Call: _e.mock.On("Delete", path)}
}

func (_c *MockClient_Delete_Call) Run(run func(path string)) *MockClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Delete_Call) Return(err error) *MockClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Delete_Call) RunAndReturn(run func(path string) error) *MockClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockClient
func (_mock *MockClient) Read(path string) (Result, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (Result, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) Result); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - path string
func (_e *MockClient_Expecter) Read(path interface{}) *MockClient_Read_Call {
	return &MockClient_Read_Call{Call: _e.mock.On("Read", path)}
}

func (_c *MockClient_Read_Call) Run(run func(path string)) *MockClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Read_Call) Return(result Result, err error) *MockClient_Read_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockClient_Read_Call) RunAndReturn(run func(path string) (Result, error)) *MockClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockClient
func (_mock *MockClient) Write(path string, data map[string]interface{}) (Result, error) {
	ret := _mock.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]interface{}) (Result, error)); ok {
		return returnFunc(path, data)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]interface{}) Result); ok {
		r0 = returnFunc(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = returnFunc(path, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - path string
//   - data map[string]interface{}
func (_e *MockClient_Expecter) Write(path interface{}, data interface{}) *MockClient_Write_Call {
	return &MockClient_Write_Call{Call: _e.mock.On("Write", path, data)}
}

func (_c *MockClient_Write_Call) Run(run func(path string, data map[string]interface{})) *MockClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]interface{}
		if args[1] != nil {
			arg1 = args[1].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Write_Call) Return(result Result, err error) *MockClient_Write_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockClient_Write_Call) RunAndReturn(run func(path string, data map[string]interface{}) (Result, error)) *MockClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResult creates a new instance of MockResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResult {
	mock := &MockResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResult is an autogenerated mock type for the Result type
type MockResult struct {
	mock.Mock
}

type MockResult_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResult) EXPECT() *MockResult_Expecter {
	return &MockResult_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type MockResult
func (_mock *MockResult) Data() map[string]interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 map[string]interface{}
	if returnFunc, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	return r0
}

// MockResult_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockResult_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockResult_Expecter) Data() *MockResult_Data_Call {
	return &MockResult_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MockResult_Data_Call) Run(run func()) *MockResult_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResult_Data_Call) Return(stringToIfaceVal map[string]interface{}) *MockResult_Data_Call {
	_c.Call.Return(stringToIfaceVal)
	return _c
}

func (_c *MockResult_Data_Call) RunAndReturn(run func() map[string]interface{}) *MockResult_Data_Call {
	_c.Call.Return(run)
	return _c
}

// TokenID provides a mock function for the type MockResult
func (_mock *MockResult) TokenID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockResult_TokenID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenID'
type MockResult_TokenID_Call struct {
	*mock.Call
}

// TokenID is a helper method to define mock.On call
func (_e *MockResult_Expecter) TokenID() *MockResult_TokenID_Call {
	return &MockResult_TokenID_Call{Call: _e.mock.On("TokenID")}
}

func (_c *MockResult_TokenID_Call) Run(run func()) *MockResult_TokenID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResult_TokenID_Call) Return(s string, err error) *MockResult_TokenID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockResult_TokenID_Call) RunAndReturn(run func() (string, error)) *MockResult_TokenID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretEngine creates a new instance of MockSecretEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretEngine {
	mock := &MockSecretEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecretEngine is an autogenerated mock type for the SecretEngine type
type MockSecretEngine struct {
	mock.Mock
}

type MockSecretEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretEngine) EXPECT() *MockSecretEngine_Expecter {
	return &MockSecretEngine_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockSecretEngine
func (_mock *MockSecretEngine) Delete(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretEngine_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSecretEngine_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
func (_e *MockSecretEngine_Expecter) Delete(path interface{}) *MockSecretEngine_Delete_Call {
	return &MockSecretEngine_Delete_Call{Call: _e.mock.On("Delete", path)}
}

func (_c *MockSecretEngine_Delete_Call) Run(run func(path string)) *MockSecretEngine_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecretEngine_Delete_Call) Return(err error) *MockSecretEngine_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretEngine_Delete_Call) RunAndReturn(run func(path string) error) *MockSecretEngine_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// EngineName provides a mock function for the type MockSecretEngine
func (_mock *MockSecretEngine) EngineName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EngineName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSecretEngine_EngineName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EngineName'
type MockSecretEngine_EngineName_Call struct {
	*mock.Call
}

// EngineName is a helper method to define mock.On call
func (_e *MockSecretEngine_Expecter) EngineName() *MockSecretEngine_EngineName_Call {
	return &MockSecretEngine_EngineName_Call{Call: _e.mock.On("EngineName")}
}

func (_c *MockSecretEngine_EngineName_Call) Run(run func()) *MockSecretEngine_EngineName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretEngine_EngineName_Call) Return(s string) *MockSecretEngine_EngineName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSecretEngine_EngineName_Call) RunAndReturn(run func() string) *MockSecretEngine_EngineName_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSecretEngine
func (_mock *MockSecretEngine) Get(path string) (map[string]interface{}, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretEngine_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSecretEngine_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - path string
func (_e *MockSecretEngine_Expecter) Get(path interface{}) *MockSecretEngine_Get_Call {
	return &MockSecretEngine_Get_Call{Call: _e.mock.On("Get", path)}
}

func (_c *MockSecretEngine_Get_Call) Run(run func(path string)) *MockSecretEngine_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecretEngine_Get_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockSecretEngine_Get_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockSecretEngine_Get_Call) RunAndReturn(run func(path string) (map[string]interface{}, error)) *MockSecretEngine_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockSecretEngine
func (_mock *MockSecretEngine) Put(path string, data map[string]interface{}) error {
	ret := _mock.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = returnFunc(path, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretEngine_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockSecretEngine_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - path string
//   - data map[string]interface{}
func (_e *MockSecretEngine_Expecter) Put(path interface{}, data interface{}) *MockSecretEngine_Put_Call {
	return &MockSecretEngine_Put_Call{Call: _e.mock.On("Put", path, data)}
}

func (_c *MockSecretEngine_Put_Call) Run(run func(path string, data map[string]interface{})) *MockSecretEngine_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]interface{}
		if args[1] != nil {
			arg1 = args[1].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecretEngine_Put_Call) Return(err error) *MockSecretEngine_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretEngine_Put_Call) RunAndReturn(run func(path string, data map[string]interface{}) error) *MockSecretEngine_Put_Call {
	_c.Call.Return(run)
	return _c
}
