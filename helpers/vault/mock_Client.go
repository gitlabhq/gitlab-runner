// Code generated by mockery v2.43.0. DO NOT EDIT.

package vault

import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: auth
func (_m *MockClient) Authenticate(auth AuthMethod) error {
	ret := _m.Called(auth)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(AuthMethod) error); ok {
		r0 = rf(auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: path
func (_m *MockClient) Delete(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: path
func (_m *MockClient) Read(path string) (Result, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Result, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) Result); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: path, data
func (_m *MockClient) Write(path string, data map[string]interface{}) (Result, error) {
	ret := _m.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (Result, error)); ok {
		return rf(path, data)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) Result); ok {
		r0 = rf(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
