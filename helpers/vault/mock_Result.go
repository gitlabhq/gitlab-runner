// Code generated by mockery v2.43.0. DO NOT EDIT.

package vault

import mock "github.com/stretchr/testify/mock"

// MockResult is an autogenerated mock type for the Result type
type MockResult struct {
	mock.Mock
}

// Data provides a mock function with given fields:
func (_m *MockResult) Data() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// TokenID provides a mock function with given fields:
func (_m *MockResult) TokenID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockResult creates a new instance of MockResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResult {
	mock := &MockResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
