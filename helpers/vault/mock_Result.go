// Code generated by mockery v2.53.3. DO NOT EDIT.

package vault

import mock "github.com/stretchr/testify/mock"

// MockResult is an autogenerated mock type for the Result type
type MockResult struct {
	mock.Mock
}

type MockResult_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResult) EXPECT() *MockResult_Expecter {
	return &MockResult_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with no fields
func (_m *MockResult) Data() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockResult_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockResult_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockResult_Expecter) Data() *MockResult_Data_Call {
	return &MockResult_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MockResult_Data_Call) Run(run func()) *MockResult_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResult_Data_Call) Return(_a0 map[string]interface{}) *MockResult_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResult_Data_Call) RunAndReturn(run func() map[string]interface{}) *MockResult_Data_Call {
	_c.Call.Return(run)
	return _c
}

// TokenID provides a mock function with no fields
func (_m *MockResult) TokenID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResult_TokenID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenID'
type MockResult_TokenID_Call struct {
	*mock.Call
}

// TokenID is a helper method to define mock.On call
func (_e *MockResult_Expecter) TokenID() *MockResult_TokenID_Call {
	return &MockResult_TokenID_Call{Call: _e.mock.On("TokenID")}
}

func (_c *MockResult_TokenID_Call) Run(run func()) *MockResult_TokenID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResult_TokenID_Call) Return(_a0 string, _a1 error) *MockResult_TokenID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResult_TokenID_Call) RunAndReturn(run func() (string, error)) *MockResult_TokenID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResult creates a new instance of MockResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResult {
	mock := &MockResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
