// Code generated by mockery v2.53.3. DO NOT EDIT.

package vault

import (
	api "github.com/hashicorp/vault/api"
	mock "github.com/stretchr/testify/mock"
)

// mockApiClientLogical is an autogenerated mock type for the apiClientLogical type
type mockApiClientLogical struct {
	mock.Mock
}

type mockApiClientLogical_Expecter struct {
	mock *mock.Mock
}

func (_m *mockApiClientLogical) EXPECT() *mockApiClientLogical_Expecter {
	return &mockApiClientLogical_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: path
func (_m *mockApiClientLogical) Delete(path string) (*api.Secret, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *api.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Secret, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Secret); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockApiClientLogical_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockApiClientLogical_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - path string
func (_e *mockApiClientLogical_Expecter) Delete(path interface{}) *mockApiClientLogical_Delete_Call {
	return &mockApiClientLogical_Delete_Call{Call: _e.mock.On("Delete", path)}
}

func (_c *mockApiClientLogical_Delete_Call) Run(run func(path string)) *mockApiClientLogical_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockApiClientLogical_Delete_Call) Return(_a0 *api.Secret, _a1 error) *mockApiClientLogical_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockApiClientLogical_Delete_Call) RunAndReturn(run func(string) (*api.Secret, error)) *mockApiClientLogical_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: path
func (_m *mockApiClientLogical) Read(path string) (*api.Secret, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *api.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.Secret, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Secret); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockApiClientLogical_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type mockApiClientLogical_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - path string
func (_e *mockApiClientLogical_Expecter) Read(path interface{}) *mockApiClientLogical_Read_Call {
	return &mockApiClientLogical_Read_Call{Call: _e.mock.On("Read", path)}
}

func (_c *mockApiClientLogical_Read_Call) Run(run func(path string)) *mockApiClientLogical_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockApiClientLogical_Read_Call) Return(_a0 *api.Secret, _a1 error) *mockApiClientLogical_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockApiClientLogical_Read_Call) RunAndReturn(run func(string) (*api.Secret, error)) *mockApiClientLogical_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: path, data
func (_m *mockApiClientLogical) Write(path string, data map[string]interface{}) (*api.Secret, error) {
	ret := _m.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *api.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) (*api.Secret, error)); ok {
		return rf(path, data)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) *api.Secret); ok {
		r0 = rf(path, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(path, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockApiClientLogical_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mockApiClientLogical_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - path string
//   - data map[string]interface{}
func (_e *mockApiClientLogical_Expecter) Write(path interface{}, data interface{}) *mockApiClientLogical_Write_Call {
	return &mockApiClientLogical_Write_Call{Call: _e.mock.On("Write", path, data)}
}

func (_c *mockApiClientLogical_Write_Call) Run(run func(path string, data map[string]interface{})) *mockApiClientLogical_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *mockApiClientLogical_Write_Call) Return(_a0 *api.Secret, _a1 error) *mockApiClientLogical_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockApiClientLogical_Write_Call) RunAndReturn(run func(string, map[string]interface{}) (*api.Secret, error)) *mockApiClientLogical_Write_Call {
	_c.Call.Return(run)
	return _c
}

// newMockApiClientLogical creates a new instance of mockApiClientLogical. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockApiClientLogical(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockApiClientLogical {
	mock := &mockApiClientLogical{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
