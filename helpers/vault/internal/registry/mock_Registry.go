// Code generated by mockery v2.53.3. DO NOT EDIT.

package registry

import mock "github.com/stretchr/testify/mock"

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: factoryName
func (_m *MockRegistry) Get(factoryName string) (interface{}, error) {
	ret := _m.Called(factoryName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(factoryName)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(factoryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(factoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRegistry_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - factoryName string
func (_e *MockRegistry_Expecter) Get(factoryName interface{}) *MockRegistry_Get_Call {
	return &MockRegistry_Get_Call{Call: _e.mock.On("Get", factoryName)}
}

func (_c *MockRegistry_Get_Call) Run(run func(factoryName string)) *MockRegistry_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_Get_Call) Return(_a0 interface{}, _a1 error) *MockRegistry_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegistry_Get_Call) RunAndReturn(run func(string) (interface{}, error)) *MockRegistry_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: factoryName, factory
func (_m *MockRegistry) Register(factoryName string, factory interface{}) error {
	ret := _m.Called(factoryName, factory)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(factoryName, factory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - factoryName string
//   - factory interface{}
func (_e *MockRegistry_Expecter) Register(factoryName interface{}, factory interface{}) *MockRegistry_Register_Call {
	return &MockRegistry_Register_Call{Call: _e.mock.On("Register", factoryName, factory)}
}

func (_c *MockRegistry_Register_Call) Run(run func(factoryName string, factory interface{})) *MockRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockRegistry_Register_Call) Return(_a0 error) *MockRegistry_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_Register_Call) RunAndReturn(run func(string, interface{}) error) *MockRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
