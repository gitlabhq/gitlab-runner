// Code generated by mockery v2.53.3. DO NOT EDIT.

package vault

import mock "github.com/stretchr/testify/mock"

// mockApiClient is an autogenerated mock type for the apiClient type
type mockApiClient struct {
	mock.Mock
}

type mockApiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockApiClient) EXPECT() *mockApiClient_Expecter {
	return &mockApiClient_Expecter{mock: &_m.Mock}
}

// Logical provides a mock function with no fields
func (_m *mockApiClient) Logical() apiClientLogical {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logical")
	}

	var r0 apiClientLogical
	if rf, ok := ret.Get(0).(func() apiClientLogical); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiClientLogical)
		}
	}

	return r0
}

// mockApiClient_Logical_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logical'
type mockApiClient_Logical_Call struct {
	*mock.Call
}

// Logical is a helper method to define mock.On call
func (_e *mockApiClient_Expecter) Logical() *mockApiClient_Logical_Call {
	return &mockApiClient_Logical_Call{Call: _e.mock.On("Logical")}
}

func (_c *mockApiClient_Logical_Call) Run(run func()) *mockApiClient_Logical_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockApiClient_Logical_Call) Return(_a0 apiClientLogical) *mockApiClient_Logical_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockApiClient_Logical_Call) RunAndReturn(run func() apiClientLogical) *mockApiClient_Logical_Call {
	_c.Call.Return(run)
	return _c
}

// SetNamespace provides a mock function with given fields: ns
func (_m *mockApiClient) SetNamespace(ns string) {
	_m.Called(ns)
}

// mockApiClient_SetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNamespace'
type mockApiClient_SetNamespace_Call struct {
	*mock.Call
}

// SetNamespace is a helper method to define mock.On call
//   - ns string
func (_e *mockApiClient_Expecter) SetNamespace(ns interface{}) *mockApiClient_SetNamespace_Call {
	return &mockApiClient_SetNamespace_Call{Call: _e.mock.On("SetNamespace", ns)}
}

func (_c *mockApiClient_SetNamespace_Call) Run(run func(ns string)) *mockApiClient_SetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockApiClient_SetNamespace_Call) Return() *mockApiClient_SetNamespace_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockApiClient_SetNamespace_Call) RunAndReturn(run func(string)) *mockApiClient_SetNamespace_Call {
	_c.Run(run)
	return _c
}

// SetToken provides a mock function with given fields: v
func (_m *mockApiClient) SetToken(v string) {
	_m.Called(v)
}

// mockApiClient_SetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToken'
type mockApiClient_SetToken_Call struct {
	*mock.Call
}

// SetToken is a helper method to define mock.On call
//   - v string
func (_e *mockApiClient_Expecter) SetToken(v interface{}) *mockApiClient_SetToken_Call {
	return &mockApiClient_SetToken_Call{Call: _e.mock.On("SetToken", v)}
}

func (_c *mockApiClient_SetToken_Call) Run(run func(v string)) *mockApiClient_SetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockApiClient_SetToken_Call) Return() *mockApiClient_SetToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockApiClient_SetToken_Call) RunAndReturn(run func(string)) *mockApiClient_SetToken_Call {
	_c.Run(run)
	return _c
}

// Sys provides a mock function with no fields
func (_m *mockApiClient) Sys() apiClientSys {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sys")
	}

	var r0 apiClientSys
	if rf, ok := ret.Get(0).(func() apiClientSys); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiClientSys)
		}
	}

	return r0
}

// mockApiClient_Sys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sys'
type mockApiClient_Sys_Call struct {
	*mock.Call
}

// Sys is a helper method to define mock.On call
func (_e *mockApiClient_Expecter) Sys() *mockApiClient_Sys_Call {
	return &mockApiClient_Sys_Call{Call: _e.mock.On("Sys")}
}

func (_c *mockApiClient_Sys_Call) Run(run func()) *mockApiClient_Sys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockApiClient_Sys_Call) Return(_a0 apiClientSys) *mockApiClient_Sys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockApiClient_Sys_Call) RunAndReturn(run func() apiClientSys) *mockApiClient_Sys_Call {
	_c.Call.Return(run)
	return _c
}

// newMockApiClient creates a new instance of mockApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockApiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockApiClient {
	mock := &mockApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
