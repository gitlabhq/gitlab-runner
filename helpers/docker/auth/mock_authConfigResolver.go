// Code generated by mockery v2.53.3. DO NOT EDIT.

package auth

import (
	types "github.com/docker/cli/cli/config/types"
	mock "github.com/stretchr/testify/mock"
)

// mockAuthConfigResolver is an autogenerated mock type for the authConfigResolver type
type mockAuthConfigResolver struct {
	mock.Mock
}

type mockAuthConfigResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAuthConfigResolver) EXPECT() *mockAuthConfigResolver_Expecter {
	return &mockAuthConfigResolver_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *mockAuthConfigResolver) Execute() (string, map[string]types.AuthConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 map[string]types.AuthConfig
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, map[string]types.AuthConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() map[string]types.AuthConfig); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]types.AuthConfig)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockAuthConfigResolver_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockAuthConfigResolver_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *mockAuthConfigResolver_Expecter) Execute() *mockAuthConfigResolver_Execute_Call {
	return &mockAuthConfigResolver_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *mockAuthConfigResolver_Execute_Call) Run(run func()) *mockAuthConfigResolver_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockAuthConfigResolver_Execute_Call) Return(_a0 string, _a1 map[string]types.AuthConfig, _a2 error) *mockAuthConfigResolver_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockAuthConfigResolver_Execute_Call) RunAndReturn(run func() (string, map[string]types.AuthConfig, error)) *mockAuthConfigResolver_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAuthConfigResolver creates a new instance of mockAuthConfigResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthConfigResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthConfigResolver {
	mock := &mockAuthConfigResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
