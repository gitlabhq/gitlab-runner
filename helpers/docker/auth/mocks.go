// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDebugLogger creates a new instance of MockDebugLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDebugLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDebugLogger {
	mock := &MockDebugLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDebugLogger is an autogenerated mock type for the DebugLogger type
type MockDebugLogger struct {
	mock.Mock
}

type MockDebugLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDebugLogger) EXPECT() *MockDebugLogger_Expecter {
	return &MockDebugLogger_Expecter{mock: &_m.Mock}
}

// Debugln provides a mock function for the type MockDebugLogger
func (_mock *MockDebugLogger) Debugln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// MockDebugLogger_Debugln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugln'
type MockDebugLogger_Debugln_Call struct {
	*mock.Call
}

// Debugln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockDebugLogger_Expecter) Debugln(args ...interface{}) *MockDebugLogger_Debugln_Call {
	return &MockDebugLogger_Debugln_Call{Call: _e.mock.On("Debugln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockDebugLogger_Debugln_Call) Run(run func(args ...interface{})) *MockDebugLogger_Debugln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockDebugLogger_Debugln_Call) Return() *MockDebugLogger_Debugln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDebugLogger_Debugln_Call) RunAndReturn(run func(args ...interface{})) *MockDebugLogger_Debugln_Call {
	_c.Run(run)
	return _c
}
