// Code generated by mockery v2.43.0. DO NOT EDIT.

package docker

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMachine is an autogenerated mock type for the Machine type
type MockMachine struct {
	mock.Mock
}

// CanConnect provides a mock function with given fields: name, skipCache
func (_m *MockMachine) CanConnect(name string, skipCache bool) bool {
	ret := _m.Called(name, skipCache)

	if len(ret) == 0 {
		panic("no return value specified for CanConnect")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = rf(name, skipCache)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Create provides a mock function with given fields: driver, name, opts
func (_m *MockMachine) Create(driver string, name string, opts ...string) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, driver, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...string) error); ok {
		r0 = rf(driver, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Credentials provides a mock function with given fields: name
func (_m *MockMachine) Credentials(name string) (Credentials, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Credentials")
	}

	var r0 Credentials
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Credentials, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) Credentials); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(Credentials)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exist provides a mock function with given fields: name
func (_m *MockMachine) Exist(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *MockMachine) List() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provision provides a mock function with given fields: name
func (_m *MockMachine) Provision(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Provision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: name
func (_m *MockMachine) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: name, timeout
func (_m *MockMachine) Stop(name string, timeout time.Duration) error {
	ret := _m.Called(name, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(name, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockMachine creates a new instance of MockMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMachine {
	mock := &MockMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
