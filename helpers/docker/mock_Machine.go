// Code generated by mockery v2.53.3. DO NOT EDIT.

package docker

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockMachine is an autogenerated mock type for the Machine type
type MockMachine struct {
	mock.Mock
}

type MockMachine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMachine) EXPECT() *MockMachine_Expecter {
	return &MockMachine_Expecter{mock: &_m.Mock}
}

// CanConnect provides a mock function with given fields: name, skipCache
func (_m *MockMachine) CanConnect(name string, skipCache bool) bool {
	ret := _m.Called(name, skipCache)

	if len(ret) == 0 {
		panic("no return value specified for CanConnect")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, bool) bool); ok {
		r0 = rf(name, skipCache)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMachine_CanConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanConnect'
type MockMachine_CanConnect_Call struct {
	*mock.Call
}

// CanConnect is a helper method to define mock.On call
//   - name string
//   - skipCache bool
func (_e *MockMachine_Expecter) CanConnect(name interface{}, skipCache interface{}) *MockMachine_CanConnect_Call {
	return &MockMachine_CanConnect_Call{Call: _e.mock.On("CanConnect", name, skipCache)}
}

func (_c *MockMachine_CanConnect_Call) Run(run func(name string, skipCache bool)) *MockMachine_CanConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockMachine_CanConnect_Call) Return(_a0 bool) *MockMachine_CanConnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachine_CanConnect_Call) RunAndReturn(run func(string, bool) bool) *MockMachine_CanConnect_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: driver, name, opts
func (_m *MockMachine) Create(driver string, name string, opts ...string) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, driver, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...string) error); ok {
		r0 = rf(driver, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachine_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMachine_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - driver string
//   - name string
//   - opts ...string
func (_e *MockMachine_Expecter) Create(driver interface{}, name interface{}, opts ...interface{}) *MockMachine_Create_Call {
	return &MockMachine_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{driver, name}, opts...)...)}
}

func (_c *MockMachine_Create_Call) Run(run func(driver string, name string, opts ...string)) *MockMachine_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockMachine_Create_Call) Return(_a0 error) *MockMachine_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachine_Create_Call) RunAndReturn(run func(string, string, ...string) error) *MockMachine_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Credentials provides a mock function with given fields: name
func (_m *MockMachine) Credentials(name string) (Credentials, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Credentials")
	}

	var r0 Credentials
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Credentials, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) Credentials); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(Credentials)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMachine_Credentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Credentials'
type MockMachine_Credentials_Call struct {
	*mock.Call
}

// Credentials is a helper method to define mock.On call
//   - name string
func (_e *MockMachine_Expecter) Credentials(name interface{}) *MockMachine_Credentials_Call {
	return &MockMachine_Credentials_Call{Call: _e.mock.On("Credentials", name)}
}

func (_c *MockMachine_Credentials_Call) Run(run func(name string)) *MockMachine_Credentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMachine_Credentials_Call) Return(_a0 Credentials, _a1 error) *MockMachine_Credentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMachine_Credentials_Call) RunAndReturn(run func(string) (Credentials, error)) *MockMachine_Credentials_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: name
func (_m *MockMachine) Exist(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMachine_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type MockMachine_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - name string
func (_e *MockMachine_Expecter) Exist(name interface{}) *MockMachine_Exist_Call {
	return &MockMachine_Exist_Call{Call: _e.mock.On("Exist", name)}
}

func (_c *MockMachine_Exist_Call) Run(run func(name string)) *MockMachine_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMachine_Exist_Call) Return(_a0 bool) *MockMachine_Exist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachine_Exist_Call) RunAndReturn(run func(string) bool) *MockMachine_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with no fields
func (_m *MockMachine) List() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMachine_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMachine_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockMachine_Expecter) List() *MockMachine_List_Call {
	return &MockMachine_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockMachine_List_Call) Run(run func()) *MockMachine_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMachine_List_Call) Return(machines []string, err error) *MockMachine_List_Call {
	_c.Call.Return(machines, err)
	return _c
}

func (_c *MockMachine_List_Call) RunAndReturn(run func() ([]string, error)) *MockMachine_List_Call {
	_c.Call.Return(run)
	return _c
}

// Provision provides a mock function with given fields: name
func (_m *MockMachine) Provision(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Provision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachine_Provision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provision'
type MockMachine_Provision_Call struct {
	*mock.Call
}

// Provision is a helper method to define mock.On call
//   - name string
func (_e *MockMachine_Expecter) Provision(name interface{}) *MockMachine_Provision_Call {
	return &MockMachine_Provision_Call{Call: _e.mock.On("Provision", name)}
}

func (_c *MockMachine_Provision_Call) Run(run func(name string)) *MockMachine_Provision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMachine_Provision_Call) Return(_a0 error) *MockMachine_Provision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachine_Provision_Call) RunAndReturn(run func(string) error) *MockMachine_Provision_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: name
func (_m *MockMachine) Remove(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachine_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockMachine_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - name string
func (_e *MockMachine_Expecter) Remove(name interface{}) *MockMachine_Remove_Call {
	return &MockMachine_Remove_Call{Call: _e.mock.On("Remove", name)}
}

func (_c *MockMachine_Remove_Call) Run(run func(name string)) *MockMachine_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMachine_Remove_Call) Return(_a0 error) *MockMachine_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachine_Remove_Call) RunAndReturn(run func(string) error) *MockMachine_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: name, timeout
func (_m *MockMachine) Stop(name string, timeout time.Duration) error {
	ret := _m.Called(name, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(name, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMachine_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockMachine_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - name string
//   - timeout time.Duration
func (_e *MockMachine_Expecter) Stop(name interface{}, timeout interface{}) *MockMachine_Stop_Call {
	return &MockMachine_Stop_Call{Call: _e.mock.On("Stop", name, timeout)}
}

func (_c *MockMachine_Stop_Call) Run(run func(name string, timeout time.Duration)) *MockMachine_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockMachine_Stop_Call) Return(_a0 error) *MockMachine_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMachine_Stop_Call) RunAndReturn(run func(string, time.Duration) error) *MockMachine_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMachine creates a new instance of MockMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMachine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMachine {
	mock := &MockMachine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
