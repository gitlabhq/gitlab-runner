// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSecretsManagerAPI creates a new instance of MockSecretsManagerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretsManagerAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretsManagerAPI {
	mock := &MockSecretsManagerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecretsManagerAPI is an autogenerated mock type for the SecretsManagerAPI type
type MockSecretsManagerAPI struct {
	mock.Mock
}

type MockSecretsManagerAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretsManagerAPI) EXPECT() *MockSecretsManagerAPI_Expecter {
	return &MockSecretsManagerAPI_Expecter{mock: &_m.Mock}
}

// GetSecretValue provides a mock function for the type MockSecretsManagerAPI
func (_mock *MockSecretsManagerAPI) GetSecretValue(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
	// func(*secretsmanager.Options)
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretValue")
	}

	var r0 *secretsmanager.GetSecretValueOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) *secretsmanager.GetSecretValueOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetSecretValueOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretsManagerAPI_GetSecretValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretValue'
type MockSecretsManagerAPI_GetSecretValue_Call struct {
	*mock.Call
}

// GetSecretValue is a helper method to define mock.On call
//   - ctx context.Context
//   - params *secretsmanager.GetSecretValueInput
//   - optFns ...func(*secretsmanager.Options)
func (_e *MockSecretsManagerAPI_Expecter) GetSecretValue(ctx interface{}, params interface{}, optFns ...interface{}) *MockSecretsManagerAPI_GetSecretValue_Call {
	return &MockSecretsManagerAPI_GetSecretValue_Call{Call: _e.mock.On("GetSecretValue",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockSecretsManagerAPI_GetSecretValue_Call) Run(run func(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options))) *MockSecretsManagerAPI_GetSecretValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *secretsmanager.GetSecretValueInput
		if args[1] != nil {
			arg1 = args[1].(*secretsmanager.GetSecretValueInput)
		}
		var arg2 []func(*secretsmanager.Options)
		variadicArgs := make([]func(*secretsmanager.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*secretsmanager.Options))
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSecretsManagerAPI_GetSecretValue_Call) Return(getSecretValueOutput *secretsmanager.GetSecretValueOutput, err error) *MockSecretsManagerAPI_GetSecretValue_Call {
	_c.Call.Return(getSecretValueOutput, err)
	return _c
}

func (_c *MockSecretsManagerAPI_GetSecretValue_Call) RunAndReturn(run func(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error)) *MockSecretsManagerAPI_GetSecretValue_Call {
	_c.Call.Return(run)
	return _c
}
