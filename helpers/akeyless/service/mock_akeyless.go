// Code generated by mockery v2.28.2. DO NOT EDIT.

package service

import (
	context "context"

	common "gitlab.com/gitlab-org/gitlab-runner/common"

	mock "github.com/stretchr/testify/mock"
)

// MockAkeyless is an autogenerated mock type for the Akeyless type
type MockAkeyless struct {
	mock.Mock
}

// GetAkeylessSecret provides a mock function with given fields: ctx, secret
func (_m *MockAkeyless) GetAkeylessSecret(ctx context.Context, secret *common.AkeylessSecret) (interface{}, error) {
	ret := _m.Called(ctx, secret)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *common.AkeylessSecret) (interface{}, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *common.AkeylessSecret) interface{}); ok {
		r0 = rf(ctx, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *common.AkeylessSecret) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockAkeyless interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAkeyless creates a new instance of MockAkeyless. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAkeyless(t mockConstructorTestingTNewMockAkeyless) *MockAkeyless {
	mock := &MockAkeyless{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
