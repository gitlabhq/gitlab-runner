// Code generated by mockery v2.53.3. DO NOT EDIT.

package referees

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
)

// mockRefereeFactory is an autogenerated mock type for the refereeFactory type
type mockRefereeFactory struct {
	mock.Mock
}

type mockRefereeFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRefereeFactory) EXPECT() *mockRefereeFactory_Expecter {
	return &mockRefereeFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: executor, config, log
func (_m *mockRefereeFactory) Execute(executor interface{}, config *Config, log logrus.FieldLogger) Referee {
	ret := _m.Called(executor, config, log)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Referee
	if rf, ok := ret.Get(0).(func(interface{}, *Config, logrus.FieldLogger) Referee); ok {
		r0 = rf(executor, config, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Referee)
		}
	}

	return r0
}

// mockRefereeFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockRefereeFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - executor interface{}
//   - config *Config
//   - log logrus.FieldLogger
func (_e *mockRefereeFactory_Expecter) Execute(executor interface{}, config interface{}, log interface{}) *mockRefereeFactory_Execute_Call {
	return &mockRefereeFactory_Execute_Call{Call: _e.mock.On("Execute", executor, config, log)}
}

func (_c *mockRefereeFactory_Execute_Call) Run(run func(executor interface{}, config *Config, log logrus.FieldLogger)) *mockRefereeFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(*Config), args[2].(logrus.FieldLogger))
	})
	return _c
}

func (_c *mockRefereeFactory_Execute_Call) Return(_a0 Referee) *mockRefereeFactory_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRefereeFactory_Execute_Call) RunAndReturn(run func(interface{}, *Config, logrus.FieldLogger) Referee) *mockRefereeFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRefereeFactory creates a new instance of mockRefereeFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRefereeFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRefereeFactory {
	mock := &mockRefereeFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
