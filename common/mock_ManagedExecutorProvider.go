// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManagedExecutorProvider is an autogenerated mock type for the ManagedExecutorProvider type
type MockManagedExecutorProvider struct {
	mock.Mock
}

type MockManagedExecutorProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagedExecutorProvider) EXPECT() *MockManagedExecutorProvider_Expecter {
	return &MockManagedExecutorProvider_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with no fields
func (_m *MockManagedExecutorProvider) Init() {
	_m.Called()
}

// MockManagedExecutorProvider_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockManagedExecutorProvider_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockManagedExecutorProvider_Expecter) Init() *MockManagedExecutorProvider_Init_Call {
	return &MockManagedExecutorProvider_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockManagedExecutorProvider_Init_Call) Run(run func()) *MockManagedExecutorProvider_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManagedExecutorProvider_Init_Call) Return() *MockManagedExecutorProvider_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManagedExecutorProvider_Init_Call) RunAndReturn(run func()) *MockManagedExecutorProvider_Init_Call {
	_c.Run(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockManagedExecutorProvider) Shutdown(ctx context.Context) {
	_m.Called(ctx)
}

// MockManagedExecutorProvider_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockManagedExecutorProvider_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagedExecutorProvider_Expecter) Shutdown(ctx interface{}) *MockManagedExecutorProvider_Shutdown_Call {
	return &MockManagedExecutorProvider_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockManagedExecutorProvider_Shutdown_Call) Run(run func(ctx context.Context)) *MockManagedExecutorProvider_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagedExecutorProvider_Shutdown_Call) Return() *MockManagedExecutorProvider_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManagedExecutorProvider_Shutdown_Call) RunAndReturn(run func(context.Context)) *MockManagedExecutorProvider_Shutdown_Call {
	_c.Run(run)
	return _c
}

// NewMockManagedExecutorProvider creates a new instance of MockManagedExecutorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagedExecutorProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManagedExecutorProvider {
	mock := &MockManagedExecutorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
