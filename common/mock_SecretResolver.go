// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockSecretResolver is an autogenerated mock type for the SecretResolver type
type MockSecretResolver struct {
	mock.Mock
}

type MockSecretResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretResolver) EXPECT() *MockSecretResolver_Expecter {
	return &MockSecretResolver_Expecter{mock: &_m.Mock}
}

// IsSupported provides a mock function with no fields
func (_m *MockSecretResolver) IsSupported() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSupported")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSecretResolver_IsSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupported'
type MockSecretResolver_IsSupported_Call struct {
	*mock.Call
}

// IsSupported is a helper method to define mock.On call
func (_e *MockSecretResolver_Expecter) IsSupported() *MockSecretResolver_IsSupported_Call {
	return &MockSecretResolver_IsSupported_Call{Call: _e.mock.On("IsSupported")}
}

func (_c *MockSecretResolver_IsSupported_Call) Run(run func()) *MockSecretResolver_IsSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretResolver_IsSupported_Call) Return(_a0 bool) *MockSecretResolver_IsSupported_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretResolver_IsSupported_Call) RunAndReturn(run func() bool) *MockSecretResolver_IsSupported_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockSecretResolver) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecretResolver_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockSecretResolver_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockSecretResolver_Expecter) Name() *MockSecretResolver_Name_Call {
	return &MockSecretResolver_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockSecretResolver_Name_Call) Run(run func()) *MockSecretResolver_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretResolver_Name_Call) Return(_a0 string) *MockSecretResolver_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretResolver_Name_Call) RunAndReturn(run func() string) *MockSecretResolver_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Resolve provides a mock function with no fields
func (_m *MockSecretResolver) Resolve() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockSecretResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
func (_e *MockSecretResolver_Expecter) Resolve() *MockSecretResolver_Resolve_Call {
	return &MockSecretResolver_Resolve_Call{Call: _e.mock.On("Resolve")}
}

func (_c *MockSecretResolver_Resolve_Call) Run(run func()) *MockSecretResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretResolver_Resolve_Call) Return(_a0 string, _a1 error) *MockSecretResolver_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretResolver_Resolve_Call) RunAndReturn(run func() (string, error)) *MockSecretResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretResolver creates a new instance of MockSecretResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretResolver {
	mock := &MockSecretResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
