// Code generated by mockery v2.53.3. DO NOT EDIT.

package buildtest

import (
	mock "github.com/stretchr/testify/mock"
	common "gitlab.com/gitlab-org/gitlab-runner/common"

	testing "testing"
)

// MockBuildSetupFn is an autogenerated mock type for the BuildSetupFn type
type MockBuildSetupFn struct {
	mock.Mock
}

type MockBuildSetupFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuildSetupFn) EXPECT() *MockBuildSetupFn_Expecter {
	return &MockBuildSetupFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: t, build
func (_m *MockBuildSetupFn) Execute(t *testing.T, build *common.Build) {
	_m.Called(t, build)
}

// MockBuildSetupFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockBuildSetupFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - t *testing.T
//   - build *common.Build
func (_e *MockBuildSetupFn_Expecter) Execute(t interface{}, build interface{}) *MockBuildSetupFn_Execute_Call {
	return &MockBuildSetupFn_Execute_Call{Call: _e.mock.On("Execute", t, build)}
}

func (_c *MockBuildSetupFn_Execute_Call) Run(run func(t *testing.T, build *common.Build)) *MockBuildSetupFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*testing.T), args[1].(*common.Build))
	})
	return _c
}

func (_c *MockBuildSetupFn_Execute_Call) Return() *MockBuildSetupFn_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBuildSetupFn_Execute_Call) RunAndReturn(run func(*testing.T, *common.Build)) *MockBuildSetupFn_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockBuildSetupFn creates a new instance of MockBuildSetupFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuildSetupFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuildSetupFn {
	mock := &MockBuildSetupFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
