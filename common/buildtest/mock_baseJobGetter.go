// Code generated by mockery v2.53.3. DO NOT EDIT.

package buildtest

import (
	mock "github.com/stretchr/testify/mock"
	common "gitlab.com/gitlab-org/gitlab-runner/common"
)

// mockBaseJobGetter is an autogenerated mock type for the baseJobGetter type
type mockBaseJobGetter struct {
	mock.Mock
}

type mockBaseJobGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBaseJobGetter) EXPECT() *mockBaseJobGetter_Expecter {
	return &mockBaseJobGetter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *mockBaseJobGetter) Execute() (common.JobResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 common.JobResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (common.JobResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() common.JobResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.JobResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBaseJobGetter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockBaseJobGetter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *mockBaseJobGetter_Expecter) Execute() *mockBaseJobGetter_Execute_Call {
	return &mockBaseJobGetter_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *mockBaseJobGetter_Execute_Call) Run(run func()) *mockBaseJobGetter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockBaseJobGetter_Execute_Call) Return(_a0 common.JobResponse, _a1 error) *mockBaseJobGetter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBaseJobGetter_Execute_Call) RunAndReturn(run func() (common.JobResponse, error)) *mockBaseJobGetter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBaseJobGetter creates a new instance of mockBaseJobGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBaseJobGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBaseJobGetter {
	mock := &mockBaseJobGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
