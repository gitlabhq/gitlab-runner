// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockJobStateFromEncoded is an autogenerated mock type for the JobStateFromEncoded type
type MockJobStateFromEncoded[T interface{}] struct {
	mock.Mock
}

type MockJobStateFromEncoded_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockJobStateFromEncoded[T]) EXPECT() *MockJobStateFromEncoded_Expecter[T] {
	return &MockJobStateFromEncoded_Expecter[T]{mock: &_m.Mock}
}

// FromEncoded provides a mock function with no fields
func (_m *MockJobStateFromEncoded[T]) FromEncoded() (T, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FromEncoded")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func() (T, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobStateFromEncoded_FromEncoded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromEncoded'
type MockJobStateFromEncoded_FromEncoded_Call[T interface{}] struct {
	*mock.Call
}

// FromEncoded is a helper method to define mock.On call
func (_e *MockJobStateFromEncoded_Expecter[T]) FromEncoded() *MockJobStateFromEncoded_FromEncoded_Call[T] {
	return &MockJobStateFromEncoded_FromEncoded_Call[T]{Call: _e.mock.On("FromEncoded")}
}

func (_c *MockJobStateFromEncoded_FromEncoded_Call[T]) Run(run func()) *MockJobStateFromEncoded_FromEncoded_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobStateFromEncoded_FromEncoded_Call[T]) Return(_a0 T, _a1 error) *MockJobStateFromEncoded_FromEncoded_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobStateFromEncoded_FromEncoded_Call[T]) RunAndReturn(run func() (T, error)) *MockJobStateFromEncoded_FromEncoded_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockJobStateFromEncoded creates a new instance of MockJobStateFromEncoded. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobStateFromEncoded[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobStateFromEncoded[T] {
	mock := &MockJobStateFromEncoded[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
