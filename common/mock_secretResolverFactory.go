// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// mockSecretResolverFactory is an autogenerated mock type for the secretResolverFactory type
type mockSecretResolverFactory struct {
	mock.Mock
}

type mockSecretResolverFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSecretResolverFactory) EXPECT() *mockSecretResolverFactory_Expecter {
	return &mockSecretResolverFactory_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: secret
func (_m *mockSecretResolverFactory) Execute(secret Secret) SecretResolver {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 SecretResolver
	if rf, ok := ret.Get(0).(func(Secret) SecretResolver); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SecretResolver)
		}
	}

	return r0
}

// mockSecretResolverFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockSecretResolverFactory_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - secret Secret
func (_e *mockSecretResolverFactory_Expecter) Execute(secret interface{}) *mockSecretResolverFactory_Execute_Call {
	return &mockSecretResolverFactory_Execute_Call{Call: _e.mock.On("Execute", secret)}
}

func (_c *mockSecretResolverFactory_Execute_Call) Run(run func(secret Secret)) *mockSecretResolverFactory_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Secret))
	})
	return _c
}

func (_c *mockSecretResolverFactory_Execute_Call) Return(_a0 SecretResolver) *mockSecretResolverFactory_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretResolverFactory_Execute_Call) RunAndReturn(run func(Secret) SecretResolver) *mockSecretResolverFactory_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSecretResolverFactory creates a new instance of mockSecretResolverFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSecretResolverFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSecretResolverFactory {
	mock := &mockSecretResolverFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
