// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockContentProvider is an autogenerated mock type for the ContentProvider type
type MockContentProvider struct {
	mock.Mock
}

type MockContentProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContentProvider) EXPECT() *MockContentProvider_Expecter {
	return &MockContentProvider_Expecter{mock: &_m.Mock}
}

// GetContentLength provides a mock function with no fields
func (_m *MockContentProvider) GetContentLength() (int64, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContentLength")
	}

	var r0 int64
	var r1 bool
	if rf, ok := ret.Get(0).(func() (int64, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockContentProvider_GetContentLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentLength'
type MockContentProvider_GetContentLength_Call struct {
	*mock.Call
}

// GetContentLength is a helper method to define mock.On call
func (_e *MockContentProvider_Expecter) GetContentLength() *MockContentProvider_GetContentLength_Call {
	return &MockContentProvider_GetContentLength_Call{Call: _e.mock.On("GetContentLength")}
}

func (_c *MockContentProvider_GetContentLength_Call) Run(run func()) *MockContentProvider_GetContentLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContentProvider_GetContentLength_Call) Return(_a0 int64, _a1 bool) *MockContentProvider_GetContentLength_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContentProvider_GetContentLength_Call) RunAndReturn(run func() (int64, bool)) *MockContentProvider_GetContentLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetReader provides a mock function with no fields
func (_m *MockContentProvider) GetReader() (io.ReadCloser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReader")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.ReadCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContentProvider_GetReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReader'
type MockContentProvider_GetReader_Call struct {
	*mock.Call
}

// GetReader is a helper method to define mock.On call
func (_e *MockContentProvider_Expecter) GetReader() *MockContentProvider_GetReader_Call {
	return &MockContentProvider_GetReader_Call{Call: _e.mock.On("GetReader")}
}

func (_c *MockContentProvider_GetReader_Call) Run(run func()) *MockContentProvider_GetReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContentProvider_GetReader_Call) Return(_a0 io.ReadCloser, _a1 error) *MockContentProvider_GetReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContentProvider_GetReader_Call) RunAndReturn(run func() (io.ReadCloser, error)) *MockContentProvider_GetReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContentProvider creates a new instance of MockContentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContentProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContentProvider {
	mock := &MockContentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
