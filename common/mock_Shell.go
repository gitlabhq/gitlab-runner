// Code generated by mockery v2.43.0. DO NOT EDIT.

package common

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockShell is an autogenerated mock type for the Shell type
type MockShell struct {
	mock.Mock
}

// GenerateSaveScript provides a mock function with given fields: info, scriptPath, script
func (_m *MockShell) GenerateSaveScript(info ShellScriptInfo, scriptPath string, script string) (string, error) {
	ret := _m.Called(info, scriptPath, script)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSaveScript")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(ShellScriptInfo, string, string) (string, error)); ok {
		return rf(info, scriptPath, script)
	}
	if rf, ok := ret.Get(0).(func(ShellScriptInfo, string, string) string); ok {
		r0 = rf(info, scriptPath, script)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ShellScriptInfo, string, string) error); ok {
		r1 = rf(info, scriptPath, script)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateScript provides a mock function with given fields: ctx, buildStage, info
func (_m *MockShell) GenerateScript(ctx context.Context, buildStage BuildStage, info ShellScriptInfo) (string, error) {
	ret := _m.Called(ctx, buildStage, info)

	if len(ret) == 0 {
		panic("no return value specified for GenerateScript")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BuildStage, ShellScriptInfo) (string, error)); ok {
		return rf(ctx, buildStage, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BuildStage, ShellScriptInfo) string); ok {
		r0 = rf(ctx, buildStage, info)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, BuildStage, ShellScriptInfo) error); ok {
		r1 = rf(ctx, buildStage, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguration provides a mock function with given fields: info
func (_m *MockShell) GetConfiguration(info ShellScriptInfo) (*ShellConfiguration, error) {
	ret := _m.Called(info)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *ShellConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(ShellScriptInfo) (*ShellConfiguration, error)); ok {
		return rf(info)
	}
	if rf, ok := ret.Get(0).(func(ShellScriptInfo) *ShellConfiguration); ok {
		r0 = rf(info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShellConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(ShellScriptInfo) error); ok {
		r1 = rf(info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEntrypointCommand provides a mock function with given fields: info, probeFile
func (_m *MockShell) GetEntrypointCommand(info ShellScriptInfo, probeFile string) []string {
	ret := _m.Called(info, probeFile)

	if len(ret) == 0 {
		panic("no return value specified for GetEntrypointCommand")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(ShellScriptInfo, string) []string); ok {
		r0 = rf(info, probeFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetFeatures provides a mock function with given fields: features
func (_m *MockShell) GetFeatures(features *FeaturesInfo) {
	_m.Called(features)
}

// GetGitCredHelperCommand provides a mock function with given fields: os
func (_m *MockShell) GetGitCredHelperCommand(os string) string {
	ret := _m.Called(os)

	if len(ret) == 0 {
		panic("no return value specified for GetGitCredHelperCommand")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(os)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockShell) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsDefault provides a mock function with given fields:
func (_m *MockShell) IsDefault() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDefault")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockShell creates a new instance of MockShell. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShell(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShell {
	mock := &MockShell{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
