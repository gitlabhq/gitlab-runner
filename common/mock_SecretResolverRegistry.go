// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockSecretResolverRegistry is an autogenerated mock type for the SecretResolverRegistry type
type MockSecretResolverRegistry struct {
	mock.Mock
}

type MockSecretResolverRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretResolverRegistry) EXPECT() *MockSecretResolverRegistry_Expecter {
	return &MockSecretResolverRegistry_Expecter{mock: &_m.Mock}
}

// GetFor provides a mock function with given fields: secret
func (_m *MockSecretResolverRegistry) GetFor(secret Secret) (SecretResolver, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for GetFor")
	}

	var r0 SecretResolver
	var r1 error
	if rf, ok := ret.Get(0).(func(Secret) (SecretResolver, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(Secret) SecretResolver); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SecretResolver)
		}
	}

	if rf, ok := ret.Get(1).(func(Secret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecretResolverRegistry_GetFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFor'
type MockSecretResolverRegistry_GetFor_Call struct {
	*mock.Call
}

// GetFor is a helper method to define mock.On call
//   - secret Secret
func (_e *MockSecretResolverRegistry_Expecter) GetFor(secret interface{}) *MockSecretResolverRegistry_GetFor_Call {
	return &MockSecretResolverRegistry_GetFor_Call{Call: _e.mock.On("GetFor", secret)}
}

func (_c *MockSecretResolverRegistry_GetFor_Call) Run(run func(secret Secret)) *MockSecretResolverRegistry_GetFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Secret))
	})
	return _c
}

func (_c *MockSecretResolverRegistry_GetFor_Call) Return(_a0 SecretResolver, _a1 error) *MockSecretResolverRegistry_GetFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretResolverRegistry_GetFor_Call) RunAndReturn(run func(Secret) (SecretResolver, error)) *MockSecretResolverRegistry_GetFor_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: f
func (_m *MockSecretResolverRegistry) Register(f secretResolverFactory) {
	_m.Called(f)
}

// MockSecretResolverRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockSecretResolverRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - f secretResolverFactory
func (_e *MockSecretResolverRegistry_Expecter) Register(f interface{}) *MockSecretResolverRegistry_Register_Call {
	return &MockSecretResolverRegistry_Register_Call{Call: _e.mock.On("Register", f)}
}

func (_c *MockSecretResolverRegistry_Register_Call) Run(run func(f secretResolverFactory)) *MockSecretResolverRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(secretResolverFactory))
	})
	return _c
}

func (_c *MockSecretResolverRegistry_Register_Call) Return() *MockSecretResolverRegistry_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSecretResolverRegistry_Register_Call) RunAndReturn(run func(secretResolverFactory)) *MockSecretResolverRegistry_Register_Call {
	_c.Run(run)
	return _c
}

// NewMockSecretResolverRegistry creates a new instance of MockSecretResolverRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretResolverRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretResolverRegistry {
	mock := &MockSecretResolverRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
