// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockJobStore is an autogenerated mock type for the JobStore type
type MockJobStore struct {
	mock.Mock
}

type MockJobStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobStore) EXPECT() *MockJobStore_Expecter {
	return &MockJobStore_Expecter{mock: &_m.Mock}
}

// List provides a mock function with no fields
func (_m *MockJobStore) List() ([]*Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Job
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockJobStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockJobStore_Expecter) List() *MockJobStore_List_Call {
	return &MockJobStore_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockJobStore_List_Call) Run(run func()) *MockJobStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobStore_List_Call) Return(_a0 []*Job, _a1 error) *MockJobStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobStore_List_Call) RunAndReturn(run func() ([]*Job, error)) *MockJobStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: _a0
func (_m *MockJobStore) Remove(_a0 *Job) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Job) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobStore_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockJobStore_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - _a0 *Job
func (_e *MockJobStore_Expecter) Remove(_a0 interface{}) *MockJobStore_Remove_Call {
	return &MockJobStore_Remove_Call{Call: _e.mock.On("Remove", _a0)}
}

func (_c *MockJobStore_Remove_Call) Run(run func(_a0 *Job)) *MockJobStore_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Job))
	})
	return _c
}

func (_c *MockJobStore_Remove_Call) Return(_a0 error) *MockJobStore_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobStore_Remove_Call) RunAndReturn(run func(*Job) error) *MockJobStore_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with no fields
func (_m *MockJobStore) Request() (*Job, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *Job
	var r1 error
	if rf, ok := ret.Get(0).(func() (*Job, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *Job); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Job)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobStore_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockJobStore_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *MockJobStore_Expecter) Request() *MockJobStore_Request_Call {
	return &MockJobStore_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *MockJobStore_Request_Call) Run(run func()) *MockJobStore_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobStore_Request_Call) Return(_a0 *Job, _a1 error) *MockJobStore_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobStore_Request_Call) RunAndReturn(run func() (*Job, error)) *MockJobStore_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockJobStore) Update(_a0 *Job) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Job) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockJobStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *Job
func (_e *MockJobStore_Expecter) Update(_a0 interface{}) *MockJobStore_Update_Call {
	return &MockJobStore_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockJobStore_Update_Call) Run(run func(_a0 *Job)) *MockJobStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Job))
	})
	return _c
}

func (_c *MockJobStore_Update_Call) Return(_a0 error) *MockJobStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobStore_Update_Call) RunAndReturn(run func(*Job) error) *MockJobStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobStore creates a new instance of MockJobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobStore {
	mock := &MockJobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
