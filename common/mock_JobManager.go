// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockJobManager is an autogenerated mock type for the JobManager type
type MockJobManager struct {
	mock.Mock
}

type MockJobManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobManager) EXPECT() *MockJobManager_Expecter {
	return &MockJobManager_Expecter{mock: &_m.Mock}
}

// PatchTrace provides a mock function with given fields: jobCredentials, content, startOffset, debugModeEnabled
func (_m *MockJobManager) PatchTrace(jobCredentials *JobCredentials, content []byte, startOffset int, debugModeEnabled bool) PatchTraceResult {
	ret := _m.Called(jobCredentials, content, startOffset, debugModeEnabled)

	if len(ret) == 0 {
		panic("no return value specified for PatchTrace")
	}

	var r0 PatchTraceResult
	if rf, ok := ret.Get(0).(func(*JobCredentials, []byte, int, bool) PatchTraceResult); ok {
		r0 = rf(jobCredentials, content, startOffset, debugModeEnabled)
	} else {
		r0 = ret.Get(0).(PatchTraceResult)
	}

	return r0
}

// MockJobManager_PatchTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchTrace'
type MockJobManager_PatchTrace_Call struct {
	*mock.Call
}

// PatchTrace is a helper method to define mock.On call
//   - jobCredentials *JobCredentials
//   - content []byte
//   - startOffset int
//   - debugModeEnabled bool
func (_e *MockJobManager_Expecter) PatchTrace(jobCredentials interface{}, content interface{}, startOffset interface{}, debugModeEnabled interface{}) *MockJobManager_PatchTrace_Call {
	return &MockJobManager_PatchTrace_Call{Call: _e.mock.On("PatchTrace", jobCredentials, content, startOffset, debugModeEnabled)}
}

func (_c *MockJobManager_PatchTrace_Call) Run(run func(jobCredentials *JobCredentials, content []byte, startOffset int, debugModeEnabled bool)) *MockJobManager_PatchTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*JobCredentials), args[1].([]byte), args[2].(int), args[3].(bool))
	})
	return _c
}

func (_c *MockJobManager_PatchTrace_Call) Return(_a0 PatchTraceResult) *MockJobManager_PatchTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobManager_PatchTrace_Call) RunAndReturn(run func(*JobCredentials, []byte, int, bool) PatchTraceResult) *MockJobManager_PatchTrace_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessJob provides a mock function with given fields: buildCredentials
func (_m *MockJobManager) ProcessJob(buildCredentials *JobCredentials) (JobTrace, error) {
	ret := _m.Called(buildCredentials)

	if len(ret) == 0 {
		panic("no return value specified for ProcessJob")
	}

	var r0 JobTrace
	var r1 error
	if rf, ok := ret.Get(0).(func(*JobCredentials) (JobTrace, error)); ok {
		return rf(buildCredentials)
	}
	if rf, ok := ret.Get(0).(func(*JobCredentials) JobTrace); ok {
		r0 = rf(buildCredentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(JobTrace)
		}
	}

	if rf, ok := ret.Get(1).(func(*JobCredentials) error); ok {
		r1 = rf(buildCredentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobManager_ProcessJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessJob'
type MockJobManager_ProcessJob_Call struct {
	*mock.Call
}

// ProcessJob is a helper method to define mock.On call
//   - buildCredentials *JobCredentials
func (_e *MockJobManager_Expecter) ProcessJob(buildCredentials interface{}) *MockJobManager_ProcessJob_Call {
	return &MockJobManager_ProcessJob_Call{Call: _e.mock.On("ProcessJob", buildCredentials)}
}

func (_c *MockJobManager_ProcessJob_Call) Run(run func(buildCredentials *JobCredentials)) *MockJobManager_ProcessJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*JobCredentials))
	})
	return _c
}

func (_c *MockJobManager_ProcessJob_Call) Return(_a0 JobTrace, _a1 error) *MockJobManager_ProcessJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobManager_ProcessJob_Call) RunAndReturn(run func(*JobCredentials) (JobTrace, error)) *MockJobManager_ProcessJob_Call {
	_c.Call.Return(run)
	return _c
}

// RequestJob provides a mock function with given fields: ctx, sessionInfo
func (_m *MockJobManager) RequestJob(ctx context.Context, sessionInfo *SessionInfo) (*Job, bool) {
	ret := _m.Called(ctx, sessionInfo)

	if len(ret) == 0 {
		panic("no return value specified for RequestJob")
	}

	var r0 *Job
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, *SessionInfo) (*Job, bool)); ok {
		return rf(ctx, sessionInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SessionInfo) *Job); ok {
		r0 = rf(ctx, sessionInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SessionInfo) bool); ok {
		r1 = rf(ctx, sessionInfo)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockJobManager_RequestJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestJob'
type MockJobManager_RequestJob_Call struct {
	*mock.Call
}

// RequestJob is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionInfo *SessionInfo
func (_e *MockJobManager_Expecter) RequestJob(ctx interface{}, sessionInfo interface{}) *MockJobManager_RequestJob_Call {
	return &MockJobManager_RequestJob_Call{Call: _e.mock.On("RequestJob", ctx, sessionInfo)}
}

func (_c *MockJobManager_RequestJob_Call) Run(run func(ctx context.Context, sessionInfo *SessionInfo)) *MockJobManager_RequestJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SessionInfo))
	})
	return _c
}

func (_c *MockJobManager_RequestJob_Call) Return(_a0 *Job, _a1 bool) *MockJobManager_RequestJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobManager_RequestJob_Call) RunAndReturn(run func(context.Context, *SessionInfo) (*Job, bool)) *MockJobManager_RequestJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJob provides a mock function with given fields: jobCredentials, jobInfo
func (_m *MockJobManager) UpdateJob(jobCredentials *JobCredentials, jobInfo UpdateJobInfo) UpdateJobResult {
	ret := _m.Called(jobCredentials, jobInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 UpdateJobResult
	if rf, ok := ret.Get(0).(func(*JobCredentials, UpdateJobInfo) UpdateJobResult); ok {
		r0 = rf(jobCredentials, jobInfo)
	} else {
		r0 = ret.Get(0).(UpdateJobResult)
	}

	return r0
}

// MockJobManager_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockJobManager_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - jobCredentials *JobCredentials
//   - jobInfo UpdateJobInfo
func (_e *MockJobManager_Expecter) UpdateJob(jobCredentials interface{}, jobInfo interface{}) *MockJobManager_UpdateJob_Call {
	return &MockJobManager_UpdateJob_Call{Call: _e.mock.On("UpdateJob", jobCredentials, jobInfo)}
}

func (_c *MockJobManager_UpdateJob_Call) Run(run func(jobCredentials *JobCredentials, jobInfo UpdateJobInfo)) *MockJobManager_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*JobCredentials), args[1].(UpdateJobInfo))
	})
	return _c
}

func (_c *MockJobManager_UpdateJob_Call) Return(_a0 UpdateJobResult) *MockJobManager_UpdateJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobManager_UpdateJob_Call) RunAndReturn(run func(*JobCredentials, UpdateJobInfo) UpdateJobResult) *MockJobManager_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobManager creates a new instance of MockJobManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobManager {
	mock := &MockJobManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
