// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockExecutorProvider is an autogenerated mock type for the ExecutorProvider type
type MockExecutorProvider struct {
	mock.Mock
}

type MockExecutorProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutorProvider) EXPECT() *MockExecutorProvider_Expecter {
	return &MockExecutorProvider_Expecter{mock: &_m.Mock}
}

// Acquire provides a mock function with given fields: config
func (_m *MockExecutorProvider) Acquire(config *RunnerConfig) (ExecutorData, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Acquire")
	}

	var r0 ExecutorData
	var r1 error
	if rf, ok := ret.Get(0).(func(*RunnerConfig) (ExecutorData, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*RunnerConfig) ExecutorData); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ExecutorData)
		}
	}

	if rf, ok := ret.Get(1).(func(*RunnerConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutorProvider_Acquire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acquire'
type MockExecutorProvider_Acquire_Call struct {
	*mock.Call
}

// Acquire is a helper method to define mock.On call
//   - config *RunnerConfig
func (_e *MockExecutorProvider_Expecter) Acquire(config interface{}) *MockExecutorProvider_Acquire_Call {
	return &MockExecutorProvider_Acquire_Call{Call: _e.mock.On("Acquire", config)}
}

func (_c *MockExecutorProvider_Acquire_Call) Run(run func(config *RunnerConfig)) *MockExecutorProvider_Acquire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*RunnerConfig))
	})
	return _c
}

func (_c *MockExecutorProvider_Acquire_Call) Return(_a0 ExecutorData, _a1 error) *MockExecutorProvider_Acquire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutorProvider_Acquire_Call) RunAndReturn(run func(*RunnerConfig) (ExecutorData, error)) *MockExecutorProvider_Acquire_Call {
	_c.Call.Return(run)
	return _c
}

// CanCreate provides a mock function with no fields
func (_m *MockExecutorProvider) CanCreate() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanCreate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecutorProvider_CanCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanCreate'
type MockExecutorProvider_CanCreate_Call struct {
	*mock.Call
}

// CanCreate is a helper method to define mock.On call
func (_e *MockExecutorProvider_Expecter) CanCreate() *MockExecutorProvider_CanCreate_Call {
	return &MockExecutorProvider_CanCreate_Call{Call: _e.mock.On("CanCreate")}
}

func (_c *MockExecutorProvider_CanCreate_Call) Run(run func()) *MockExecutorProvider_CanCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutorProvider_CanCreate_Call) Return(_a0 bool) *MockExecutorProvider_CanCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutorProvider_CanCreate_Call) RunAndReturn(run func() bool) *MockExecutorProvider_CanCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with no fields
func (_m *MockExecutorProvider) Create() Executor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 Executor
	if rf, ok := ret.Get(0).(func() Executor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Executor)
		}
	}

	return r0
}

// MockExecutorProvider_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockExecutorProvider_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *MockExecutorProvider_Expecter) Create() *MockExecutorProvider_Create_Call {
	return &MockExecutorProvider_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *MockExecutorProvider_Create_Call) Run(run func()) *MockExecutorProvider_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutorProvider_Create_Call) Return(_a0 Executor) *MockExecutorProvider_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutorProvider_Create_Call) RunAndReturn(run func() Executor) *MockExecutorProvider_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigInfo provides a mock function with given fields: input, output
func (_m *MockExecutorProvider) GetConfigInfo(input *RunnerConfig, output *ConfigInfo) {
	_m.Called(input, output)
}

// MockExecutorProvider_GetConfigInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigInfo'
type MockExecutorProvider_GetConfigInfo_Call struct {
	*mock.Call
}

// GetConfigInfo is a helper method to define mock.On call
//   - input *RunnerConfig
//   - output *ConfigInfo
func (_e *MockExecutorProvider_Expecter) GetConfigInfo(input interface{}, output interface{}) *MockExecutorProvider_GetConfigInfo_Call {
	return &MockExecutorProvider_GetConfigInfo_Call{Call: _e.mock.On("GetConfigInfo", input, output)}
}

func (_c *MockExecutorProvider_GetConfigInfo_Call) Run(run func(input *RunnerConfig, output *ConfigInfo)) *MockExecutorProvider_GetConfigInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*RunnerConfig), args[1].(*ConfigInfo))
	})
	return _c
}

func (_c *MockExecutorProvider_GetConfigInfo_Call) Return() *MockExecutorProvider_GetConfigInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutorProvider_GetConfigInfo_Call) RunAndReturn(run func(*RunnerConfig, *ConfigInfo)) *MockExecutorProvider_GetConfigInfo_Call {
	_c.Run(run)
	return _c
}

// GetDefaultShell provides a mock function with no fields
func (_m *MockExecutorProvider) GetDefaultShell() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultShell")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExecutorProvider_GetDefaultShell_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultShell'
type MockExecutorProvider_GetDefaultShell_Call struct {
	*mock.Call
}

// GetDefaultShell is a helper method to define mock.On call
func (_e *MockExecutorProvider_Expecter) GetDefaultShell() *MockExecutorProvider_GetDefaultShell_Call {
	return &MockExecutorProvider_GetDefaultShell_Call{Call: _e.mock.On("GetDefaultShell")}
}

func (_c *MockExecutorProvider_GetDefaultShell_Call) Run(run func()) *MockExecutorProvider_GetDefaultShell_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutorProvider_GetDefaultShell_Call) Return(_a0 string) *MockExecutorProvider_GetDefaultShell_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutorProvider_GetDefaultShell_Call) RunAndReturn(run func() string) *MockExecutorProvider_GetDefaultShell_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeatures provides a mock function with given fields: features
func (_m *MockExecutorProvider) GetFeatures(features *FeaturesInfo) error {
	ret := _m.Called(features)

	if len(ret) == 0 {
		panic("no return value specified for GetFeatures")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*FeaturesInfo) error); ok {
		r0 = rf(features)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutorProvider_GetFeatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeatures'
type MockExecutorProvider_GetFeatures_Call struct {
	*mock.Call
}

// GetFeatures is a helper method to define mock.On call
//   - features *FeaturesInfo
func (_e *MockExecutorProvider_Expecter) GetFeatures(features interface{}) *MockExecutorProvider_GetFeatures_Call {
	return &MockExecutorProvider_GetFeatures_Call{Call: _e.mock.On("GetFeatures", features)}
}

func (_c *MockExecutorProvider_GetFeatures_Call) Run(run func(features *FeaturesInfo)) *MockExecutorProvider_GetFeatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*FeaturesInfo))
	})
	return _c
}

func (_c *MockExecutorProvider_GetFeatures_Call) Return(_a0 error) *MockExecutorProvider_GetFeatures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutorProvider_GetFeatures_Call) RunAndReturn(run func(*FeaturesInfo) error) *MockExecutorProvider_GetFeatures_Call {
	_c.Call.Return(run)
	return _c
}

// GetStore provides a mock function with given fields: config
func (_m *MockExecutorProvider) GetStore(config *RunnerConfig) (JobStore, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 JobStore
	var r1 error
	if rf, ok := ret.Get(0).(func(*RunnerConfig) (JobStore, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*RunnerConfig) JobStore); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(JobStore)
		}
	}

	if rf, ok := ret.Get(1).(func(*RunnerConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutorProvider_GetStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStore'
type MockExecutorProvider_GetStore_Call struct {
	*mock.Call
}

// GetStore is a helper method to define mock.On call
//   - config *RunnerConfig
func (_e *MockExecutorProvider_Expecter) GetStore(config interface{}) *MockExecutorProvider_GetStore_Call {
	return &MockExecutorProvider_GetStore_Call{Call: _e.mock.On("GetStore", config)}
}

func (_c *MockExecutorProvider_GetStore_Call) Run(run func(config *RunnerConfig)) *MockExecutorProvider_GetStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*RunnerConfig))
	})
	return _c
}

func (_c *MockExecutorProvider_GetStore_Call) Return(_a0 JobStore, _a1 error) *MockExecutorProvider_GetStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutorProvider_GetStore_Call) RunAndReturn(run func(*RunnerConfig) (JobStore, error)) *MockExecutorProvider_GetStore_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: config, data
func (_m *MockExecutorProvider) Release(config *RunnerConfig, data ExecutorData) {
	_m.Called(config, data)
}

// MockExecutorProvider_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockExecutorProvider_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - config *RunnerConfig
//   - data ExecutorData
func (_e *MockExecutorProvider_Expecter) Release(config interface{}, data interface{}) *MockExecutorProvider_Release_Call {
	return &MockExecutorProvider_Release_Call{Call: _e.mock.On("Release", config, data)}
}

func (_c *MockExecutorProvider_Release_Call) Run(run func(config *RunnerConfig, data ExecutorData)) *MockExecutorProvider_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*RunnerConfig), args[1].(ExecutorData))
	})
	return _c
}

func (_c *MockExecutorProvider_Release_Call) Return() *MockExecutorProvider_Release_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExecutorProvider_Release_Call) RunAndReturn(run func(*RunnerConfig, ExecutorData)) *MockExecutorProvider_Release_Call {
	_c.Run(run)
	return _c
}

// NewMockExecutorProvider creates a new instance of MockExecutorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutorProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutorProvider {
	mock := &MockExecutorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
