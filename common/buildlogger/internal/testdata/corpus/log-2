[0KRunning with gitlab-runner 13.12.0-rc1 (b21d5c5b)
[0;m[0K  on gitlab-org-docker pVR9XBDq
[0;m[0K  feature flags: FF_GITLAB_REGISTRY_HELPER_IMAGE:true, FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE:true
[0;msection_start:1621524382:resolve_secrets
[0K[0K[36;1mResolving secrets[0;m
[0;msection_end:1621524382:resolve_secrets
[0Ksection_start:1621524382:prepare_executor
[0K[0K[36;1mPreparing the "docker+machine" executor[0;m
[0;m[0KUsing Docker executor with image registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.13.8-12 ...
[0;m[0KStarting service docker:20.10.2-dind ...
[0;m[0KPulling docker image docker:20.10.2-dind ...
[0;m[0KUsing docker image sha256:7569a61fe0d5af655280b516bb2654a1ef03f7a3d67549543b65d81dbeea372e for docker:20.10.2-dind with digest docker@sha256:8f4e9ddda1049e6935f9fc7f5cad0bd1001fbf59188616f19b620fd7b6e95ba2 ...
[0;m[0KWaiting for services to be up and running...
[0;m[0KAuthenticating with credentials from job payload (GitLab Registry)
[0;m[0KPulling docker image registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.13.8-12 ...
[0;m[0KUsing docker image sha256:ae3c432ccac98231f52393c158c545eb689584defed228600b87e2fe4e4fa1e9 for registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.13.8-12 with digest registry.gitlab.com/gitlab-org/gitlab-runner/ci@sha256:0436a4d75851db641f3c704688e0e27a3e208f4bc948503c1b35b7e1691b5cf6 ...
[0;msection_end:1621524429:prepare_executor
[0Ksection_start:1621524429:prepare_script
[0K[0K[36;1mPreparing environment[0;m
[0;mRunning on runner-pvr9xbdq-project-250833-concurrent-0 via runner-pvr9xbdq-org-ci-1621524328-43d1c5e0...
section_end:1621524456:prepare_script
[0Ksection_start:1621524456:get_sources
[0K[0K[36;1mGetting source from Git repository[0;m
[0;m[32;1m$ eval "$CI_PRE_CLONE_SCRIPT"[0;m
[32;1mFetching changes...[0;m
Initialized empty Git repository in /builds/gitlab-org/gitlab-runner/.git/
[32;1mCreated fresh repository.[0;m
[32;1mChecking out 7a6612da as v13.12.0...[0;m

[32;1mSkipping Git submodules setup[0;m
section_end:1621524466:get_sources
[0Ksection_start:1621524466:restore_cache
[0K[0K[36;1mRestoring cache[0;m
[0;m[32;1mChecking cache for unit test 2/8-v13-12-0-2...[0;m
[31;1mFATAL: file does not exist                        [0;m 
[0;33mFailed to extract cache[0;m
section_end:1621524467:restore_cache
[0Ksection_start:1621524467:download_artifacts
[0K[0K[36;1mDownloading artifacts[0;m
[0;m[32;1mDownloading artifacts for helper images (1280281190)...[0;m
Downloading artifacts from coordinator... ok      [0;m  id[0;m=1280281190 responseStatus[0;m=200 OK token[0;m=zaM3ywFV
[32;1mDownloading artifacts for clone test repo (1280281192)...[0;m
Downloading artifacts from coordinator... ok      [0;m  id[0;m=1280281192 responseStatus[0;m=200 OK token[0;m=xzA1hsVL
[32;1mDownloading artifacts for tests definitions (1280281194)...[0;m
Downloading artifacts from coordinator... ok      [0;m  id[0;m=1280281194 responseStatus[0;m=200 OK token[0;m=kQK1ELdZ
section_end:1621524483:download_artifacts
[0Ksection_start:1621524483:step_script
[0K[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0KUsing docker image sha256:ae3c432ccac98231f52393c158c545eb689584defed228600b87e2fe4e4fa1e9 for registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.13.8-12 with digest registry.gitlab.com/gitlab-org/gitlab-runner/ci@sha256:0436a4d75851db641f3c704688e0e27a3e208f4bc948503c1b35b7e1691b5cf6 ...
[0;m[32;1m$ mkdir -p "$GOCACHE"[0;m
[32;1m$ source ci/touch_make_dependencies[0;m
touching out/binaries/gitlab-runner-helper/gitlab-runner-helper.x86_64-windows.exe
touching out/binaries/gitlab-runner-helper/gitlab-runner-helper.x86_64
touching out/binaries/gitlab-runner-helper/gitlab-runner-helper.s390x
touching out/binaries/gitlab-runner-helper/gitlab-runner-helper.arm
touching out/binaries/gitlab-runner-helper/gitlab-runner-helper.arm64
touching out/helper-images/prebuilt-arm64.tar.xz
touching out/helper-images/prebuilt-arm.tar.xz
touching out/helper-images/prebuilt-s390x.tar.xz
touching out/helper-images/prebuilt-x86_64.tar.xz
touching out/helper-images/prebuilt-x86_64-pwsh.tar.xz
[32;1m$ make parallel_test_execute[0;m
# Pulling images required for some tests
go: downloading k8s.io/api v0.0.0-20191004102349-159aefb8556b
go: downloading github.com/prometheus/common v0.6.0
go: downloading github.com/docker/docker v20.10.2+incompatible
go: downloading github.com/prometheus/client_golang v1.1.0
go: downloading gitlab.com/ayufan/golang-cli-helpers v0.0.0-20171103152739-a7cf72d604cd
go: downloading gopkg.in/yaml.v2 v2.3.0
go: downloading github.com/tevino/abool v0.0.0-20160628101133-3c25f2fe7cd0
go: downloading github.com/stretchr/testify v1.6.2-0.20200720104044-95a9d909e987
go: extracting gitlab.com/ayufan/golang-cli-helpers v0.0.0-20171103152739-a7cf72d604cd
go: extracting github.com/prometheus/common v0.6.0
go: extracting github.com/tevino/abool v0.0.0-20160628101133-3c25f2fe7cd0
go: extracting k8s.io/api v0.0.0-20191004102349-159aefb8556b
go: extracting github.com/prometheus/client_golang v1.1.0
go: extracting gopkg.in/yaml.v2 v2.3.0
go: downloading github.com/docker/go-connections v0.3.0
go: extracting github.com/stretchr/testify v1.6.2-0.20200720104044-95a9d909e987
go: downloading github.com/sirupsen/logrus v1.7.0
go: extracting github.com/sirupsen/logrus v1.7.0
go: extracting github.com/docker/go-connections v0.3.0
go: downloading github.com/stretchr/objx v0.3.0
go: downloading github.com/gorilla/websocket v1.4.2
go: extracting github.com/stretchr/objx v0.3.0
go: downloading github.com/docker/machine v0.7.1-0.20170120224952-7b7a141da844
go: extracting github.com/gorilla/websocket v1.4.2
go: downloading github.com/pmezard/go-difflib v1.0.0
go: downloading k8s.io/apimachinery v0.0.0-20191004074956-c5d2f014d689
go: extracting github.com/pmezard/go-difflib v1.0.0
go: extracting github.com/docker/machine v0.7.1-0.20170120224952-7b7a141da844
go: downloading github.com/matttproud/golang_protobuf_extensions v1.0.1
go: extracting k8s.io/apimachinery v0.0.0-20191004074956-c5d2f014d689
go: extracting github.com/matttproud/golang_protobuf_extensions v1.0.1
go: downloading github.com/beorn7/perks v1.0.1
go: extracting github.com/beorn7/perks v1.0.1
go: downloading github.com/gorilla/mux v1.3.1-0.20170228224354-599cba5e7b61
go: extracting github.com/gorilla/mux v1.3.1-0.20170228224354-599cba5e7b61
go: downloading golang.org/x/net v0.0.0-20201224014010-6772e930b67b
go: downloading github.com/prometheus/procfs v0.0.5
go: downloading github.com/davecgh/go-spew v1.1.1
go: extracting github.com/davecgh/go-spew v1.1.1
go: downloading golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad
go: extracting github.com/prometheus/procfs v0.0.5
go: downloading github.com/golang/protobuf v1.4.3
go: extracting github.com/golang/protobuf v1.4.3
go: extracting github.com/docker/docker v20.10.2+incompatible
go: downloading google.golang.org/protobuf v1.25.0
go: extracting golang.org/x/net v0.0.0-20201224014010-6772e930b67b
go: extracting golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad
go: downloading github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4
go: extracting github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4
go: downloading github.com/pkg/errors v0.9.1
go: extracting google.golang.org/protobuf v1.25.0
go: extracting github.com/pkg/errors v0.9.1
go: downloading k8s.io/klog v1.0.0
go: extracting k8s.io/klog v1.0.0
go: downloading github.com/gorhill/cronexpr v0.0.0-20160318121724-f0984319b442
go: extracting github.com/gorhill/cronexpr v0.0.0-20160318121724-f0984319b442
go: downloading github.com/gogo/protobuf v1.1.1
go: downloading gopkg.in/inf.v0 v0.9.0
go: downloading github.com/docker/go-units v0.3.2-0.20160802145505-eb879ae3e2b8
go: extracting gopkg.in/inf.v0 v0.9.0
go: downloading gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776
go: extracting github.com/docker/go-units v0.3.2-0.20160802145505-eb879ae3e2b8
go: downloading github.com/google/gofuzz v1.0.0
go: extracting gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776
go: extracting github.com/google/gofuzz v1.0.0
go: downloading github.com/BurntSushi/toml v0.3.1
go: extracting github.com/BurntSushi/toml v0.3.1
go: downloading github.com/json-iterator/go v1.1.10
go: downloading golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6
go: downloading github.com/urfave/cli v1.20.0
go: downloading github.com/opencontainers/image-spec v1.0.1
go: downloading github.com/moby/term v0.0.0-20201216013528-df9cb8a40635
go: downloading github.com/morikuni/aec v1.0.0
go: downloading golang.org/x/text v0.3.6
go: extracting github.com/json-iterator/go v1.1.10
go: extracting github.com/gogo/protobuf v1.1.1
go: downloading github.com/hashicorp/vault/api v1.0.4
go: extracting github.com/moby/term v0.0.0-20201216013528-df9cb8a40635
go: extracting github.com/urfave/cli v1.20.0
go: downloading github.com/containerd/containerd v1.4.3
go: extracting github.com/opencontainers/image-spec v1.0.1
go: extracting github.com/morikuni/aec v1.0.0
go: extracting github.com/hashicorp/vault/api v1.0.4
go: downloading github.com/docker/distribution v2.7.0+incompatible
go: downloading google.golang.org/grpc v1.34.0
go: extracting golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6
go: extracting github.com/docker/distribution v2.7.0+incompatible
go: extracting github.com/containerd/containerd v1.4.3
go: downloading github.com/hashicorp/errwrap v1.0.0
go: downloading github.com/hashicorp/go-retryablehttp v0.5.4
go: downloading golang.org/x/time v0.0.0-20200630173020-3af7569d3a1e
go: extracting google.golang.org/grpc v1.34.0
go: extracting github.com/hashicorp/errwrap v1.0.0
go: downloading github.com/hashicorp/go-rootcerts v1.0.1
go: extracting github.com/hashicorp/go-retryablehttp v0.5.4
go: downloading github.com/mitchellh/mapstructure v1.4.0
go: extracting golang.org/x/time v0.0.0-20200630173020-3af7569d3a1e
go: downloading github.com/modern-go/reflect2 v1.0.1
go: extracting github.com/hashicorp/go-rootcerts v1.0.1
go: downloading gopkg.in/square/go-jose.v2 v2.3.1
go: extracting github.com/mitchellh/mapstructure v1.4.0
go: downloading github.com/hashicorp/go-multierror v1.0.0
go: downloading github.com/hashicorp/hcl v1.0.0
go: extracting gopkg.in/square/go-jose.v2 v2.3.1
go: extracting github.com/hashicorp/go-multierror v1.0.0
go: downloading github.com/hashicorp/vault/sdk v0.1.13
go: extracting github.com/modern-go/reflect2 v1.0.1
go: downloading github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd
go: extracting github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd
go: extracting github.com/hashicorp/hcl v1.0.0
go: extracting github.com/hashicorp/vault/sdk v0.1.13
go: downloading google.golang.org/genproto v0.0.0-20201203001206-6486ece9c497
go: downloading github.com/opencontainers/go-digest v1.0.0-rc1
go: downloading github.com/hashicorp/go-sockaddr v1.0.2
go: downloading github.com/ryanuber/go-glob v1.0.0
go: downloading github.com/hashicorp/go-cleanhttp v0.5.1
go: extracting github.com/opencontainers/go-digest v1.0.0-rc1
go: downloading github.com/pierrec/lz4 v2.0.5+incompatible
go: downloading github.com/golang/snappy v0.0.1
go: extracting github.com/ryanuber/go-glob v1.0.0
go: extracting github.com/hashicorp/go-sockaddr v1.0.2
go: extracting github.com/golang/snappy v0.0.1
go: extracting github.com/hashicorp/go-cleanhttp v0.5.1
go: extracting golang.org/x/text v0.3.6
go: extracting github.com/pierrec/lz4 v2.0.5+incompatible
go: extracting google.golang.org/genproto v0.0.0-20201203001206-6486ece9c497
go: finding github.com/BurntSushi/toml v0.3.1
go: finding github.com/docker/go-units v0.3.2-0.20160802145505-eb879ae3e2b8
go: finding github.com/prometheus/client_golang v1.1.0
go: finding github.com/beorn7/perks v1.0.1
go: finding github.com/golang/protobuf v1.4.3
go: finding google.golang.org/protobuf v1.25.0
go: finding github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4
go: finding github.com/prometheus/common v0.6.0
go: finding github.com/matttproud/golang_protobuf_extensions v1.0.1
go: finding github.com/prometheus/procfs v0.0.5
go: finding github.com/sirupsen/logrus v1.7.0
go: finding golang.org/x/sys v0.0.0-20200826173525-f9321e4c35a6
go: finding github.com/stretchr/testify v1.6.2-0.20200720104044-95a9d909e987
go: finding github.com/davecgh/go-spew v1.1.1
go: finding github.com/pmezard/go-difflib v1.0.0
go: finding github.com/stretchr/objx v0.3.0
go: finding gopkg.in/yaml.v3 v3.0.0-20200615113413-eeeca48fe776
go: finding github.com/tevino/abool v0.0.0-20160628101133-3c25f2fe7cd0
go: finding github.com/urfave/cli v1.20.0
go: finding gitlab.com/ayufan/golang-cli-helpers v0.0.0-20171103152739-a7cf72d604cd
go: finding github.com/docker/docker v20.10.2+incompatible
go: finding gopkg.in/yaml.v2 v2.3.0
go: finding k8s.io/apimachinery v0.0.0-20191004074956-c5d2f014d689
go: finding github.com/docker/go-connections v0.3.0
go: finding github.com/opencontainers/image-spec v1.0.1
go: finding github.com/opencontainers/go-digest v1.0.0-rc1
go: finding github.com/gogo/protobuf v1.1.1
go: finding github.com/containerd/containerd v1.4.3
go: finding github.com/pkg/errors v0.9.1
go: finding google.golang.org/grpc v1.34.0
go: finding google.golang.org/genproto v0.0.0-20201203001206-6486ece9c497
go: finding github.com/docker/distribution v2.7.0+incompatible
go: finding golang.org/x/net v0.0.0-20201224014010-6772e930b67b
go: finding github.com/moby/term v0.0.0-20201216013528-df9cb8a40635
go: finding github.com/morikuni/aec v1.0.0
go: finding github.com/docker/machine v0.7.1-0.20170120224952-7b7a141da844
go: finding golang.org/x/crypto v0.0.0-20201221181555-eec23a3978ad
go: finding github.com/gorhill/cronexpr v0.0.0-20160318121724-f0984319b442
go: finding github.com/hashicorp/vault/api v1.0.4
go: finding github.com/hashicorp/errwrap v1.0.0
go: finding github.com/hashicorp/go-cleanhttp v0.5.1
go: finding github.com/hashicorp/go-multierror v1.0.0
go: finding github.com/hashicorp/go-retryablehttp v0.5.4
go: finding github.com/hashicorp/go-rootcerts v1.0.1
go: finding github.com/hashicorp/hcl v1.0.0
go: finding github.com/hashicorp/vault/sdk v0.1.13
go: finding github.com/golang/snappy v0.0.1
go: finding github.com/pierrec/lz4 v2.0.5+incompatible
go: finding github.com/hashicorp/go-sockaddr v1.0.2
go: finding github.com/ryanuber/go-glob v1.0.0
go: finding github.com/mitchellh/mapstructure v1.4.0
go: finding golang.org/x/text v0.3.6
go: finding golang.org/x/time v0.0.0-20200630173020-3af7569d3a1e
go: finding gopkg.in/square/go-jose.v2 v2.3.1
go: finding github.com/json-iterator/go v1.1.10
go: finding github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd
go: finding github.com/modern-go/reflect2 v1.0.1
go: finding github.com/gorilla/mux v1.3.1-0.20170228224354-599cba5e7b61
go: finding github.com/gorilla/websocket v1.4.2
go: finding k8s.io/api v0.0.0-20191004102349-159aefb8556b
go: finding gopkg.in/inf.v0 v0.9.0
go: finding github.com/google/gofuzz v1.0.0
go: finding k8s.io/klog v1.0.0
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m latest: Pulling from gitlab-org/gitlab-runner/alpine-no-root
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m df20fa9351a1: Pulling fs layer
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m c7e9d654d1d6: Pulling fs layer
[0;33m[docker:18-git][0;m 18-git: Pulling from library/docker
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m c7e9d654d1d6: Verifying Checksum
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m c7e9d654d1d6: Download complete
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m df20fa9351a1: Download complete
[0;33m[alpine:3.12.0][0;m 3.12.0: Pulling from library/alpine
[0;33m[docker:18-dind][0;m 18-dind: Pulling from library/docker
[0;33m[docker:18-git][0;m 9d48c3bd43c5: Pulling fs layer
[0;33m[docker:18-git][0;m 7f94eaf8af20: Pulling fs layer
[0;33m[docker:18-git][0;m 9fe9984849c1: Pulling fs layer
[0;33m[docker:18-git][0;m 3091f1b4f1aa: Pulling fs layer
[0;33m[docker:18-git][0;m 6ef266ac0949: Pulling fs layer
[0;33m[docker:18-git][0;m b2c2c13f4c08: Pulling fs layer
[0;33m[docker:18-git][0;m f354b3ae6d74: Pulling fs layer
[0;33m[docker:18-git][0;m 6ab2580d9dce: Pulling fs layer
[0;33m[docker:18-git][0;m 3091f1b4f1aa: Waiting
[0;33m[docker:18-git][0;m 6ef266ac0949: Waiting
[0;33m[docker:18-git][0;m b2c2c13f4c08: Waiting
[0;33m[docker:18-git][0;m f354b3ae6d74: Waiting
[0;33m[docker:18-git][0;m 6ab2580d9dce: Waiting
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m df20fa9351a1: Pull complete
[0;33m[alpine:3.12.0][0;m df20fa9351a1: Already exists
[0;33m[docker:18-dind][0;m 9d48c3bd43c5: Pulling fs layer
[0;33m[docker:18-dind][0;m 7f94eaf8af20: Pulling fs layer
[0;33m[docker:18-dind][0;m 9fe9984849c1: Pulling fs layer
[0;33m[docker:18-dind][0;m 3091f1b4f1aa: Pulling fs layer
[0;33m[docker:18-dind][0;m 6ef266ac0949: Pulling fs layer
[0;33m[docker:18-dind][0;m b2c2c13f4c08: Pulling fs layer
[0;33m[docker:18-dind][0;m f354b3ae6d74: Pulling fs layer
[0;33m[docker:18-dind][0;m 8f4a6170836f: Pulling fs layer
[0;33m[docker:18-dind][0;m 853fedec02a1: Pulling fs layer
[0;33m[docker:18-dind][0;m a57a377d7e5d: Pulling fs layer
[0;33m[docker:18-dind][0;m ac4bc61da695: Pulling fs layer
[0;33m[docker:18-dind][0;m 3091f1b4f1aa: Waiting
[0;33m[docker:18-dind][0;m 6ef266ac0949: Waiting
[0;33m[docker:18-dind][0;m b2c2c13f4c08: Waiting
[0;33m[docker:18-dind][0;m f354b3ae6d74: Waiting
[0;33m[docker:18-dind][0;m 8f4a6170836f: Waiting
[0;33m[docker:18-dind][0;m 853fedec02a1: Waiting
[0;33m[docker:18-dind][0;m a57a377d7e5d: Waiting
[0;33m[docker:18-dind][0;m ac4bc61da695: Waiting
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m c7e9d654d1d6: Pull complete
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m Digest: sha256:034971042d77defbcd01dbc1c163b5cf03397bc3ab5228b0943e019eb9f5f824
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m Status: Downloaded newer image for registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest
[0;33m[registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest][0;m registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest
[0;33m[docker:18-git][0;m 9fe9984849c1: Verifying Checksum
[0;33m[docker:18-dind][0;m 9fe9984849c1: Download complete
[0;33m[docker:18-git][0;m 9fe9984849c1: Download complete
[0;33m[alpine:3.12.0][0;m Digest: sha256:185518070891758909c9f839cf4ca393ee977ac378609f700f60a771a2dfe321
[0;33m[docker:18-git][0;m 7f94eaf8af20: Download complete
[0;33m[docker:18-dind][0;m 7f94eaf8af20: Download complete
[0;33m[alpine:3.12.0][0;m Status: Downloaded newer image for alpine:3.12.0
[0;33m[alpine:3.12.0][0;m docker.io/library/alpine:3.12.0
[0;33m[docker:18-dind][0;m 9d48c3bd43c5: Download complete
[0;33m[docker:18-git][0;m 9d48c3bd43c5: Verifying Checksum
[0;33m[docker:18-git][0;m 9d48c3bd43c5: Download complete
[0;33m[docker:18-dind][0;m 6ef266ac0949: Verifying Checksum
[0;33m[docker:18-dind][0;m 6ef266ac0949: Download complete
[0;33m[docker:18-git][0;m 6ef266ac0949: Verifying Checksum
[0;33m[docker:18-git][0;m 6ef266ac0949: Download complete
[0;33m[docker:18-git][0;m 9d48c3bd43c5: Pull complete
[0;33m[docker:18-dind][0;m 9d48c3bd43c5: Pull complete
[0;33m[docker:18-dind][0;m b2c2c13f4c08: Download complete
[0;33m[docker:18-git][0;m b2c2c13f4c08: Download complete
[0;33m[docker:18-dind][0;m 7f94eaf8af20: Pull complete
[0;33m[docker:18-git][0;m 7f94eaf8af20: Pull complete
[0;33m[docker:18-dind][0;m f354b3ae6d74: Verifying Checksum
[0;33m[docker:18-git][0;m f354b3ae6d74: Verifying Checksum
[0;33m[docker:18-dind][0;m f354b3ae6d74: Download complete
[0;33m[docker:18-git][0;m f354b3ae6d74: Download complete
[0;33m[docker:18-git][0;m 9fe9984849c1: Pull complete
[0;33m[docker:18-dind][0;m 9fe9984849c1: Pull complete
[0;33m[docker:18-git][0;m 6ab2580d9dce: Verifying Checksum
[0;33m[docker:18-git][0;m 6ab2580d9dce: Download complete
[0;33m[docker:18-dind][0;m 8f4a6170836f: Verifying Checksum
[0;33m[docker:18-dind][0;m 8f4a6170836f: Download complete
[0;33m[docker:18-dind][0;m 853fedec02a1: Verifying Checksum
[0;33m[docker:18-dind][0;m 853fedec02a1: Download complete
[0;33m[docker:18-dind][0;m a57a377d7e5d: Verifying Checksum
[0;33m[docker:18-dind][0;m a57a377d7e5d: Download complete
[0;33m[docker:18-git][0;m 3091f1b4f1aa: Download complete
[0;33m[docker:18-dind][0;m 3091f1b4f1aa: Download complete
[0;33m[docker:18-dind][0;m ac4bc61da695: Verifying Checksum
[0;33m[docker:18-dind][0;m ac4bc61da695: Download complete
[0;33m[docker:18-git][0;m 3091f1b4f1aa: Pull complete
[0;33m[docker:18-dind][0;m 3091f1b4f1aa: Pull complete
[0;33m[docker:18-dind][0;m 6ef266ac0949: Pull complete
[0;33m[docker:18-git][0;m 6ef266ac0949: Pull complete
[0;33m[docker:18-dind][0;m b2c2c13f4c08: Pull complete
[0;33m[docker:18-git][0;m b2c2c13f4c08: Pull complete
[0;33m[docker:18-dind][0;m f354b3ae6d74: Pull complete
[0;33m[docker:18-git][0;m f354b3ae6d74: Pull complete
[0;33m[docker:18-dind][0;m 8f4a6170836f: Pull complete
[0;33m[docker:18-dind][0;m 853fedec02a1: Pull complete
[0;33m[docker:18-dind][0;m a57a377d7e5d: Pull complete
[0;33m[docker:18-dind][0;m ac4bc61da695: Pull complete
[0;33m[docker:18-dind][0;m Digest: sha256:86df3c3573065f2c6f24cd925fd5bc3a0aff899bdf664ff4d2e3ebab26d96bed
[0;33m[docker:18-dind][0;m Status: Downloaded newer image for docker:18-dind
[0;33m[docker:18-dind][0;m docker.io/library/docker:18-dind
[0;33m[docker:18-git][0;m 6ab2580d9dce: Pull complete
[0;33m[docker:18-git][0;m Digest: sha256:5fafa7fc518da8990feb9983a6f0d5069b8e4717e3f922e23e445a50e6c731ec
[0;33m[docker:18-git][0;m Status: Downloaded newer image for docker:18-git
[0;33m[docker:18-git][0;m docker.io/library/docker:18-git
# Executing tests
[1mNumber of definitions: 112[0m
[1mSuite size: 8[0m
[1mSuite index: 2[0m
[1mExecution size: 15[0m
[1mExecution offset: 16[0m
[1m

--- Starting part 0 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestLogLineWithoutSecret
--- PASS: TestLogLineWithoutSecret (0.00s)
    build_logger_test.go:63: PASS:	IsStdout()
    build_logger_test.go:63: PASS:	Write(string)
=== RUN   TestLogLineWithSecret
--- PASS: TestLogLineWithSecret (0.00s)
    build_logger_test.go:84: PASS:	IsStdout()
    build_logger_test.go:84: PASS:	Write(string)
=== RUN   TestLogPrinters
=== RUN   TestLogPrinters/with_entry
time="2021-05-20T15:28:51Z" level=info msg=info printer=test
time="2021-05-20T15:28:51Z" level=warning msg=warning printer=test
time="2021-05-20T15:28:51Z" level=warning msg=softerror printer=test
time="2021-05-20T15:28:51Z" level=error msg=error printer=test
=== RUN   TestLogPrinters/null_writer
--- PASS: TestLogPrinters (0.00s)
    --- PASS: TestLogPrinters/with_entry (0.00s)
        build_logger_test.go:124: PASS:	IsStdout()
        build_logger_test.go:124: PASS:	Write(string)
    --- PASS: TestLogPrinters/null_writer (0.00s)
        build_logger_test.go:124: PASS:	IsStdout()
        build_logger_test.go:124: PASS:	Write(string)
=== RUN   TestBuildPredefinedVariables
=== RUN   TestBuildPredefinedVariables//root/dir1
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestBuildPredefinedVariables//root/dir1" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m=== RUN   TestBuildPredefinedVariables//root/dir2
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestBuildPredefinedVariables//root/dir2" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestBuildPredefinedVariables (0.01s)
    --- PASS: TestBuildPredefinedVariables//root/dir1 (0.01s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
    --- PASS: TestBuildPredefinedVariables//root/dir2 (0.00s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
=== RUN   TestBuildRun
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestBuildRun" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestBuildRun (0.00s)
    build_test.go:1705: PASS:	Prepare(string)
    build_test.go:1705: PASS:	Finish(<nil>)
    build_test.go:1705: PASS:	Cleanup()
    build_test.go:1705: PASS:	Shell()
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1706: PASS:	CanCreate()
    build_test.go:1706: PASS:	GetDefaultShell()
    build_test.go:1706: PASS:	GetFeatures(string)
    build_test.go:1706: PASS:	Create()
=== RUN   TestBuildPanic
=== RUN   TestBuildPanic/shell
=== RUN   TestBuildPanic/run+cleanup
=== RUN   TestBuildPanic/finish
=== RUN   TestBuildPanic/finish+cleanup+shell
=== RUN   TestBuildPanic/run+finish+cleanup
=== RUN   TestBuildPanic/prepare
=== RUN   TestBuildPanic/run
=== RUN   TestBuildPanic/cleanup
--- PASS: TestBuildPanic (0.01s)
    --- PASS: TestBuildPanic/shell (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Cleanup()
    --- PASS: TestBuildPanic/run+cleanup (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Run(string)
        build_test.go:164: PASS:	Cleanup()
    --- PASS: TestBuildPanic/finish (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Run(string)
        build_test.go:164: PASS:	Cleanup()
    --- PASS: TestBuildPanic/finish+cleanup+shell (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Cleanup()
    --- PASS: TestBuildPanic/run+finish+cleanup (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Run(string)
        build_test.go:164: PASS:	Cleanup()
    --- PASS: TestBuildPanic/prepare (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
    --- PASS: TestBuildPanic/run (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Run(string)
        build_test.go:164: PASS:	Cleanup()
    --- PASS: TestBuildPanic/cleanup (0.00s)
        build_test.go:164: PASS:	CanCreate()
        build_test.go:164: PASS:	GetDefaultShell()
        build_test.go:164: PASS:	GetFeatures(string)
        build_test.go:164: PASS:	Create()
        build_test.go:164: PASS:	Prepare(string,string,string)
        build_test.go:164: PASS:	Finish(string)
        build_test.go:164: PASS:	Shell()
        build_test.go:164: PASS:	Run(string)
        build_test.go:164: PASS:	Cleanup()
=== RUN   TestJobImageExposed
=== RUN   TestJobImageExposed/normal_image_exposed
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestJobImageExposed/normal_image_exposed" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m=== RUN   TestJobImageExposed/no_image_specified
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestJobImageExposed/no_image_specified" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m=== RUN   TestJobImageExposed/image_with_variable_expansion
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestJobImageExposed/image_with_variable_expansion" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestJobImageExposed (0.01s)
    --- PASS: TestJobImageExposed/normal_image_exposed (0.01s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
    --- PASS: TestJobImageExposed/no_image_specified (0.00s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
    --- PASS: TestJobImageExposed/image_with_variable_expansion (0.00s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
=== RUN   TestBuildRunNoModifyConfig
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestBuildRunNoModifyConfig" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestBuildRunNoModifyConfig (0.00s)
    build_test.go:1705: PASS:	Prepare(string)
    build_test.go:1705: PASS:	Finish(<nil>)
    build_test.go:1705: PASS:	Cleanup()
    build_test.go:1705: PASS:	Shell()
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1705: PASS:	Run(mock.argumentMatcher)
    build_test.go:1706: PASS:	CanCreate()
    build_test.go:1706: PASS:	GetDefaultShell()
    build_test.go:1706: PASS:	GetFeatures(string)
    build_test.go:1706: PASS:	Create()
=== RUN   TestRetryPrepare
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestRetryPrepare" executor[0;m
[0;m[31;1mERROR: Preparation failed: prepare failed
[0;m[32;1mWill be retried in 0s ...
[0;m[31;1mERROR: Preparation failed: prepare failed
[0;m[32;1mWill be retried in 0s ...
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestRetryPrepare (0.00s)
    build_test.go:272: PASS:	CanCreate()
    build_test.go:272: PASS:	GetDefaultShell()
    build_test.go:272: PASS:	GetFeatures(string)
    build_test.go:272: PASS:	Create()
    build_test.go:272: PASS:	Prepare(string,string,string)
    build_test.go:272: PASS:	Prepare(string,string,string)
    build_test.go:272: PASS:	Cleanup()
    build_test.go:272: PASS:	Shell()
    build_test.go:272: PASS:	Run(string)
    build_test.go:272: PASS:	Finish(<nil>)
=== RUN   TestPrepareFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestPrepareFailure" executor[0;m
[0;m[31;1mERROR: Preparation failed: prepare failed
[0;m[32;1mWill be retried in 0s ...
[0;m[31;1mERROR: Preparation failed: prepare failed
[0;m[32;1mWill be retried in 0s ...
[0;m[31;1mERROR: Preparation failed: prepare failed
[0;m[32;1mWill be retried in 0s ...
[0;m[31;1mERROR: Job failed (system failure): prepare failed
[0;m--- PASS: TestPrepareFailure (0.00s)
    build_test.go:298: PASS:	CanCreate()
    build_test.go:298: PASS:	GetDefaultShell()
    build_test.go:298: PASS:	GetFeatures(string)
    build_test.go:298: PASS:	Create()
    build_test.go:298: PASS:	Prepare(string,string,string)
    build_test.go:298: PASS:	Cleanup()
=== RUN   TestPrepareFailureOnBuildError
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestPrepareFailureOnBuildError" executor[0;m
[0;m[31;1mERROR: Job failed: error
[0;m--- PASS: TestPrepareFailureOnBuildError (0.00s)
    build_test.go:313: PASS:	CanCreate()
    build_test.go:313: PASS:	GetDefaultShell()
    build_test.go:313: PASS:	GetFeatures(string)
    build_test.go:313: PASS:	Create()
    build_test.go:313: PASS:	Prepare(string,string,string)
    build_test.go:313: PASS:	Cleanup()
PASS
coverage: 15.5% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	0.068s	coverage: 15.5% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 1 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestPrepareFailureOnBuildError
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestPrepareFailureOnBuildError" executor[0;m
[0;m[31;1mERROR: Job failed: error
[0;m--- PASS: TestPrepareFailureOnBuildError (0.00s)
    build_test.go:313: PASS:	CanCreate()
    build_test.go:313: PASS:	GetDefaultShell()
    build_test.go:313: PASS:	GetFeatures(string)
    build_test.go:313: PASS:	Create()
    build_test.go:313: PASS:	Prepare(string,string,string)
    build_test.go:313: PASS:	Cleanup()
=== RUN   TestPrepareEnvironmentFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "build-run-prepare-environment-failure-on-build-error" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[31;1mERROR: Job failed (system failure): prepare environment: test-err. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m--- PASS: TestPrepareEnvironmentFailure (0.00s)
    build_test.go:350: PASS:	CanCreate()
    build_test.go:350: PASS:	GetDefaultShell()
    build_test.go:350: PASS:	GetFeatures(string)
    build_test.go:350: PASS:	Create()
    build_test.go:350: PASS:	Prepare(string,string,string)
    build_test.go:350: PASS:	Cleanup()
    build_test.go:350: PASS:	Shell()
    build_test.go:350: PASS:	Run(mock.argumentMatcher)
    build_test.go:350: PASS:	Finish(string)
=== RUN   TestJobFailure
--- PASS: TestJobFailure (0.00s)
    build_test.go:394: PASS:	Write(string)
    build_test.go:394: PASS:	IsStdout()
    build_test.go:394: PASS:	SetCancelFunc(string)
    build_test.go:394: PASS:	SetAbortFunc(string)
    build_test.go:394: PASS:	SetMasked(string)
    build_test.go:394: PASS:	Fail(*common.BuildError,common.JobFailureData)
    build_test.go:394: PASS:	CanCreate()
    build_test.go:394: PASS:	GetDefaultShell()
    build_test.go:394: PASS:	GetFeatures(string)
    build_test.go:394: PASS:	Create()
    build_test.go:394: PASS:	Prepare(string,string,string)
    build_test.go:394: PASS:	Cleanup()
    build_test.go:394: PASS:	Shell()
    build_test.go:394: PASS:	Run(mock.argumentMatcher)
    build_test.go:394: PASS:	Run(string)
    build_test.go:394: PASS:	Run(mock.argumentMatcher)
    build_test.go:394: PASS:	Finish(*common.BuildError)
=== RUN   TestJobFailureOnExecutionTimeout
time="2021-05-20T15:28:55Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
--- PASS: TestJobFailureOnExecutionTimeout (2.00s)
    build_test.go:431: PASS:	Write(string)
    build_test.go:431: PASS:	IsStdout()
    build_test.go:431: PASS:	SetCancelFunc(string)
    build_test.go:431: PASS:	SetAbortFunc(string)
    build_test.go:431: PASS:	SetMasked(string)
    build_test.go:431: PASS:	Fail(string,common.JobFailureData)
    build_test.go:431: PASS:	CanCreate()
    build_test.go:431: PASS:	GetDefaultShell()
    build_test.go:431: PASS:	GetFeatures(string)
    build_test.go:431: PASS:	Create()
    build_test.go:431: PASS:	Prepare(string,string,string)
    build_test.go:431: PASS:	Cleanup()
    build_test.go:431: PASS:	Shell()
    build_test.go:431: PASS:	Run(mock.argumentMatcher)
    build_test.go:431: PASS:	Run(string)
    build_test.go:431: PASS:	Finish(string)
=== RUN   TestRunFailureRunsAfterScriptAndArtifactsOnFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "build-run-run-failure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for failed job[0;m
[0;m[0K[36;1mUploading artifacts for failed job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): build fail
[0;m--- PASS: TestRunFailureRunsAfterScriptAndArtifactsOnFailure (0.00s)
    build_test.go:468: PASS:	CanCreate()
    build_test.go:468: PASS:	GetDefaultShell()
    build_test.go:468: PASS:	GetFeatures(string)
    build_test.go:468: PASS:	Create()
    build_test.go:468: PASS:	Prepare(string,string,string)
    build_test.go:468: PASS:	Cleanup()
    build_test.go:468: PASS:	Shell()
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Run(mock.argumentMatcher)
    build_test.go:468: PASS:	Finish(*errors.errorString)
=== RUN   TestGetSourcesRunFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestGetSourcesRunFailure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mSaving cache for failed job[0;m
[0;m[0K[36;1mUploading artifacts for failed job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): build fail
[0;m--- PASS: TestGetSourcesRunFailure (0.00s)
    build_test.go:491: PASS:	CanCreate()
    build_test.go:491: PASS:	GetDefaultShell()
    build_test.go:491: PASS:	GetFeatures(string)
    build_test.go:491: PASS:	Create()
    build_test.go:491: PASS:	Prepare(string,string,string)
    build_test.go:491: PASS:	Cleanup()
    build_test.go:491: PASS:	Shell()
    build_test.go:491: PASS:	Run(mock.argumentMatcher)
    build_test.go:491: PASS:	Run(mock.argumentMatcher)
    build_test.go:491: PASS:	Run(mock.argumentMatcher)
    build_test.go:491: PASS:	Run(mock.argumentMatcher)
    build_test.go:491: PASS:	Run(mock.argumentMatcher)
    build_test.go:491: PASS:	Finish(*errors.errorString)
=== RUN   TestArtifactDownloadRunFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestArtifactDownloadRunFailure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mSaving cache for failed job[0;m
[0;m[0K[36;1mUploading artifacts for failed job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): build fail
[0;m--- PASS: TestArtifactDownloadRunFailure (0.00s)
    build_test.go:516: PASS:	CanCreate()
    build_test.go:516: PASS:	GetDefaultShell()
    build_test.go:516: PASS:	GetFeatures(string)
    build_test.go:516: PASS:	Create()
    build_test.go:516: PASS:	Prepare(string,string,string)
    build_test.go:516: PASS:	Cleanup()
    build_test.go:516: PASS:	Shell()
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Run(mock.argumentMatcher)
    build_test.go:516: PASS:	Finish(*errors.errorString)
=== RUN   TestArtifactUploadRunFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestArtifactUploadRunFailure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): upload fail
[0;m--- PASS: TestArtifactUploadRunFailure (0.00s)
    build_test.go:550: PASS:	CanCreate()
    build_test.go:550: PASS:	GetDefaultShell()
    build_test.go:550: PASS:	GetFeatures(string)
    build_test.go:550: PASS:	Create()
    build_test.go:550: PASS:	Prepare(string,string,string)
    build_test.go:550: PASS:	Cleanup()
    build_test.go:550: PASS:	Shell()
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Run(mock.argumentMatcher)
    build_test.go:550: PASS:	Finish(*errors.errorString)
=== RUN   TestArchiveCacheOnScriptFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestArchiveCacheOnScriptFailure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for failed job[0;m
[0;m[0K[36;1mUploading artifacts for failed job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): script failure
[0;m--- PASS: TestArchiveCacheOnScriptFailure (0.00s)
    build_test.go:576: PASS:	CanCreate()
    build_test.go:576: PASS:	GetDefaultShell()
    build_test.go:576: PASS:	GetFeatures(string)
    build_test.go:576: PASS:	Create()
    build_test.go:576: PASS:	Prepare(string,string,string)
    build_test.go:576: PASS:	Cleanup()
    build_test.go:576: PASS:	Shell()
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Run(mock.argumentMatcher)
    build_test.go:576: PASS:	Finish(*errors.errorString)
=== RUN   TestUploadArtifactsOnArchiveCacheFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestUploadArtifactsOnArchiveCacheFailure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): cache failure
[0;m--- PASS: TestUploadArtifactsOnArchiveCacheFailure (0.00s)
    build_test.go:602: PASS:	CanCreate()
    build_test.go:602: PASS:	GetDefaultShell()
    build_test.go:602: PASS:	GetFeatures(string)
    build_test.go:602: PASS:	Create()
    build_test.go:602: PASS:	Prepare(string,string,string)
    build_test.go:602: PASS:	Cleanup()
    build_test.go:602: PASS:	Shell()
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Run(mock.argumentMatcher)
    build_test.go:602: PASS:	Finish(*errors.errorString)
PASS
coverage: 14.9% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	2.052s	coverage: 14.9% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 2 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestRestoreCacheRunFailure
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestRestoreCacheRunFailure" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mSaving cache for failed job[0;m
[0;m[0K[36;1mUploading artifacts for failed job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[31;1mERROR: Job failed (system failure): build fail
[0;m--- PASS: TestRestoreCacheRunFailure (0.01s)
    build_test.go:626: PASS:	CanCreate()
    build_test.go:626: PASS:	GetDefaultShell()
    build_test.go:626: PASS:	GetFeatures(string)
    build_test.go:626: PASS:	Create()
    build_test.go:626: PASS:	Prepare(string,string,string)
    build_test.go:626: PASS:	Cleanup()
    build_test.go:626: PASS:	Shell()
    build_test.go:626: PASS:	Run(mock.argumentMatcher)
    build_test.go:626: PASS:	Run(mock.argumentMatcher)
    build_test.go:626: PASS:	Run(mock.argumentMatcher)
    build_test.go:626: PASS:	Run(mock.argumentMatcher)
    build_test.go:626: PASS:	Run(mock.argumentMatcher)
    build_test.go:626: PASS:	Run(mock.argumentMatcher)
    build_test.go:626: PASS:	Finish(*errors.errorString)
=== RUN   TestRunWrongAttempts
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestRunWrongAttempts" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mSaving cache for failed job[0;m
[0;m[0K[36;1mUploading artifacts for failed job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;mtime="2021-05-20T15:28:57Z" level=warning msg="Error while executing file based variables removal script" error="number of attempts out of the range [1, 10] for stage: get_sources" job=0 project=0
[31;1mERROR: Job failed (system failure): number of attempts out of the range [1, 10] for stage: get_sources
[0;m--- PASS: TestRunWrongAttempts (0.00s)
    build_test.go:651: PASS:	Prepare(string,string,string)
    build_test.go:651: PASS:	Cleanup()
    build_test.go:651: PASS:	Shell()
    build_test.go:651: PASS:	Run(string)
    build_test.go:651: PASS:	Run(string)
    build_test.go:651: PASS:	Finish(*errors.errorString)
    build_test.go:651: PASS:	CanCreate()
    build_test.go:651: PASS:	GetDefaultShell()
    build_test.go:651: PASS:	GetFeatures(string)
    build_test.go:651: PASS:	Create()
=== RUN   TestRunSuccessOnSecondAttempt
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestRunSuccessOnSecondAttempt" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestRunSuccessOnSecondAttempt (0.00s)
    build_test.go:673: PASS:	CanCreate()
    build_test.go:673: PASS:	GetDefaultShell()
    build_test.go:673: PASS:	GetFeatures(string)
    build_test.go:673: PASS:	Create()
=== RUN   TestDebugTrace
=== RUN   TestDebugTrace/variable_set_to_true
=== RUN   TestDebugTrace/variable_set_to_a_non-bool_value
=== RUN   TestDebugTrace/variable_set_to_true_and_feature_disabled_from_configuration
=== RUN   TestDebugTrace/variable_not_set
=== RUN   TestDebugTrace/variable_set_to_false
--- PASS: TestDebugTrace (0.00s)
    --- PASS: TestDebugTrace/variable_set_to_true (0.00s)
    --- PASS: TestDebugTrace/variable_set_to_a_non-bool_value (0.00s)
    --- PASS: TestDebugTrace/variable_set_to_true_and_feature_disabled_from_configuration (0.00s)
    --- PASS: TestDebugTrace/variable_not_set (0.00s)
    --- PASS: TestDebugTrace/variable_set_to_false (0.00s)
=== RUN   TestDefaultEnvVariables
=== RUN   TestDefaultEnvVariables/Windows_UNC-style_BuildDir_(extended-length_path_support)
=== RUN   TestDefaultEnvVariables/Windows_UNC-style_BuildDir
=== RUN   TestDefaultEnvVariables/Windows-style_BuildDir_(CMD_or_PS)
=== RUN   TestDefaultEnvVariables/Windows-style_BuildDir_with_forward_slashes_and_drive_letter
=== RUN   TestDefaultEnvVariables/UNIX-style_BuildDir
=== RUN   TestDefaultEnvVariables/Windows-style_BuildDir_in_MSYS_bash_executor_and_drive_letter)
--- PASS: TestDefaultEnvVariables (0.00s)
    --- PASS: TestDefaultEnvVariables/Windows_UNC-style_BuildDir_(extended-length_path_support) (0.00s)
    --- PASS: TestDefaultEnvVariables/Windows_UNC-style_BuildDir (0.00s)
    --- PASS: TestDefaultEnvVariables/Windows-style_BuildDir_(CMD_or_PS) (0.00s)
    --- PASS: TestDefaultEnvVariables/Windows-style_BuildDir_with_forward_slashes_and_drive_letter (0.00s)
    --- PASS: TestDefaultEnvVariables/UNIX-style_BuildDir (0.00s)
    --- PASS: TestDefaultEnvVariables/Windows-style_BuildDir_in_MSYS_bash_executor_and_drive_letter) (0.00s)
=== RUN   TestSharedEnvVariables
=== RUN   TestSharedEnvVariables/Value:true
=== RUN   TestSharedEnvVariables/Value:false
--- PASS: TestSharedEnvVariables (0.00s)
    --- PASS: TestSharedEnvVariables/Value:true (0.00s)
    --- PASS: TestSharedEnvVariables/Value:false (0.00s)
=== RUN   TestGetRemoteURL
--- PASS: TestGetRemoteURL (0.00s)
=== RUN   TestIsFeatureFlagOn
=== RUN   TestIsFeatureFlagOn/invalid_value
time="2021-05-20T15:28:57Z" level=error msg="Error while parsing the value of feature flag" error="strconv.ParseBool: parsing \"test\": invalid syntax" job=0 name=FF_TEST_FEATURE project=0 value=test
=== RUN   TestIsFeatureFlagOn/feature_flag_set_inside_config.toml_take_precedence
=== RUN   TestIsFeatureFlagOn/no_value
=== RUN   TestIsFeatureFlagOn/true
=== RUN   TestIsFeatureFlagOn/1
=== RUN   TestIsFeatureFlagOn/false
=== RUN   TestIsFeatureFlagOn/0
--- PASS: TestIsFeatureFlagOn (0.00s)
    --- PASS: TestIsFeatureFlagOn/invalid_value (0.00s)
    --- PASS: TestIsFeatureFlagOn/feature_flag_set_inside_config.toml_take_precedence (0.00s)
    --- PASS: TestIsFeatureFlagOn/no_value (0.00s)
    --- PASS: TestIsFeatureFlagOn/true (0.00s)
    --- PASS: TestIsFeatureFlagOn/1 (0.00s)
    --- PASS: TestIsFeatureFlagOn/false (0.00s)
    --- PASS: TestIsFeatureFlagOn/0 (0.00s)
=== RUN   TestIsFeatureFlagOn_SetWithRunnerVariables
=== RUN   TestIsFeatureFlagOn_SetWithRunnerVariables/it_has_default_value_of_FF
=== RUN   TestIsFeatureFlagOn_SetWithRunnerVariables/it_enables_FF
=== RUN   TestIsFeatureFlagOn_SetWithRunnerVariables/it_disable_FF
--- PASS: TestIsFeatureFlagOn_SetWithRunnerVariables (0.00s)
    --- PASS: TestIsFeatureFlagOn_SetWithRunnerVariables/it_has_default_value_of_FF (0.00s)
    --- PASS: TestIsFeatureFlagOn_SetWithRunnerVariables/it_enables_FF (0.00s)
    --- PASS: TestIsFeatureFlagOn_SetWithRunnerVariables/it_disable_FF (0.00s)
=== RUN   TestIsFeatureFlagOn_Precedence
=== RUN   TestIsFeatureFlagOn_Precedence/config_takes_precedence_over_job_variable
=== RUN   TestIsFeatureFlagOn_Precedence/config_takes_precedence_over_configured_environments
=== RUN   TestIsFeatureFlagOn_Precedence/variable_defined_at_job_take_precedence_over_configured_environments
--- PASS: TestIsFeatureFlagOn_Precedence (0.00s)
    --- PASS: TestIsFeatureFlagOn_Precedence/config_takes_precedence_over_job_variable (0.00s)
    --- PASS: TestIsFeatureFlagOn_Precedence/config_takes_precedence_over_configured_environments (0.00s)
    --- PASS: TestIsFeatureFlagOn_Precedence/variable_defined_at_job_take_precedence_over_configured_environments (0.00s)
PASS
coverage: 14.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	0.032s	coverage: 14.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 3 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestStartBuild
=== RUN   TestStartBuild/invalid_GIT_CLONE_PATH_was_specified
=== RUN   TestStartBuild/no_job_specific_build_dir_with_no_shared_dir
=== RUN   TestStartBuild/no_job_specified_build_dir_with_shared_dir
=== RUN   TestStartBuild/valid_GIT_CLONE_PATH_was_specified
=== RUN   TestStartBuild/valid_GIT_CLONE_PATH_using_CI_BUILDS_DIR_was_specified
=== RUN   TestStartBuild/out-of-bounds_GIT_CLONE_PATH_was_specified
=== RUN   TestStartBuild/custom_build_disabled
--- PASS: TestStartBuild (0.00s)
    --- PASS: TestStartBuild/invalid_GIT_CLONE_PATH_was_specified (0.00s)
    --- PASS: TestStartBuild/no_job_specific_build_dir_with_no_shared_dir (0.00s)
    --- PASS: TestStartBuild/no_job_specified_build_dir_with_shared_dir (0.00s)
    --- PASS: TestStartBuild/valid_GIT_CLONE_PATH_was_specified (0.00s)
    --- PASS: TestStartBuild/valid_GIT_CLONE_PATH_using_CI_BUILDS_DIR_was_specified (0.00s)
    --- PASS: TestStartBuild/out-of-bounds_GIT_CLONE_PATH_was_specified (0.00s)
    --- PASS: TestStartBuild/custom_build_disabled (0.00s)
=== RUN   TestSkipBuildStageFeatureFlag
=== RUN   TestSkipBuildStageFeatureFlag/true
=== RUN   TestSkipBuildStageFeatureFlag/false
--- PASS: TestSkipBuildStageFeatureFlag (0.00s)
    --- PASS: TestSkipBuildStageFeatureFlag/true (0.00s)
        build_test.go:1188: PASS:	Shell()
        build_test.go:1188: PASS:	Run(mock.argumentMatcher)
    --- PASS: TestSkipBuildStageFeatureFlag/false (0.00s)
        build_test.go:1188: PASS:	Shell()
        build_test.go:1188: PASS:	Run(mock.argumentMatcher)
    build_test.go:1190: PASS:	GetName()
    build_test.go:1190: PASS:	GenerateScript(string,string)
    build_test.go:1190: PASS:	GenerateScript(string,string)
=== RUN   TestWaitForTerminal
=== RUN   TestWaitForTerminal/Cancel_build
[32;1mTerminal is connected, will time out in 1h0m0s...
[0;m=== RUN   TestWaitForTerminal/Terminal_Timeout
[32;1mTerminal is connected, will time out in 1s...
[0;m[32;1mterminal session timed out (maximum time allowed - 1s)
[0;mtime="2021-05-20T15:29:00Z" level=warning msg="Closed active terminal connection" uri=/session/774b71d624019a957cb7c22445414e8820c421ffb00b7e8e8d708ff6bf5ca3f1
=== RUN   TestWaitForTerminal/System_Interrupt
[32;1mTerminal is connected, will time out in 1h0m0s...
[0;m[32;1mTerminal disconnected
[0;m=== RUN   TestWaitForTerminal/Terminal_Disconnect
[32;1mTerminal is connected, will time out in 1h0m0s...
[0;m[32;1mTerminal disconnected
[0;m--- PASS: TestWaitForTerminal (1.01s)
    --- PASS: TestWaitForTerminal/Cancel_build (0.00s)
        build_test.go:1313: PASS:	Connect()
        build_test.go:1313: PASS:	Close()
        build_test.go:1313: PASS:	Start(string,string,string,string)
    --- PASS: TestWaitForTerminal/Terminal_Timeout (1.00s)
        build_test.go:1313: PASS:	Connect()
        build_test.go:1313: PASS:	Close()
        build_test.go:1313: PASS:	Start(string,string,string,string)
    --- PASS: TestWaitForTerminal/System_Interrupt (0.00s)
        build_test.go:1313: PASS:	Connect()
        build_test.go:1313: PASS:	Close()
        build_test.go:1313: PASS:	Start(string,string,string,string)
    --- PASS: TestWaitForTerminal/Terminal_Disconnect (0.00s)
        build_test.go:1313: PASS:	Connect()
        build_test.go:1313: PASS:	Close()
        build_test.go:1313: PASS:	Start(string,string,string,string)
=== RUN   TestBuild_IsLFSSmudgeDisabled
=== RUN   TestBuild_IsLFSSmudgeDisabled/variable_set_to_1
=== RUN   TestBuild_IsLFSSmudgeDisabled/variable_set_to_0
=== RUN   TestBuild_IsLFSSmudgeDisabled/variable_not_set
=== RUN   TestBuild_IsLFSSmudgeDisabled/variable_empty
=== RUN   TestBuild_IsLFSSmudgeDisabled/variable_set_to_true
=== RUN   TestBuild_IsLFSSmudgeDisabled/variable_set_to_false
--- PASS: TestBuild_IsLFSSmudgeDisabled (0.00s)
    --- PASS: TestBuild_IsLFSSmudgeDisabled/variable_set_to_1 (0.00s)
    --- PASS: TestBuild_IsLFSSmudgeDisabled/variable_set_to_0 (0.00s)
    --- PASS: TestBuild_IsLFSSmudgeDisabled/variable_not_set (0.00s)
    --- PASS: TestBuild_IsLFSSmudgeDisabled/variable_empty (0.00s)
    --- PASS: TestBuild_IsLFSSmudgeDisabled/variable_set_to_true (0.00s)
    --- PASS: TestBuild_IsLFSSmudgeDisabled/variable_set_to_false (0.00s)
=== RUN   TestGitCleanFlags
=== RUN   TestGitCleanFlags/empty_clean_flags
=== RUN   TestGitCleanFlags/use_custom_flags
=== RUN   TestGitCleanFlags/use_custom_flags_with_multiple_arguments
=== RUN   TestGitCleanFlags/disabled
--- PASS: TestGitCleanFlags (0.00s)
    --- PASS: TestGitCleanFlags/empty_clean_flags (0.00s)
    --- PASS: TestGitCleanFlags/use_custom_flags (0.00s)
    --- PASS: TestGitCleanFlags/use_custom_flags_with_multiple_arguments (0.00s)
    --- PASS: TestGitCleanFlags/disabled (0.00s)
=== RUN   TestGitFetchFlags
=== RUN   TestGitFetchFlags/use_custom_flags
=== RUN   TestGitFetchFlags/use_custom_flags_with_multiple_arguments
=== RUN   TestGitFetchFlags/disabled
=== RUN   TestGitFetchFlags/empty_fetch_flags
--- PASS: TestGitFetchFlags (0.00s)
    --- PASS: TestGitFetchFlags/use_custom_flags (0.00s)
    --- PASS: TestGitFetchFlags/use_custom_flags_with_multiple_arguments (0.00s)
    --- PASS: TestGitFetchFlags/disabled (0.00s)
    --- PASS: TestGitFetchFlags/empty_fetch_flags (0.00s)
=== RUN   TestDefaultVariables
=== RUN   TestDefaultVariables/get_default_CI_SERVER_value
=== RUN   TestDefaultVariables/get_default_CI_PROJECT_DIR_value
=== RUN   TestDefaultVariables/get_overwritten_CI_PROJECT_DIR_value
--- PASS: TestDefaultVariables (0.00s)
    --- PASS: TestDefaultVariables/get_default_CI_SERVER_value (0.00s)
    --- PASS: TestDefaultVariables/get_default_CI_PROJECT_DIR_value (0.00s)
    --- PASS: TestDefaultVariables/get_overwritten_CI_PROJECT_DIR_value (0.00s)
=== RUN   TestBuildFinishTimeout
=== RUN   TestBuildFinishTimeout/channel_returns_first
=== RUN   TestBuildFinishTimeout/timeout_returns_first
--- PASS: TestBuildFinishTimeout (0.01s)
    --- PASS: TestBuildFinishTimeout/channel_returns_first (0.00s)
    --- PASS: TestBuildFinishTimeout/timeout_returns_first (0.01s)
=== RUN   TestProjectUniqueName
=== RUN   TestProjectUniqueName/project_non_rfc1132_unique_name
=== RUN   TestProjectUniqueName/project_normal_unique_name
--- PASS: TestProjectUniqueName (0.00s)
    --- PASS: TestProjectUniqueName/project_non_rfc1132_unique_name (0.00s)
    --- PASS: TestProjectUniqueName/project_normal_unique_name (0.00s)
=== RUN   TestBuildStages
=== RUN   TestBuildStages/script_only_build
=== RUN   TestBuildStages/multistep_build
--- PASS: TestBuildStages (0.00s)
    --- PASS: TestBuildStages/script_only_build (0.00s)
    --- PASS: TestBuildStages/multistep_build (0.00s)
PASS
coverage: 11.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	1.041s	coverage: 11.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 4 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestBuild_GetExecutorJobSectionAttempts
=== RUN   TestBuild_GetExecutorJobSectionAttempts/#00
=== RUN   TestBuild_GetExecutorJobSectionAttempts/3
=== RUN   TestBuild_GetExecutorJobSectionAttempts/0
=== RUN   TestBuild_GetExecutorJobSectionAttempts/99
--- PASS: TestBuild_GetExecutorJobSectionAttempts (0.00s)
    --- PASS: TestBuild_GetExecutorJobSectionAttempts/#00 (0.00s)
    --- PASS: TestBuild_GetExecutorJobSectionAttempts/3 (0.00s)
    --- PASS: TestBuild_GetExecutorJobSectionAttempts/0 (0.00s)
    --- PASS: TestBuild_GetExecutorJobSectionAttempts/99 (0.00s)
=== RUN   TestBuild_getFeatureFlagInfo
=== RUN   TestBuild_getFeatureFlagInfo/true
=== RUN   TestBuild_getFeatureFlagInfo/1
=== RUN   TestBuild_getFeatureFlagInfo/invalid
time="2021-05-20T15:29:02Z" level=error msg="Error while parsing the value of feature flag" error="strconv.ParseBool: parsing \"invalid\": invalid syntax" job=0 name=FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION project=0 value=invalid
--- PASS: TestBuild_getFeatureFlagInfo (0.00s)
    --- PASS: TestBuild_getFeatureFlagInfo/true (0.00s)
    --- PASS: TestBuild_getFeatureFlagInfo/1 (0.00s)
    --- PASS: TestBuild_getFeatureFlagInfo/invalid (0.00s)
=== RUN   TestSecretsResolving
=== RUN   TestSecretsResolving/error_on_creating_resolver
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[31;1mERROR: Job failed (system failure): creating secrets resolver: assert.AnError general error for testing
[0;m=== RUN   TestSecretsResolving/error_on_secrets_resolving
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[31;1mERROR: Job failed (system failure): resolving secrets: assert.AnError general error for testing
[0;m=== RUN   TestSecretsResolving/secrets_resolved
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestSecretsResolving/secrets_resolved" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m=== RUN   TestSecretsResolving/secrets_not_present
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "TestSecretsResolving/secrets_not_present" executor[0;m
[0;m[0K[36;1mPreparing environment[0;m
[0;m[0K[36;1mGetting source from Git repository[0;m
[0;m[0K[36;1mRestoring cache[0;m
[0;m[0K[36;1mDownloading artifacts[0;m
[0;m[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0K[36;1mRunning after_script[0;m
[0;m[0K[36;1mSaving cache for successful job[0;m
[0;m[0K[36;1mUploading artifacts for successful job[0;m
[0;m[0K[36;1mCleaning up file based variables[0;m
[0;m[32;1mJob succeeded
[0;m--- PASS: TestSecretsResolving (0.01s)
    --- PASS: TestSecretsResolving/error_on_creating_resolver (0.00s)
        build_test.go:1787: PASS:	CanCreate()
        build_test.go:1787: PASS:	GetDefaultShell()
        build_test.go:1787: PASS:	GetFeatures(string)
    --- PASS: TestSecretsResolving/error_on_secrets_resolving (0.00s)
        build_test.go:1787: PASS:	CanCreate()
        build_test.go:1787: PASS:	GetDefaultShell()
        build_test.go:1787: PASS:	GetFeatures(string)
        build_test.go:1877: PASS:	Resolve(common.Secrets)
    --- PASS: TestSecretsResolving/secrets_resolved (0.00s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
        build_test.go:1880: PASS:	Resolve(common.Secrets)
    --- PASS: TestSecretsResolving/secrets_not_present (0.00s)
        build_test.go:1705: PASS:	Prepare(string)
        build_test.go:1705: PASS:	Finish(<nil>)
        build_test.go:1705: PASS:	Cleanup()
        build_test.go:1705: PASS:	Shell()
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1705: PASS:	Run(mock.argumentMatcher)
        build_test.go:1706: PASS:	CanCreate()
        build_test.go:1706: PASS:	GetDefaultShell()
        build_test.go:1706: PASS:	GetFeatures(string)
        build_test.go:1706: PASS:	Create()
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/SecretKey_is_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/AccessKey_is_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/ServerAddress_is_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/ServerAddress_&_AccessKey_are_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/ServerAddress_&_SecretKey_are_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/Nothing_is_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/Everything_is_empty
=== RUN   TestCacheS3Config_ShouldUseIAMCredentials/Both_AccessKey_&_SecretKey_are_empty
--- PASS: TestCacheS3Config_ShouldUseIAMCredentials (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/SecretKey_is_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/AccessKey_is_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/ServerAddress_is_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/ServerAddress_&_AccessKey_are_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/ServerAddress_&_SecretKey_are_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/Nothing_is_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/Everything_is_empty (0.00s)
    --- PASS: TestCacheS3Config_ShouldUseIAMCredentials/Both_AccessKey_&_SecretKey_are_empty (0.00s)
=== RUN   TestConfigParse
=== RUN   TestConfigParse/parse_Service_as_table_int_value_name
=== RUN   TestConfigParse/parse_Service_as_table_with_only_alias
=== RUN   TestConfigParse/parse_Service_runners.docker_and_runners.docker.services
=== RUN   TestConfigParse/check_that_GracefulKillTimeout_and_ForceKillTimeout_can't_be_set
=== RUN   TestConfigParse/setting_DNS_policy_to_cluster-first-with-host-net
=== RUN   TestConfigParse/parse_Service_as_table
=== RUN   TestConfigParse/check_node_affinities
=== RUN   TestConfigParse/setting_DNS_policy_to_default
=== RUN   TestConfigParse/setting_DNS_policy_to_cluster-first
=== RUN   TestConfigParse/fail_setting_DNS_policy_to_invalid_value
=== RUN   TestConfigParse/fail_setting_DNS_policy_to_empty_value_returns_default_value
=== RUN   TestConfigParse/parse_Service_as_table_int_value_alias
=== RUN   TestConfigParse/parse_Service_as_table_with_only_name
=== RUN   TestConfigParse/setting_DNS_policy_to_none
--- PASS: TestConfigParse (0.00s)
    --- PASS: TestConfigParse/parse_Service_as_table_int_value_name (0.00s)
    --- PASS: TestConfigParse/parse_Service_as_table_with_only_alias (0.00s)
    --- PASS: TestConfigParse/parse_Service_runners.docker_and_runners.docker.services (0.00s)
    --- PASS: TestConfigParse/check_that_GracefulKillTimeout_and_ForceKillTimeout_can't_be_set (0.00s)
    --- PASS: TestConfigParse/setting_DNS_policy_to_cluster-first-with-host-net (0.00s)
    --- PASS: TestConfigParse/parse_Service_as_table (0.00s)
    --- PASS: TestConfigParse/check_node_affinities (0.00s)
    --- PASS: TestConfigParse/setting_DNS_policy_to_default (0.00s)
    --- PASS: TestConfigParse/setting_DNS_policy_to_cluster-first (0.00s)
    --- PASS: TestConfigParse/fail_setting_DNS_policy_to_invalid_value (0.00s)
    --- PASS: TestConfigParse/fail_setting_DNS_policy_to_empty_value_returns_default_value (0.00s)
    --- PASS: TestConfigParse/parse_Service_as_table_int_value_alias (0.00s)
    --- PASS: TestConfigParse/parse_Service_as_table_with_only_name (0.00s)
    --- PASS: TestConfigParse/setting_DNS_policy_to_none (0.00s)
=== RUN   TestKubernetesHostAliases
=== RUN   TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_empty_list
=== RUN   TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_unique_ips
=== RUN   TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_duplicated_ip
=== RUN   TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_duplicated_hostname
--- PASS: TestKubernetesHostAliases (0.00s)
    --- PASS: TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_empty_list (0.00s)
    --- PASS: TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_unique_ips (0.00s)
    --- PASS: TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_duplicated_ip (0.00s)
    --- PASS: TestKubernetesHostAliases/parse_Kubernetes_HostAliases_with_duplicated_hostname (0.00s)
=== RUN   TestService_ToImageDefinition
=== RUN   TestService_ToImageDefinition/name_and_alias
=== RUN   TestService_ToImageDefinition/command_specified
=== RUN   TestService_ToImageDefinition/entrypoint_specified
=== RUN   TestService_ToImageDefinition/command_and_entrypoint_specified
=== RUN   TestService_ToImageDefinition/empty_service
=== RUN   TestService_ToImageDefinition/only_name
=== RUN   TestService_ToImageDefinition/only_alias
--- PASS: TestService_ToImageDefinition (0.00s)
    --- PASS: TestService_ToImageDefinition/name_and_alias (0.00s)
    --- PASS: TestService_ToImageDefinition/command_specified (0.00s)
    --- PASS: TestService_ToImageDefinition/entrypoint_specified (0.00s)
    --- PASS: TestService_ToImageDefinition/command_and_entrypoint_specified (0.00s)
    --- PASS: TestService_ToImageDefinition/empty_service (0.00s)
    --- PASS: TestService_ToImageDefinition/only_name (0.00s)
    --- PASS: TestService_ToImageDefinition/only_alias (0.00s)
=== RUN   TestDockerMachine
=== RUN   TestDockerMachine/autoscaling_config_active
=== RUN   TestDockerMachine/autoscaling_overrides_offpeak_config
=== RUN   TestDockerMachine/global_config_only
=== RUN   TestDockerMachine/offpeak_active
=== RUN   TestDockerMachine/offpeak_inactive
=== RUN   TestDockerMachine/offpeak_invalid_format
=== RUN   TestDockerMachine/autoscaling_config_inactive
=== RUN   TestDockerMachine/last_matching_autoscaling_config_is_selected
=== RUN   TestDockerMachine/autoscaling_invalid_period_config
--- PASS: TestDockerMachine (0.00s)
    --- PASS: TestDockerMachine/autoscaling_config_active (0.00s)
    --- PASS: TestDockerMachine/autoscaling_overrides_offpeak_config (0.00s)
    --- PASS: TestDockerMachine/global_config_only (0.00s)
    --- PASS: TestDockerMachine/offpeak_active (0.00s)
    --- PASS: TestDockerMachine/offpeak_inactive (0.00s)
    --- PASS: TestDockerMachine/offpeak_invalid_format (0.00s)
    --- PASS: TestDockerMachine/autoscaling_config_inactive (0.00s)
    --- PASS: TestDockerMachine/last_matching_autoscaling_config_is_selected (0.00s)
    --- PASS: TestDockerMachine/autoscaling_invalid_period_config (0.00s)
=== RUN   TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout
=== RUN   TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout/undefined
=== RUN   TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout/timeouts_lower_than_0
=== RUN   TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout/timeouts_greater_than_0
--- PASS: TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout (0.00s)
    --- PASS: TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout/undefined (0.00s)
    --- PASS: TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout/timeouts_lower_than_0 (0.00s)
    --- PASS: TestRunnerSettings_GetGracefulKillTimeout_GetForceKillTimeout/timeouts_greater_than_0 (0.00s)
=== RUN   TestDockerConfig_GetPullPolicies
=== RUN   TestDockerConfig_GetPullPolicies/empty_pull_policy
=== RUN   TestDockerConfig_GetPullPolicies/empty_string_pull_policy
=== RUN   TestDockerConfig_GetPullPolicies/known_elements_in_pull_policy
=== RUN   TestDockerConfig_GetPullPolicies/invalid_pull_policy
=== RUN   TestDockerConfig_GetPullPolicies/nil_pull_policy
--- PASS: TestDockerConfig_GetPullPolicies (0.00s)
    --- PASS: TestDockerConfig_GetPullPolicies/empty_pull_policy (0.00s)
    --- PASS: TestDockerConfig_GetPullPolicies/empty_string_pull_policy (0.00s)
    --- PASS: TestDockerConfig_GetPullPolicies/known_elements_in_pull_policy (0.00s)
    --- PASS: TestDockerConfig_GetPullPolicies/invalid_pull_policy (0.00s)
    --- PASS: TestDockerConfig_GetPullPolicies/nil_pull_policy (0.00s)
PASS
coverage: 17.8% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	0.033s	coverage: 17.8% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 5 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestKubernetesConfig_GetPullPolicies
=== RUN   TestKubernetesConfig_GetPullPolicies/nil_pull_policy
=== RUN   TestKubernetesConfig_GetPullPolicies/empty_pull_policy
=== RUN   TestKubernetesConfig_GetPullPolicies/empty_string_pull_policy
=== RUN   TestKubernetesConfig_GetPullPolicies/known_elements_in_pull_policy
=== RUN   TestKubernetesConfig_GetPullPolicies/invalid_pull_policy
--- PASS: TestKubernetesConfig_GetPullPolicies (0.00s)
    --- PASS: TestKubernetesConfig_GetPullPolicies/nil_pull_policy (0.00s)
    --- PASS: TestKubernetesConfig_GetPullPolicies/empty_pull_policy (0.00s)
    --- PASS: TestKubernetesConfig_GetPullPolicies/empty_string_pull_policy (0.00s)
    --- PASS: TestKubernetesConfig_GetPullPolicies/known_elements_in_pull_policy (0.00s)
    --- PASS: TestKubernetesConfig_GetPullPolicies/invalid_pull_policy (0.00s)
=== RUN   TestStringOrArray_UnmarshalTOML
=== RUN   TestStringOrArray_UnmarshalTOML/no_fields
=== RUN   TestStringOrArray_UnmarshalTOML/slice_with_invalid_single_value
=== RUN   TestStringOrArray_UnmarshalTOML/slice_with_mixed_values
=== RUN   TestStringOrArray_UnmarshalTOML/slice_with_invalid_values
=== RUN   TestStringOrArray_UnmarshalTOML/empty_string_or_array
=== RUN   TestStringOrArray_UnmarshalTOML/string
=== RUN   TestStringOrArray_UnmarshalTOML/valid_slice_with_multiple_values
--- PASS: TestStringOrArray_UnmarshalTOML (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/no_fields (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/slice_with_invalid_single_value (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/slice_with_mixed_values (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/slice_with_invalid_values (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/empty_string_or_array (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/string (0.00s)
    --- PASS: TestStringOrArray_UnmarshalTOML/valid_slice_with_multiple_values (0.00s)
=== RUN   TestRunnerSettings_IsFeatureFlagOn
=== RUN   TestRunnerSettings_IsFeatureFlagOn/feature_flag_not_configured
=== RUN   TestRunnerSettings_IsFeatureFlagOn/feature_flag_not_configured_but_feature_flag_default_is_true
=== RUN   TestRunnerSettings_IsFeatureFlagOn/feature_flag_on
=== RUN   TestRunnerSettings_IsFeatureFlagOn/feature_flag_off
--- PASS: TestRunnerSettings_IsFeatureFlagOn (0.00s)
    --- PASS: TestRunnerSettings_IsFeatureFlagOn/feature_flag_not_configured (0.00s)
    --- PASS: TestRunnerSettings_IsFeatureFlagOn/feature_flag_not_configured_but_feature_flag_default_is_true (0.00s)
    --- PASS: TestRunnerSettings_IsFeatureFlagOn/feature_flag_on (0.00s)
    --- PASS: TestRunnerSettings_IsFeatureFlagOn/feature_flag_off (0.00s)
=== RUN   TestBuildErrorIs
=== RUN   TestBuildErrorIs/two_build_errors_with_the_same_failure_reason
=== RUN   TestBuildErrorIs/different_failure_reasons
=== RUN   TestBuildErrorIs/not_matching_errors
--- PASS: TestBuildErrorIs (0.00s)
    --- PASS: TestBuildErrorIs/two_build_errors_with_the_same_failure_reason (0.00s)
    --- PASS: TestBuildErrorIs/different_failure_reasons (0.00s)
    --- PASS: TestBuildErrorIs/not_matching_errors (0.00s)
=== RUN   TestUnwrapBuildError
--- PASS: TestUnwrapBuildError (0.00s)
=== RUN   TestCacheCheckPolicy
--- PASS: TestCacheCheckPolicy (0.00s)
=== RUN   TestShouldCache
=== RUN   TestShouldCache/jobSuccess=true,when=on_success
=== RUN   TestShouldCache/jobSuccess=true,when=always
=== RUN   TestShouldCache/jobSuccess=true,when=on_failure
=== RUN   TestShouldCache/jobSuccess=false,when=on_success
=== RUN   TestShouldCache/jobSuccess=false,when=always
=== RUN   TestShouldCache/jobSuccess=false,when=on_failure
--- PASS: TestShouldCache (0.00s)
    --- PASS: TestShouldCache/jobSuccess=true,when=on_success (0.00s)
    --- PASS: TestShouldCache/jobSuccess=true,when=always (0.00s)
    --- PASS: TestShouldCache/jobSuccess=true,when=on_failure (0.00s)
    --- PASS: TestShouldCache/jobSuccess=false,when=on_success (0.00s)
    --- PASS: TestShouldCache/jobSuccess=false,when=always (0.00s)
    --- PASS: TestShouldCache/jobSuccess=false,when=on_failure (0.00s)
=== RUN   TestSecrets_expandVariables
=== RUN   TestSecrets_expandVariables/no_secrets_defined
=== RUN   TestSecrets_expandVariables/nil_vault_secret
=== RUN   TestSecrets_expandVariables/vault_missing_data
=== RUN   TestSecrets_expandVariables/vault_missing_jwt_data
=== RUN   TestSecrets_expandVariables/vault_secret_defined
--- PASS: TestSecrets_expandVariables (0.00s)
    --- PASS: TestSecrets_expandVariables/no_secrets_defined (0.00s)
    --- PASS: TestSecrets_expandVariables/nil_vault_secret (0.00s)
    --- PASS: TestSecrets_expandVariables/vault_missing_data (0.00s)
    --- PASS: TestSecrets_expandVariables/vault_missing_jwt_data (0.00s)
    --- PASS: TestSecrets_expandVariables/vault_secret_defined (0.00s)
=== RUN   TestJobResponse_JobURL
--- PASS: TestJobResponse_JobURL (0.00s)
=== RUN   TestDefaultResolver_Resolve
=== RUN   TestDefaultResolver_Resolve/secret_resolved_properly
=== RUN   TestDefaultResolver_Resolve/no_supported_resolvers_present
=== RUN   TestDefaultResolver_Resolve/resolver_creation_error
=== RUN   TestDefaultResolver_Resolve/no_secrets_to_resolve
=== RUN   TestDefaultResolver_Resolve/error_on_secret_resolving
--- PASS: TestDefaultResolver_Resolve (0.00s)
    --- PASS: TestDefaultResolver_Resolve/secret_resolved_properly (0.00s)
        secrets_test.go:39: PASS:	Println(string)
        secrets_test.go:149: PASS:	IsSupported()
        secrets_test.go:149: PASS:	Name()
        secrets_test.go:149: PASS:	Resolve()
        secrets_test.go:149: PASS:	IsSupported()
    --- PASS: TestDefaultResolver_Resolve/no_supported_resolvers_present (0.00s)
        secrets_test.go:92: PASS:	Println(string)
        secrets_test.go:92: PASS:	Warningln(string)
        secrets_test.go:149: PASS:	IsSupported()
        secrets_test.go:149: PASS:	Name()
        secrets_test.go:149: PASS:	IsSupported()
    --- PASS: TestDefaultResolver_Resolve/resolver_creation_error (0.00s)
    --- PASS: TestDefaultResolver_Resolve/no_secrets_to_resolve (0.00s)
        secrets_test.go:39: PASS:	Println(string)
    --- PASS: TestDefaultResolver_Resolve/error_on_secret_resolving (0.00s)
        secrets_test.go:39: PASS:	Println(string)
        secrets_test.go:144: PASS:	IsSupported()
        secrets_test.go:144: PASS:	Name()
        secrets_test.go:144: PASS:	Resolve()
        secrets_test.go:144: PASS:	IsSupported()
PASS
coverage: 4.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	0.019s	coverage: 4.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 6 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestVariablesJSON
--- PASS: TestVariablesJSON (0.00s)
=== RUN   TestVariableString
--- PASS: TestVariableString (0.00s)
=== RUN   TestPublicAndInternalVariables
--- PASS: TestPublicAndInternalVariables (0.00s)
=== RUN   TestMaskedVariables
--- PASS: TestMaskedVariables (0.00s)
=== RUN   TestListVariables
--- PASS: TestListVariables (0.00s)
=== RUN   TestGetVariable
--- PASS: TestGetVariable (0.00s)
=== RUN   TestParseVariable
--- PASS: TestParseVariable (0.00s)
=== RUN   TestInvalidParseVariable
--- PASS: TestInvalidParseVariable (0.00s)
=== RUN   TestVariablesExpansion
--- PASS: TestVariablesExpansion (0.00s)
=== RUN   TestSpecialVariablesExpansion
--- PASS: TestSpecialVariablesExpansion (0.00s)
PASS
coverage: 1.5% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	0.020s	coverage: 1.5% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 7 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/common' package with coverprofile in 'count' mode:
[0m
=== RUN   TestOverwriteKey
--- PASS: TestOverwriteKey (0.00s)
=== RUN   TestMultipleUsageOfAKey
=== RUN   TestMultipleUsageOfAKey/defined_at_job_level
=== RUN   TestMultipleUsageOfAKey/defined_at_default_and_job_level
=== RUN   TestMultipleUsageOfAKey/defined_at_config,_default_and_job_level
=== RUN   TestMultipleUsageOfAKey/defined_at_config_and_default_level
=== RUN   TestMultipleUsageOfAKey/defined_at_config_level
--- PASS: TestMultipleUsageOfAKey (0.00s)
    --- PASS: TestMultipleUsageOfAKey/defined_at_job_level (0.00s)
    --- PASS: TestMultipleUsageOfAKey/defined_at_default_and_job_level (0.00s)
    --- PASS: TestMultipleUsageOfAKey/defined_at_config,_default_and_job_level (0.00s)
    --- PASS: TestMultipleUsageOfAKey/defined_at_config_and_default_level (0.00s)
    --- PASS: TestMultipleUsageOfAKey/defined_at_config_level (0.00s)
=== RUN   TestRawVariableExpansion
=== RUN   TestRawVariableExpansion/raw-true
=== RUN   TestRawVariableExpansion/raw-false
--- PASS: TestRawVariableExpansion (0.00s)
    --- PASS: TestRawVariableExpansion/raw-true (0.00s)
    --- PASS: TestRawVariableExpansion/raw-false (0.00s)
=== RUN   TestPredefinedServerVariables
--- PASS: TestPredefinedServerVariables (0.00s)
PASS
coverage: 2.1% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/common	0.020s	coverage: 2.1% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 0 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/custom' package with coverprofile in 'count' mode:
[0m
Compiling test executor
Executing: /usr/local/go/bin/go build -o /tmp/test_executor415184490/main testdata/test_executor/main.go
=== RUN   TestConfig_GetConfigExecTimeout
=== RUN   TestConfig_GetConfigExecTimeout/source_value_greater_than_zero
=== RUN   TestConfig_GetConfigExecTimeout/source_undefined
=== RUN   TestConfig_GetConfigExecTimeout/source_value_lower_than_zero
--- PASS: TestConfig_GetConfigExecTimeout (0.00s)
    --- PASS: TestConfig_GetConfigExecTimeout/source_value_greater_than_zero (0.00s)
    --- PASS: TestConfig_GetConfigExecTimeout/source_undefined (0.00s)
    --- PASS: TestConfig_GetConfigExecTimeout/source_value_lower_than_zero (0.00s)
=== RUN   TestConfig_GetPrepareExecTimeout
=== RUN   TestConfig_GetPrepareExecTimeout/source_undefined
=== RUN   TestConfig_GetPrepareExecTimeout/source_value_lower_than_zero
=== RUN   TestConfig_GetPrepareExecTimeout/source_value_greater_than_zero
--- PASS: TestConfig_GetPrepareExecTimeout (0.00s)
    --- PASS: TestConfig_GetPrepareExecTimeout/source_undefined (0.00s)
    --- PASS: TestConfig_GetPrepareExecTimeout/source_value_lower_than_zero (0.00s)
    --- PASS: TestConfig_GetPrepareExecTimeout/source_value_greater_than_zero (0.00s)
=== RUN   TestConfig_GetCleanupExecTimeout
=== RUN   TestConfig_GetCleanupExecTimeout/source_undefined
=== RUN   TestConfig_GetCleanupExecTimeout/source_value_lower_than_zero
=== RUN   TestConfig_GetCleanupExecTimeout/source_value_greater_than_zero
--- PASS: TestConfig_GetCleanupExecTimeout (0.00s)
    --- PASS: TestConfig_GetCleanupExecTimeout/source_undefined (0.00s)
    --- PASS: TestConfig_GetCleanupExecTimeout/source_value_lower_than_zero (0.00s)
    --- PASS: TestConfig_GetCleanupExecTimeout/source_value_greater_than_zero (0.00s)
=== RUN   TestConfig_GetTerminateTimeout
=== RUN   TestConfig_GetTerminateTimeout/source_undefined
=== RUN   TestConfig_GetTerminateTimeout/source_value_lower_than_zero
=== RUN   TestConfig_GetTerminateTimeout/source_value_greater_than_zero
--- PASS: TestConfig_GetTerminateTimeout (0.00s)
    --- PASS: TestConfig_GetTerminateTimeout/source_undefined (0.00s)
    --- PASS: TestConfig_GetTerminateTimeout/source_value_lower_than_zero (0.00s)
    --- PASS: TestConfig_GetTerminateTimeout/source_value_greater_than_zero (0.00s)
=== RUN   TestConfig_GetForceKillTimeout
=== RUN   TestConfig_GetForceKillTimeout/source_undefined
=== RUN   TestConfig_GetForceKillTimeout/source_value_lower_than_zero
=== RUN   TestConfig_GetForceKillTimeout/source_value_greater_than_zero
--- PASS: TestConfig_GetForceKillTimeout (0.00s)
    --- PASS: TestConfig_GetForceKillTimeout/source_undefined (0.00s)
    --- PASS: TestConfig_GetForceKillTimeout/source_value_lower_than_zero (0.00s)
    --- PASS: TestConfig_GetForceKillTimeout/source_value_greater_than_zero (0.00s)
=== RUN   TestExecutor_Prepare
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_invalid_JSON
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_empty_JSON
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec_and_driver_info_missing_version
=== RUN   TestExecutor_Prepare/custom_executor_set_with_PrepareExec_with_error
=== RUN   TestExecutor_Prepare/custom_executor_set_with_valid_job_env
=== RUN   TestExecutor_Prepare/custom_executor_set_with_valid_job_env,_verify_variable_order_and_prefix
=== RUN   TestExecutor_Prepare/custom_executor_not_set
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_error
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_undefined_builds_dir
=== RUN   TestExecutor_Prepare/custom_executor_set_without_RunExec
=== RUN   TestExecutor_Prepare/custom_executor_set
=== RUN   TestExecutor_Prepare/AbstractExecutor.Prepare_failure
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec
=== RUN   TestExecutor_Prepare/custom_executor_set_with_ConfigExec_and_driver_info_missing_name
=== RUN   TestExecutor_Prepare/custom_executor_set_with_PrepareExec
--- PASS: TestExecutor_Prepare (0.01s)
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_invalid_JSON (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_empty_JSON (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec_and_driver_info_missing_version (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_PrepareExec_with_error (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_valid_job_env (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_valid_job_env,_verify_variable_order_and_prefix (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_not_set (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_error (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec_with_undefined_builds_dir (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_without_RunExec (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Prepare/custom_executor_set (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Prepare/AbstractExecutor.Prepare_failure (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_ConfigExec_and_driver_info_missing_name (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Prepare/custom_executor_set_with_PrepareExec (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
=== RUN   TestExecutor_Cleanup
=== RUN   TestExecutor_Cleanup/custom_executor_set_with_CleanupExec_with_error
time="2021-05-20T15:29:12Z" level=warning msg="some error message in commands output" cleanup_std=err job=15 project=0 runner=RuNnErTo
time="2021-05-20T15:29:12Z" level=warning msg="Cleanup script failed: test-error" job=15 project=0 runner=RuNnErTo
=== RUN   TestExecutor_Cleanup/custom_executor_set_with_valid_job_env,_verify_variable_order_and_prefix
=== RUN   TestExecutor_Cleanup/custom_executor_not_set
time="2021-05-20T15:29:12Z" level=warning msg="custom executor not configured" job=17 project=0 runner=RuNnErTo
=== RUN   TestExecutor_Cleanup/custom_executor_set_without_RunExec
time="2021-05-20T15:29:12Z" level=warning msg="custom executor is missing RunExec" job=18 project=0 runner=RuNnErTo
=== RUN   TestExecutor_Cleanup/custom_executor_set
=== RUN   TestExecutor_Cleanup/custom_executor_set_with_CleanupExec
--- PASS: TestExecutor_Cleanup (0.00s)
    --- PASS: TestExecutor_Cleanup/custom_executor_set_with_CleanupExec_with_error (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Cleanup/custom_executor_set_with_valid_job_env,_verify_variable_order_and_prefix (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Cleanup/custom_executor_not_set (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Cleanup/custom_executor_set_without_RunExec (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Cleanup/custom_executor_set (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Cleanup/custom_executor_set_with_CleanupExec (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
=== RUN   TestExecutor_Run
=== RUN   TestExecutor_Run/Run_fails_on_tempdir_operations
=== RUN   TestExecutor_Run/Run_executes_job
time="2021-05-20T15:29:12Z" level=warning msg="Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426" job=22 project=0 runner=RuNnErTo
=== RUN   TestExecutor_Run/Run_executes_job_with_error
time="2021-05-20T15:29:12Z" level=warning msg="Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426" job=23 project=0 runner=RuNnErTo
=== RUN   TestExecutor_Run/custom_executor_set_with_valid_job_env,_verify_variable_order_and_prefix
time="2021-05-20T15:29:12Z" level=warning msg="Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426" job=24 project=0 runner=RuNnErTo
--- PASS: TestExecutor_Run (0.00s)
    --- PASS: TestExecutor_Run/Run_fails_on_tempdir_operations (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
    --- PASS: TestExecutor_Run/Run_executes_job (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Run/Run_executes_job_with_error (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Run/custom_executor_set_with_valid_job_env,_verify_variable_order_and_prefix (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
=== RUN   TestExecutor_Env
=== RUN   TestExecutor_Env/custom_executor_set_no_variable_to_expand_CUSTOM_ENV_CI_JOB_IMAGE
=== RUN   TestExecutor_Env/custom_executor_set_CUSTOM_ENV_CI_JOB_IMAGE
=== RUN   TestExecutor_Env/custom_executor_set_empty_CUSTOM_ENV_CI_JOB_IMAGE
=== RUN   TestExecutor_Env/custom_executor_set_expanded_CUSTOM_ENV_CI_JOB_IMAGE
--- PASS: TestExecutor_Env (0.00s)
    --- PASS: TestExecutor_Env/custom_executor_set_no_variable_to_expand_CUSTOM_ENV_CI_JOB_IMAGE (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Env/custom_executor_set_CUSTOM_ENV_CI_JOB_IMAGE (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Env/custom_executor_set_empty_CUSTOM_ENV_CI_JOB_IMAGE (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_Env/custom_executor_set_expanded_CUSTOM_ENV_CI_JOB_IMAGE (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
=== RUN   TestExecutor_ServicesEnv
=== RUN   TestExecutor_ServicesEnv/returns_only_name_when_service_name_is_the_only_definition
=== RUN   TestExecutor_ServicesEnv/returns_full_service_definition
=== RUN   TestExecutor_ServicesEnv/returns_both_simple_and_full_service_definitions
=== RUN   TestExecutor_ServicesEnv/does_not_create_env_CI_JOB_SERVICES
--- PASS: TestExecutor_ServicesEnv (0.00s)
    --- PASS: TestExecutor_ServicesEnv/returns_only_name_when_service_name_is_the_only_definition (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_ServicesEnv/returns_full_service_definition (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_ServicesEnv/returns_both_simple_and_full_service_definitions (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
    --- PASS: TestExecutor_ServicesEnv/does_not_create_env_CI_JOB_SERVICES (0.00s)
        custom_test.go:114: PASS:	Write(string)
        custom_test.go:114: PASS:	IsStdout()
        custom_test.go:173: PASS:	Run()
PASS
coverage: 8.5% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/custom	0.571s	coverage: 8.5% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 1 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/custom' package with coverprofile in 'count' mode:
[0m
Compiling test executor
Executing: /usr/local/go/bin/go build -o /tmp/test_executor600878577/main testdata/test_executor/main.go
=== RUN   TestExecutor_Connect
--- PASS: TestExecutor_Connect (0.00s)
=== RUN   TestBuildSuccess
=== RUN   TestBuildSuccess/bash
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor655885643/script700882478/script. prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor655885643/script700882478/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}

>>>>>>>>>>
Running on runner-pvr9xbdq-project-250833-concurrent-0...

<<<<<<<<<<

[0K[36;1mGetting source from Git repository[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor655885643/script043919285/script. get_sources]

RUN accepts two arguments: the path to the script to execute and the stage of the job

Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor655885643/script043919285/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}

>>>>>>>>>>
[32;1mFetching changes...[0;m
Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test803131036/builds/project-0/.git/
[32;1mCreated fresh repository.[0;m
[32;1mChecking out 91956efe as master...[0;m

[32;1mSkipping Git submodules setup[0;m

<<<<<<<<<<

[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor655885643/script166458768/script. build_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor655885643/script166458768/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}

>>>>>>>>>>
[32;1m$ echo Hello World[0;m
Hello World

<<<<<<<<<<

time="2021-05-20T15:29:15Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:15Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:15Z" level=warning cleanup_std=err job=0 project=0
[32;1mJob succeeded
[0;m=== RUN   TestBuildSuccess/cmd
=== RUN   TestBuildSuccess/powershell
=== RUN   TestBuildSuccess/pwsh
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor008865090/script713242553/script.ps1 prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor008865090/script713242553/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}

>>>>>>>>>>
Running on runner-pvr9xbdq-project-250833-concurrent-0...

<<<<<<<<<<

[0K[36;1mGetting source from Git repository[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor008865090/script178444740/script.ps1 get_sources]

RUN accepts two arguments: the path to the script to execute and the stage of the job

Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor008865090/script178444740/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}

>>>>>>>>>>
[32;1mFetching changes...[0;m
Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test907545007/builds/project-0/.git/
[32;1mCreated fresh repository.[0;m
[32;1mChecking out 91956efe as master...[0;m
git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)

[32;1mSkipping Git submodules setup[0;m

<<<<<<<<<<

[0K[36;1mExecuting "step_script" stage of the job script[0;m
[0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor008865090/script734498387/script.ps1 build_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor008865090/script734498387/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}

>>>>>>>>>>
[32;1m$ echo Hello World[0;m
Hello
World

<<<<<<<<<<

time="2021-05-20T15:29:17Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:17Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:17Z" level=warning cleanup_std=err job=0 project=0
[32;1mJob succeeded
[0;m--- PASS: TestBuildSuccess (2.26s)
    --- PASS: TestBuildSuccess/bash (0.09s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test803131036
    --- SKIP: TestBuildSuccess/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildSuccess/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildSuccess/pwsh (2.17s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test907545007
=== RUN   TestBuildSuccessRawVariable
=== RUN   TestBuildSuccessRawVariable/bash
time="2021-05-20T15:29:17Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:17Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:17Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildSuccessRawVariable/cmd
=== RUN   TestBuildSuccessRawVariable/powershell
=== RUN   TestBuildSuccessRawVariable/pwsh
time="2021-05-20T15:29:20Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:20Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:20Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildSuccessRawVariable (3.06s)
    --- PASS: TestBuildSuccessRawVariable/bash (0.49s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test104949142
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor488196093/script421801784/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor488196093/script421801784/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000aa060), Stderr:(*bytes.Buffer)(0xc0000aa060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor488196093/script324539703/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor488196093/script324539703/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test104949142/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor488196093/script030452522/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor488196093/script030452522/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo $TEST[0;m
            $VARIABLE$WITH$DOLLARS$$
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildSuccessRawVariable/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildSuccessRawVariable/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildSuccessRawVariable/pwsh (2.58s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test628559489
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor633027564/script806710875/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor633027564/script806710875/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor633027564/script181324798/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor633027564/script181324798/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test628559489/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor633027564/script271003973/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor633027564/script271003973/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo $env:TEST[0;m
            $VARIABLE$WITH$DOLLARS$$
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildBuildFailure
=== RUN   TestBuildBuildFailure/bash
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor418407871/script787998226/script. prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

setting build failure

mocked build failure
Exitting with code 1
time="2021-05-20T15:29:20Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:20Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:20Z" level=warning cleanup_std=err job=0 project=0
[31;1mERROR: Job failed (system failure): prepare environment: exit status 1. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m=== RUN   TestBuildBuildFailure/cmd
=== RUN   TestBuildBuildFailure/powershell
=== RUN   TestBuildBuildFailure/pwsh
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor770614036/script848358755/script.ps1 prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

setting build failure

mocked build failure
Exitting with code 1
time="2021-05-20T15:29:20Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:20Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:20Z" level=warning cleanup_std=err job=0 project=0
[31;1mERROR: Job failed (system failure): prepare environment: exit status 1. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m--- PASS: TestBuildBuildFailure (0.53s)
    --- PASS: TestBuildBuildFailure/bash (0.01s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test450931680
    --- SKIP: TestBuildBuildFailure/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildBuildFailure/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildBuildFailure/pwsh (0.52s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test072545353
=== RUN   TestBuildSystemFailure
=== RUN   TestBuildSystemFailure/bash
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor132870029/script661519752/script. prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

setting system failure

mocked system failure
Exitting with code 2
time="2021-05-20T15:29:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:21Z" level=warning cleanup_std=err job=0 project=0
[31;1mERROR: Job failed (system failure): prepare environment: exit status 2. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m=== RUN   TestBuildSystemFailure/cmd
=== RUN   TestBuildSystemFailure/powershell
=== RUN   TestBuildSystemFailure/pwsh
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor612875770/script041417489/script.ps1 prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

setting system failure

mocked system failure
Exitting with code 2
time="2021-05-20T15:29:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:21Z" level=warning cleanup_std=err job=0 project=0
[31;1mERROR: Job failed (system failure): prepare environment: exit status 2. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m--- PASS: TestBuildSystemFailure (0.55s)
    --- PASS: TestBuildSystemFailure/bash (0.01s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test677623142
        integration_test.go:187: prepare environment: exit status 2. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
    --- SKIP: TestBuildSystemFailure/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildSystemFailure/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildSystemFailure/pwsh (0.54s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test902558535
        integration_test.go:187: prepare environment: exit status 2. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
=== RUN   TestBuildUnknownFailure
=== RUN   TestBuildUnknownFailure/bash
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor037842795/script675922382/script. prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

mocked system failure
time="2021-05-20T15:29:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:21Z" level=warning cleanup_std=err job=0 project=0
[31;1mERROR: Job failed (system failure): prepare environment: unknown Custom executor executable exit code 255; executable execution terminated with: exit status 255. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m=== RUN   TestBuildUnknownFailure/cmd
=== RUN   TestBuildUnknownFailure/powershell
=== RUN   TestBuildUnknownFailure/pwsh
[0KRunning with gitlab-runner 13.12.0 (7a6612da)
[0;m[0K[36;1mPreparing the "custom" executor[0;m
[0;mCustom Executor binary - "config" stage
Mocking execution of: []

[0KUsing Custom executor...
[0;mCustom Executor binary - "prepare" stage
Mocking execution of: []

PREPARE doesn't accept any arguments. It just does its job

[0K[36;1mPreparing environment[0;m
[0;mCustom Executor binary - "run" stage
Mocking execution of: [/tmp/custom-executor219961392/script007341519/script.ps1 prepare_script]

RUN accepts two arguments: the path to the script to execute and the stage of the job

mocked system failure
time="2021-05-20T15:29:22Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:22Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:22Z" level=warning cleanup_std=err job=0 project=0
[31;1mERROR: Job failed (system failure): prepare environment: unknown Custom executor executable exit code 255; executable execution terminated with: exit status 255. Check https://docs.gitlab.com/runner/shells/index.html#shell-profile-loading for more information
[0;m--- PASS: TestBuildUnknownFailure (0.53s)
    --- PASS: TestBuildUnknownFailure/bash (0.01s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test939713852
    --- SKIP: TestBuildUnknownFailure/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildUnknownFailure/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildUnknownFailure/pwsh (0.52s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test558779093
=== RUN   TestBuildCancel
=== RUN   TestBuildCancel/bash
=== RUN   TestBuildCancel/bash/system_interrupt
time="2021-05-20T15:29:22Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:29:22Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:22Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:22Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildCancel/bash/job_is_aborted
time="2021-05-20T15:29:23Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:29:23Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:23Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:23Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildCancel/bash/job_is_canceling
time="2021-05-20T15:29:23Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:29:23Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:23Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:23Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildCancel/cmd
=== RUN   TestBuildCancel/powershell
=== RUN   TestBuildCancel/pwsh
=== RUN   TestBuildCancel/pwsh/system_interrupt
time="2021-05-20T15:29:26Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:29:26Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:26Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:26Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildCancel/pwsh/job_is_aborted
time="2021-05-20T15:29:27Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:29:27Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:27Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:27Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildCancel/pwsh/job_is_canceling
time="2021-05-20T15:29:29Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:29:29Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:29Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:29Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildCancel (7.16s)
    --- PASS: TestBuildCancel/bash (1.82s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test808361186
        --- PASS: TestBuildCancel/bash/system_interrupt (0.60s)
            abort.go:85: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor681139929/script080861284/script. prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor681139929/script080861284/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000ac060), Stderr:(*bytes.Buffer)(0xc0000ac060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor681139929/script000567411/script. get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor681139929/script000567411/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test808361186/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor681139929/script633929014/script. build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor681139929/script633929014/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007e1b0), Stderr:(*bytes.Buffer)(0xc00007e1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                [31;1mERROR: Job failed: aborted: interrupt
                [0;m
        --- PASS: TestBuildCancel/bash/job_is_aborted (0.60s)
            abort.go:85: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor054218525/script790939608/script. prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor054218525/script790939608/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor054218525/script439667543/script. get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor054218525/script439667543/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test808361186/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor054218525/script182016202/script. build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor054218525/script182016202/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                [31;1mERROR: Job failed: canceled
                [0;m
        --- PASS: TestBuildCancel/bash/job_is_canceling (0.60s)
            abort.go:85: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor453045665/script621074572/script. prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor453045665/script621074572/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor453045665/script206716539/script. get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor453045665/script206716539/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test808361186/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor453045665/script145998750/script. build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor453045665/script145998750/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                [31;1mERROR: Job failed: canceled
                [0;m
    --- SKIP: TestBuildCancel/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildCancel/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildCancel/pwsh (5.34s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test952240229
        --- PASS: TestBuildCancel/pwsh/system_interrupt (1.61s)
            abort.go:85: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor439296640/script071456223/script.ps1 prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor439296640/script071456223/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor439296640/script362699698/script.ps1 get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor439296640/script362699698/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000921b0), Stderr:(*bytes.Buffer)(0xc0000921b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test952240229/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor439296640/script024789353/script.ps1 build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor439296640/script024789353/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                [31;1mERROR: Job failed: aborted: interrupt
                [0;m
        --- PASS: TestBuildCancel/pwsh/job_is_aborted (1.61s)
            abort.go:85: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor595394484/script407268739/script.ps1 prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor595394484/script407268739/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor595394484/script963622150/script.ps1 get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor595394484/script963622150/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007e1b0), Stderr:(*bytes.Buffer)(0xc00007e1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test952240229/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor595394484/script456572589/script.ps1 build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor595394484/script456572589/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                [31;1mERROR: Job failed: canceled
                [0;m
        --- PASS: TestBuildCancel/pwsh/job_is_canceling (1.61s)
            abort.go:85: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor053952040/script436127079/script.ps1 prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor053952040/script436127079/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor053952040/script312272794/script.ps1 get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor053952040/script312272794/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test952240229/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor053952040/script562775089/script.ps1 build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor053952040/script562775089/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                [31;1mERROR: Job failed: canceled
                [0;m
=== RUN   TestBuildMasking
=== RUN   TestBuildMasking/bash
time="2021-05-20T15:29:29Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:29Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:29Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildMasking/cmd
=== RUN   TestBuildMasking/powershell
=== RUN   TestBuildMasking/pwsh
time="2021-05-20T15:29:32Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildMasking (3.09s)
    --- PASS: TestBuildMasking/bash (0.49s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test045829084
    --- SKIP: TestBuildMasking/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildMasking/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildMasking/pwsh (2.60s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test442062978
=== RUN   TestBuildWithGitStrategyCloneWithoutLFS
=== RUN   TestBuildWithGitStrategyCloneWithoutLFS/bash
time="2021-05-20T15:29:32Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:32Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithGitStrategyCloneWithoutLFS/cmd
=== RUN   TestBuildWithGitStrategyCloneWithoutLFS/powershell
=== RUN   TestBuildWithGitStrategyCloneWithoutLFS/pwsh
time="2021-05-20T15:29:34Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:34Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:34Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithGitStrategyCloneWithoutLFS (3.89s)
    --- PASS: TestBuildWithGitStrategyCloneWithoutLFS/bash (0.16s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test897626232
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor979693431/script988792938/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor979693431/script988792938/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor979693431/script456495809/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor979693431/script456495809/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test897626232/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor979693431/script100741420/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor979693431/script100741420/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor426426523/script736829246/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor426426523/script736829246/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor426426523/script062091141/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor426426523/script062091141/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test897626232/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor426426523/script846367520/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor426426523/script846367520/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithGitStrategyCloneWithoutLFS/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithGitStrategyCloneWithoutLFS/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithGitStrategyCloneWithoutLFS/pwsh (3.73s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test766437887
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor635530066/script791541385/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor635530066/script791541385/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor635530066/script298715732/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor635530066/script298715732/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test766437887/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor635530066/script878288803/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor635530066/script878288803/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor204637350/script027569101/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor204637350/script027569101/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor204637350/script789223624/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor204637350/script789223624/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test766437887/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor204637350/script834185095/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor204637350/script834185095/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS
=== RUN   TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/bash
time="2021-05-20T15:29:36Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:36Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/cmd
=== RUN   TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/powershell
=== RUN   TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/pwsh
time="2021-05-20T15:29:38Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:38Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:38Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:29:39Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:39Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:39Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS (3.74s)
    --- PASS: TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/bash (0.11s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test982035258
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor022575953/script122732156/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor022575953/script122732156/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor022575953/script636435883/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor022575953/script636435883/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test982035258/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mSkipping Git checkout[0;m
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor022575953/script013062414/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor022575953/script013062414/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor352183061/script271784816/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor352183061/script271784816/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor352183061/script434501647/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor352183061/script434501647/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test982035258/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mSkipping Git checkout[0;m
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor352183061/script734968866/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor352183061/script734968866/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithGitStrategyCloneNoCheckoutWithoutLFS/pwsh (3.63s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test710458137
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor718114724/script670156979/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor718114724/script670156979/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor718114724/script232323702/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor718114724/script232323702/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test710458137/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mSkipping Git checkout[0;m
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor718114724/script653545821/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor718114724/script653545821/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor378506008/script887787415/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor378506008/script887787415/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor378506008/script567626762/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor378506008/script567626762/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test710458137/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mSkipping Git checkout[0;m
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor378506008/script777846241/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor378506008/script777846241/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
PASS
coverage: 26.9% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/custom	25.343s	coverage: 26.9% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 2 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/custom' package with coverprofile in 'count' mode:
[0m
Compiling test executor
Executing: /usr/local/go/bin/go build -o /tmp/test_executor534484322/main testdata/test_executor/main.go
=== RUN   TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone
=== RUN   TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/bash
time="2021-05-20T15:29:42Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:42Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:42Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/cmd
=== RUN   TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/powershell
=== RUN   TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/pwsh
time="2021-05-20T15:29:44Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:44Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:44Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone (2.00s)
    --- PASS: TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/bash (0.03s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test004287833
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor026517732/script271395059/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor026517732/script271395059/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor026517732/script883294134/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor026517732/script883294134/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mSkipping Git repository setup[0;m
            [32;1mSkipping Git checkout[0;m
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor026517732/script301166493/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor026517732/script301166493/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithGitSubmoduleStrategyRecursiveAndGitStrategyNone/pwsh (1.97s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test012311128
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor279303127/script150918986/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor279303127/script150918986/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor279303127/script931400737/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor279303127/script931400737/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mSkipping Git repository setup[0;m
            [32;1mSkipping Git checkout[0;m
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor279303127/script034725132/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor279303127/script034725132/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildWithoutDebugTrace
=== RUN   TestBuildWithoutDebugTrace/bash
time="2021-05-20T15:29:44Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:44Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:44Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithoutDebugTrace/cmd
=== RUN   TestBuildWithoutDebugTrace/powershell
=== RUN   TestBuildWithoutDebugTrace/pwsh
time="2021-05-20T15:29:46Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:46Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:46Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithoutDebugTrace (2.21s)
    --- PASS: TestBuildWithoutDebugTrace/bash (0.08s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test402911483
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor236342302/script197698789/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor236342302/script197698789/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor236342302/script534447360/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor236342302/script534447360/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test402911483/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor236342302/script983690847/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor236342302/script983690847/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithoutDebugTrace/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithoutDebugTrace/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithoutDebugTrace/pwsh (2.12s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test883318834
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor091227113/script255420468/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor091227113/script255420468/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor091227113/script919739395/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor091227113/script919739395/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000aa060), Stderr:(*bytes.Buffer)(0xc0000aa060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test883318834/builds/project-0/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor091227113/script231143814/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor091227113/script231143814/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildWithDebugTrace
=== RUN   TestBuildWithDebugTrace/bash
time="2021-05-20T15:29:46Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:46Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:46Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithDebugTrace/cmd
=== RUN   TestBuildWithDebugTrace/powershell
=== RUN   TestBuildWithDebugTrace/pwsh
time="2021-05-20T15:29:48Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:48Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:48Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithDebugTrace (2.21s)
    --- PASS: TestBuildWithDebugTrace/bash (0.09s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test709061421
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor261222568/script652827111/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor261222568/script652827111/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            + set -eo pipefail
            + set +o noclobber
            + :
            + eval 'echo "Running on $(hostname)..."
            '
            +++ hostname
            ++ echo 'Running on runner-pvr9xbdq-project-250833-concurrent-0...'
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            + exit 0
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor261222568/script694617626/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor261222568/script694617626/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            + set -eo pipefail
            + set +o noclobber
            + :
            + eval 'export FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=$'\''false'\''
            export FF_NETWORK_PER_BUILD=$'\''false'\''
            export FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=$'\''true'\''
            export FF_USE_DIRECT_DOWNLOAD=$'\''true'\''
            export FF_SKIP_NOOP_BUILD_STAGES=$'\''true'\''
            export FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=$'\''false'\''
            export FF_RESET_HELPER_IMAGE_ENTRYPOINT=$'\''true'\''
            export FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=$'\''true'\''
            export FF_USE_FASTZIP=$'\''false'\''
            export FF_GITLAB_REGISTRY_HELPER_IMAGE=$'\''false'\''
            export FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=$'\''false'\''
            export FF_ENABLE_BASH_EXIT_CODE_CHECK=$'\''false'\''
            export FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=$'\''true'\''
            export FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=$'\''false'\''
            export FF_USE_NEW_BASH_EVAL_STRATEGY=$'\''false'\''
            export FF_USE_POWERSHELL_PATH_RESOLVER=$'\''false'\''
            export CI_RUNNER_SHORT_TOKEN='\'''\''
            export CI_BUILDS_DIR=$'\''/tmp/gitlab-runner-custom-executor-test709061421/builds'\''
            export CI_PROJECT_DIR=$'\''/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0'\''
            export CI_CONCURRENT_ID=0
            export CI_CONCURRENT_PROJECT_ID=0
            export CI_SERVER=$'\''yes'\''
            export CI_JOB_STATUS=$'\''running'\''
            export CI_DEBUG_TRACE=$'\''true'\''
            export CI_SHARED_ENVIRONMENT=$'\''true'\''
            export CI_RUNNER_VERSION=13.12.0
            export CI_RUNNER_REVISION=$'\''7a6612da'\''
            export CI_RUNNER_EXECUTABLE_ARCH=$'\''linux/amd64'\''
            export GIT_LFS_SKIP_SMUDGE=1
            $'\''rm'\'' "-r" "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0"
            echo $'\''\x1b[32;1mFetching changes...\x1b[0;m'\''
            $'\''mkdir'\'' "-p" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0.tmp/git-template"
            $'\''git'\'' "config" "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0.tmp/git-template/config" "fetch.recurseSubmodules" "false"
            $'\''rm'\'' "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/index.lock"
            $'\''rm'\'' "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/shallow.lock"
            $'\''rm'\'' "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/HEAD.lock"
            $'\''rm'\'' "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/hooks/post-checkout"
            $'\''rm'\'' "-f" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/config.lock"
            $'\''git'\'' "init" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0" "--template" "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0.tmp/git-template"
            $'\''cd'\'' "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0"
            if $'\''git'\'' "remote" "add" "origin" "/builds/gitlab-org/gitlab-runner/tmp/gitlab-test/.git" >/dev/null 2>/dev/null; then
              echo $'\''\x1b[32;1mCreated fresh repository.\x1b[0;m'\''
            else
              $'\''git'\'' "remote" "set-url" "origin" "/builds/gitlab-org/gitlab-runner/tmp/gitlab-test/.git"
            fi
            $'\''git'\'' "-c" "http.userAgent=gitlab-runner 13.12.0 linux/amd64" "fetch" "origin" "+refs/heads/*:refs/origin/heads/*" "+refs/tags/*:refs/tags/*" "--prune" "--quiet"
            echo $'\''\x1b[32;1mChecking out 91956efe as master...\x1b[0;m'\''
            $'\''git'\'' "checkout" "-f" "-q" "91956efe32fb7bef54f378d90c9bd74c19025872"
            $'\''git'\'' "clean" "-ffdx"
            if $'\''git'\'' "lfs" "version" >/dev/null 2>/dev/null; then
              $'\''git'\'' "lfs" "pull"
              echo
            fi
            echo $'\''\x1b[32;1mSkipping Git submodules setup\x1b[0;m'\''
            '
            ++ export FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=false
            ++ FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=false
            ++ export FF_NETWORK_PER_BUILD=false
            ++ FF_NETWORK_PER_BUILD=false
            ++ export FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=true
            ++ FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=true
            ++ export FF_USE_DIRECT_DOWNLOAD=true
            ++ FF_USE_DIRECT_DOWNLOAD=true
            ++ export FF_SKIP_NOOP_BUILD_STAGES=true
            ++ FF_SKIP_NOOP_BUILD_STAGES=true
            ++ export FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=false
            ++ FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=false
            ++ export FF_RESET_HELPER_IMAGE_ENTRYPOINT=true
            ++ FF_RESET_HELPER_IMAGE_ENTRYPOINT=true
            ++ export FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=true
            ++ FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=true
            ++ export FF_USE_FASTZIP=false
            ++ FF_USE_FASTZIP=false
            ++ export FF_GITLAB_REGISTRY_HELPER_IMAGE=false
            ++ FF_GITLAB_REGISTRY_HELPER_IMAGE=false
            ++ export FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=false
            ++ FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=false
            ++ export FF_ENABLE_BASH_EXIT_CODE_CHECK=false
            ++ FF_ENABLE_BASH_EXIT_CODE_CHECK=false
            ++ export FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=true
            ++ FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=true
            ++ export FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=false
            ++ FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=false
            ++ export FF_USE_NEW_BASH_EVAL_STRATEGY=false
            ++ FF_USE_NEW_BASH_EVAL_STRATEGY=false
            ++ export FF_USE_POWERSHELL_PATH_RESOLVER=false
            ++ FF_USE_POWERSHELL_PATH_RESOLVER=false
            ++ export CI_RUNNER_SHORT_TOKEN=
            ++ CI_RUNNER_SHORT_TOKEN=
            ++ export CI_BUILDS_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds
            ++ CI_BUILDS_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds
            ++ export CI_PROJECT_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ CI_PROJECT_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ export CI_CONCURRENT_ID=0
            ++ CI_CONCURRENT_ID=0
            ++ export CI_CONCURRENT_PROJECT_ID=0
            ++ CI_CONCURRENT_PROJECT_ID=0
            ++ export CI_SERVER=yes
            ++ CI_SERVER=yes
            ++ export CI_JOB_STATUS=running
            ++ CI_JOB_STATUS=running
            ++ export CI_DEBUG_TRACE=true
            ++ CI_DEBUG_TRACE=true
            ++ export CI_SHARED_ENVIRONMENT=true
            ++ CI_SHARED_ENVIRONMENT=true
            ++ export CI_RUNNER_VERSION=13.12.0
            ++ CI_RUNNER_VERSION=13.12.0
            ++ export CI_RUNNER_REVISION=7a6612da
            ++ CI_RUNNER_REVISION=7a6612da
            ++ export CI_RUNNER_EXECUTABLE_ARCH=linux/amd64
            ++ CI_RUNNER_EXECUTABLE_ARCH=linux/amd64
            ++ export GIT_LFS_SKIP_SMUDGE=1
            ++ GIT_LFS_SKIP_SMUDGE=1
            ++ rm -r -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ echo '[32;1mFetching changes...[0;m'
            [32;1mFetching changes...[0;m
            ++ mkdir -p /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0.tmp/git-template
            ++ git config -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0.tmp/git-template/config fetch.recurseSubmodules false
            ++ rm -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/index.lock
            ++ rm -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/shallow.lock
            ++ rm -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/HEAD.lock
            ++ rm -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/hooks/post-checkout
            ++ rm -f /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/config.lock
            ++ git init /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0 --template /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0.tmp/git-template
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0/.git/
            ++ cd /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ git remote add origin /builds/gitlab-org/gitlab-runner/tmp/gitlab-test/.git
            ++ echo '[32;1mCreated fresh repository.[0;m'
            [32;1mCreated fresh repository.[0;m
            ++ git -c 'http.userAgent=gitlab-runner 13.12.0 linux/amd64' fetch origin '+refs/heads/*:refs/origin/heads/*' '+refs/tags/*:refs/tags/*' --prune --quiet
            ++ echo '[32;1mChecking out 91956efe as master...[0;m'
            [32;1mChecking out 91956efe as master...[0;m
            ++ git checkout -f -q 91956efe32fb7bef54f378d90c9bd74c19025872
            ++ git clean -ffdx
            ++ git lfs version
            ++ git lfs pull
            ++ echo
            
            ++ echo '[32;1mSkipping Git submodules setup[0;m'
            [32;1mSkipping Git submodules setup[0;m
            + exit 0
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor261222568/script761271985/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor261222568/script761271985/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007c1b0), Stderr:(*bytes.Buffer)(0xc00007c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            + set -eo pipefail
            + set +o noclobber
            + :
            + eval 'export FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=$'\''false'\''
            export FF_NETWORK_PER_BUILD=$'\''false'\''
            export FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=$'\''true'\''
            export FF_USE_DIRECT_DOWNLOAD=$'\''true'\''
            export FF_SKIP_NOOP_BUILD_STAGES=$'\''true'\''
            export FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=$'\''false'\''
            export FF_RESET_HELPER_IMAGE_ENTRYPOINT=$'\''true'\''
            export FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=$'\''true'\''
            export FF_USE_FASTZIP=$'\''false'\''
            export FF_GITLAB_REGISTRY_HELPER_IMAGE=$'\''false'\''
            export FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=$'\''false'\''
            export FF_ENABLE_BASH_EXIT_CODE_CHECK=$'\''false'\''
            export FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=$'\''true'\''
            export FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=$'\''false'\''
            export FF_USE_NEW_BASH_EVAL_STRATEGY=$'\''false'\''
            export FF_USE_POWERSHELL_PATH_RESOLVER=$'\''false'\''
            export CI_RUNNER_SHORT_TOKEN='\'''\''
            export CI_BUILDS_DIR=$'\''/tmp/gitlab-runner-custom-executor-test709061421/builds'\''
            export CI_PROJECT_DIR=$'\''/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0'\''
            export CI_CONCURRENT_ID=0
            export CI_CONCURRENT_PROJECT_ID=0
            export CI_SERVER=$'\''yes'\''
            export CI_JOB_STATUS=$'\''running'\''
            export CI_DEBUG_TRACE=$'\''true'\''
            export CI_SHARED_ENVIRONMENT=$'\''true'\''
            export CI_RUNNER_VERSION=13.12.0
            export CI_RUNNER_REVISION=$'\''7a6612da'\''
            export CI_RUNNER_EXECUTABLE_ARCH=$'\''linux/amd64'\''
            $'\''cd'\'' "/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0"
            echo $'\''\x1b[32;1m$ echo Hello World\x1b[0;m'\''
            echo Hello World
            '
            ++ export FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=false
            ++ FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=false
            ++ export FF_NETWORK_PER_BUILD=false
            ++ FF_NETWORK_PER_BUILD=false
            ++ export FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=true
            ++ FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=true
            ++ export FF_USE_DIRECT_DOWNLOAD=true
            ++ FF_USE_DIRECT_DOWNLOAD=true
            ++ export FF_SKIP_NOOP_BUILD_STAGES=true
            ++ FF_SKIP_NOOP_BUILD_STAGES=true
            ++ export FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=false
            ++ FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=false
            ++ export FF_RESET_HELPER_IMAGE_ENTRYPOINT=true
            ++ FF_RESET_HELPER_IMAGE_ENTRYPOINT=true
            ++ export FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=true
            ++ FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=true
            ++ export FF_USE_FASTZIP=false
            ++ FF_USE_FASTZIP=false
            ++ export FF_GITLAB_REGISTRY_HELPER_IMAGE=false
            ++ FF_GITLAB_REGISTRY_HELPER_IMAGE=false
            ++ export FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=false
            ++ FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=false
            ++ export FF_ENABLE_BASH_EXIT_CODE_CHECK=false
            ++ FF_ENABLE_BASH_EXIT_CODE_CHECK=false
            ++ export FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=true
            ++ FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=true
            ++ export FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=false
            ++ FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=false
            ++ export FF_USE_NEW_BASH_EVAL_STRATEGY=false
            ++ FF_USE_NEW_BASH_EVAL_STRATEGY=false
            ++ export FF_USE_POWERSHELL_PATH_RESOLVER=false
            ++ FF_USE_POWERSHELL_PATH_RESOLVER=false
            ++ export CI_RUNNER_SHORT_TOKEN=
            ++ CI_RUNNER_SHORT_TOKEN=
            ++ export CI_BUILDS_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds
            ++ CI_BUILDS_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds
            ++ export CI_PROJECT_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ CI_PROJECT_DIR=/tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ export CI_CONCURRENT_ID=0
            ++ CI_CONCURRENT_ID=0
            ++ export CI_CONCURRENT_PROJECT_ID=0
            ++ CI_CONCURRENT_PROJECT_ID=0
            ++ export CI_SERVER=yes
            ++ CI_SERVER=yes
            ++ export CI_JOB_STATUS=running
            ++ CI_JOB_STATUS=running
            ++ export CI_DEBUG_TRACE=true
            ++ CI_DEBUG_TRACE=true
            ++ export CI_SHARED_ENVIRONMENT=true
            ++ CI_SHARED_ENVIRONMENT=true
            ++ export CI_RUNNER_VERSION=13.12.0
            ++ CI_RUNNER_VERSION=13.12.0
            ++ export CI_RUNNER_REVISION=7a6612da
            ++ CI_RUNNER_REVISION=7a6612da
            ++ export CI_RUNNER_EXECUTABLE_ARCH=linux/amd64
            ++ CI_RUNNER_EXECUTABLE_ARCH=linux/amd64
            ++ cd /tmp/gitlab-runner-custom-executor-test709061421/builds/project-0
            ++ echo '[32;1m$ echo Hello World[0;m'
            [32;1m$ echo Hello World[0;m
            ++ echo Hello World
            Hello World
            + exit 0
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithDebugTrace/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithDebugTrace/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithDebugTrace/pwsh (2.13s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test012996188
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor412466187/script390154734/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor412466187/script390154734/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            DEBUG:    2+  >>>> $ErrorActionPreference = "Stop"
            
            DEBUG:    4+  >>>> echo "Running on $([Environment]::MachineName)..."
            
            DEBUG:    4+ echo "Running on $( >>>> [Environment]::MachineName)..."
            
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor412466187/script001058421/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor412466187/script001058421/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            DEBUG:    2+  >>>> $ErrorActionPreference = "Stop"
            
            DEBUG:     ! SET $ErrorActionPreference = 'Stop'.
            DEBUG:    4+  >>>> $FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION="false"
            
            DEBUG:     ! SET $FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION = 'false'.
            DEBUG:    5+  >>>> $env:FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=$FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION
            
            DEBUG:    6+  >>>> $FF_NETWORK_PER_BUILD="false"
            
            DEBUG:     ! SET $FF_NETWORK_PER_BUILD = 'false'.
            DEBUG:    7+  >>>> $env:FF_NETWORK_PER_BUILD=$FF_NETWORK_PER_BUILD
            
            DEBUG:    8+  >>>> $FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY="true"
            
            DEBUG:     ! SET $FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY = 'true'.
            DEBUG:    9+  >>>> $env:FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=$FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY
            
            DEBUG:   10+  >>>> $FF_USE_DIRECT_DOWNLOAD="true"
            
            DEBUG:     ! SET $FF_USE_DIRECT_DOWNLOAD = 'true'.
            DEBUG:   11+  >>>> $env:FF_USE_DIRECT_DOWNLOAD=$FF_USE_DIRECT_DOWNLOAD
            
            DEBUG:   12+  >>>> $FF_SKIP_NOOP_BUILD_STAGES="true"
            
            DEBUG:     ! SET $FF_SKIP_NOOP_BUILD_STAGES = 'true'.
            DEBUG:   13+  >>>> $env:FF_SKIP_NOOP_BUILD_STAGES=$FF_SKIP_NOOP_BUILD_STAGES
            
            DEBUG:   14+  >>>> $FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL="false"
            
            DEBUG:     ! SET $FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL = 'false'.
            DEBUG:   15+  >>>> $env:FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=$FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL
            
            DEBUG:   16+  >>>> $FF_RESET_HELPER_IMAGE_ENTRYPOINT="true"
            
            DEBUG:     ! SET $FF_RESET_HELPER_IMAGE_ENTRYPOINT = 'true'.
            DEBUG:   17+  >>>> $env:FF_RESET_HELPER_IMAGE_ENTRYPOINT=$FF_RESET_HELPER_IMAGE_ENTRYPOINT
            
            DEBUG:   18+  >>>> $FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER="true"
            
            DEBUG:     ! SET $FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER = 'true'.
            DEBUG:   19+  >>>> $env:FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=$FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER
            
            DEBUG:   20+  >>>> $FF_USE_FASTZIP="false"
            
            DEBUG:     ! SET $FF_USE_FASTZIP = 'false'.
            DEBUG:   21+  >>>> $env:FF_USE_FASTZIP=$FF_USE_FASTZIP
            
            DEBUG:   22+  >>>> $FF_GITLAB_REGISTRY_HELPER_IMAGE="false"
            
            DEBUG:     ! SET $FF_GITLAB_REGISTRY_HELPER_IMAGE = 'false'.
            DEBUG:   23+  >>>> $env:FF_GITLAB_REGISTRY_HELPER_IMAGE=$FF_GITLAB_REGISTRY_HELPER_IMAGE
            
            DEBUG:   24+  >>>> $FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR="false"
            
            DEBUG:     ! SET $FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR = 'false'.
            DEBUG:   25+  >>>> $env:FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=$FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR
            
            DEBUG:   26+  >>>> $FF_ENABLE_BASH_EXIT_CODE_CHECK="false"
            
            DEBUG:     ! SET $FF_ENABLE_BASH_EXIT_CODE_CHECK = 'false'.
            DEBUG:   27+  >>>> $env:FF_ENABLE_BASH_EXIT_CODE_CHECK=$FF_ENABLE_BASH_EXIT_CODE_CHECK
            
            DEBUG:   28+  >>>> $FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY="true"
            
            DEBUG:     ! SET $FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY = 'true'.
            DEBUG:   29+  >>>> $env:FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=$FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY
            
            DEBUG:   30+  >>>> $FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE="false"
            
            DEBUG:     ! SET $FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE = 'false'.
            DEBUG:   31+  >>>> $env:FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=$FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE
            
            DEBUG:   32+  >>>> $FF_USE_NEW_BASH_EVAL_STRATEGY="false"
            
            DEBUG:     ! SET $FF_USE_NEW_BASH_EVAL_STRATEGY = 'false'.
            DEBUG:   33+  >>>> $env:FF_USE_NEW_BASH_EVAL_STRATEGY=$FF_USE_NEW_BASH_EVAL_STRATEGY
            
            DEBUG:   34+  >>>> $FF_USE_POWERSHELL_PATH_RESOLVER="false"
            
            DEBUG:     ! SET $FF_USE_POWERSHELL_PATH_RESOLVER = 'false'.
            DEBUG:   35+  >>>> $env:FF_USE_POWERSHELL_PATH_RESOLVER=$FF_USE_POWERSHELL_PATH_RESOLVER
            
            DEBUG:   36+  >>>> $CI_RUNNER_SHORT_TOKEN=""
            
            DEBUG:     ! SET $CI_RUNNER_SHORT_TOKEN = ''.
            DEBUG:   37+  >>>> $env:CI_RUNNER_SHORT_TOKEN=$CI_RUNNER_SHORT_TOKEN
            
            DEBUG:   38+  >>>> $CI_BUILDS_DIR="/tmp/gitlab-runner-custom-executor-test012996188/builds"
            
            DEBUG:     ! SET $CI_BUILDS_DIR = '/tmp/gitlab-runner-custom-executor-test01299618…'.
            DEBUG:   39+  >>>> $env:CI_BUILDS_DIR=$CI_BUILDS_DIR
            
            DEBUG:   40+  >>>> $CI_PROJECT_DIR="/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0"
            
            DEBUG:     ! SET $CI_PROJECT_DIR = '/tmp/gitlab-runner-custom-executor-test0129961…'.
            DEBUG:   41+  >>>> $env:CI_PROJECT_DIR=$CI_PROJECT_DIR
            
            DEBUG:   42+  >>>> $CI_CONCURRENT_ID="0"
            
            DEBUG:     ! SET $CI_CONCURRENT_ID = '0'.
            DEBUG:   43+  >>>> $env:CI_CONCURRENT_ID=$CI_CONCURRENT_ID
            
            DEBUG:   44+  >>>> $CI_CONCURRENT_PROJECT_ID="0"
            
            DEBUG:     ! SET $CI_CONCURRENT_PROJECT_ID = '0'.
            DEBUG:   45+  >>>> $env:CI_CONCURRENT_PROJECT_ID=$CI_CONCURRENT_PROJECT_ID
            
            DEBUG:   46+  >>>> $CI_SERVER="yes"
            
            DEBUG:     ! SET $CI_SERVER = 'yes'.
            DEBUG:   47+  >>>> $env:CI_SERVER=$CI_SERVER
            
            DEBUG:   48+  >>>> $CI_JOB_STATUS="running"
            
            DEBUG:     ! SET $CI_JOB_STATUS = 'running'.
            DEBUG:   49+  >>>> $env:CI_JOB_STATUS=$CI_JOB_STATUS
            
            DEBUG:   50+  >>>> $CI_DEBUG_TRACE="true"
            
            DEBUG:     ! SET $CI_DEBUG_TRACE = 'true'.
            DEBUG:   51+  >>>> $env:CI_DEBUG_TRACE=$CI_DEBUG_TRACE
            
            DEBUG:   52+  >>>> $CI_SHARED_ENVIRONMENT="true"
            
            DEBUG:     ! SET $CI_SHARED_ENVIRONMENT = 'true'.
            DEBUG:   53+  >>>> $env:CI_SHARED_ENVIRONMENT=$CI_SHARED_ENVIRONMENT
            
            DEBUG:   54+  >>>> $CI_RUNNER_VERSION="13.12.0"
            
            DEBUG:     ! SET $CI_RUNNER_VERSION = '13.12.0'.
            DEBUG:   55+  >>>> $env:CI_RUNNER_VERSION=$CI_RUNNER_VERSION
            
            DEBUG:   56+  >>>> $CI_RUNNER_REVISION="7a6612da"
            
            DEBUG:     ! SET $CI_RUNNER_REVISION = '7a6612da'.
            DEBUG:   57+  >>>> $env:CI_RUNNER_REVISION=$CI_RUNNER_REVISION
            
            DEBUG:   58+  >>>> $CI_RUNNER_EXECUTABLE_ARCH="linux/amd64"
            
            DEBUG:     ! SET $CI_RUNNER_EXECUTABLE_ARCH = 'linux/amd64'.
            DEBUG:   59+  >>>> $env:CI_RUNNER_EXECUTABLE_ARCH=$CI_RUNNER_EXECUTABLE_ARCH
            
            DEBUG:   60+  >>>> $GIT_LFS_SKIP_SMUDGE="1"
            
            DEBUG:     ! SET $GIT_LFS_SKIP_SMUDGE = '1'.
            DEBUG:   61+  >>>> $env:GIT_LFS_SKIP_SMUDGE=$GIT_LFS_SKIP_SMUDGE
            
            DEBUG:   62+ if(  >>>> (Get-Command -Name Remove-Item2 -Module NTFSSecurity -ErrorAction SilentlyContinue) -and (Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0" -PathType Container) ) {
            
            DEBUG:   64+ } elseif( >>>> Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0") {
            
            DEBUG:   68+  >>>> echo "[32;1mFetching changes...[0;m"
            
            [32;1mFetching changes...[0;m
            DEBUG:   69+  >>>> New-Item -ItemType directory -Force -Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0.tmp/git-template" | out-null
            
            DEBUG:   70+  >>>> & "git" "config" "-f" "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0.tmp/git-template/config" "fetch.recurseSubmodules" "false"
            
            DEBUG:   71+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:   73+ if(  >>>> (Get-Command -Name Remove-Item2 -Module NTFSSecurity -ErrorAction SilentlyContinue) -and (Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/index.lock" -PathType Leaf) ) {
            
            DEBUG:   75+ } elseif( >>>> Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/index.lock") {
            
            DEBUG:   79+ if(  >>>> (Get-Command -Name Remove-Item2 -Module NTFSSecurity -ErrorAction SilentlyContinue) -and (Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/shallow.lock" -PathType Leaf) ) {
            
            DEBUG:   81+ } elseif( >>>> Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/shallow.lock") {
            
            DEBUG:   85+ if(  >>>> (Get-Command -Name Remove-Item2 -Module NTFSSecurity -ErrorAction SilentlyContinue) -and (Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/HEAD.lock" -PathType Leaf) ) {
            
            DEBUG:   87+ } elseif( >>>> Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/HEAD.lock") {
            
            DEBUG:   91+ if(  >>>> (Get-Command -Name Remove-Item2 -Module NTFSSecurity -ErrorAction SilentlyContinue) -and (Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/hooks/post-checkout" -PathType Leaf) ) {
            
            DEBUG:   93+ } elseif( >>>> Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/hooks/post-checkout") {
            
            DEBUG:   97+ if(  >>>> (Get-Command -Name Remove-Item2 -Module NTFSSecurity -ErrorAction SilentlyContinue) -and (Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/config.lock" -PathType Leaf) ) {
            
            DEBUG:   99+ } elseif( >>>> Test-Path "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/config.lock") {
            
            DEBUG:  103+  >>>> & "git" "init" "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0" "--template" "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0.tmp/git-template"
            
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test012996188/builds/project-0/.git/
            DEBUG:  104+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  106+  >>>> cd "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0"
            
            DEBUG:  107+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  109+  >>>> Set-Variable -Name cmdErr -Value $false
            
            DEBUG:  111+    >>>> & "git" "remote" "add" "origin" "/builds/gitlab-org/gitlab-runner/tmp/gitlab-test/.git" 2>$null
            
            DEBUG:  112+   if( >>>> !$?) { throw &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  116+ if( >>>> !$cmdErr) {
            
            DEBUG:  117+    >>>> echo "[32;1mCreated fresh repository.[0;m"
            
            [32;1mCreated fresh repository.[0;m
            DEBUG:  123+  >>>> & "git" "-c" "http.userAgent=gitlab-runner 13.12.0 linux/amd64" "fetch" "origin" "+refs/heads/*:refs/origin/heads/*" "+refs/tags/*:refs/tags/*" "--prune" "--quiet"
            
            DEBUG:  124+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  126+  >>>> echo "[32;1mChecking out 91956efe as master...[0;m"
            
            [32;1mChecking out 91956efe as master...[0;m
            DEBUG:  127+  >>>> & "git" "checkout" "-f" "-q" "91956efe32fb7bef54f378d90c9bd74c19025872"
            
            DEBUG:  128+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  130+  >>>> & "git" "clean" "-ffdx"
            
            DEBUG:  131+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  133+  >>>> Set-Variable -Name cmdErr -Value $false
            
            DEBUG:  135+    >>>> & "git" "lfs" "version" 2>$null
            
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            DEBUG:  136+   if( >>>> !$?) { throw &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  140+ if( >>>> !$cmdErr) {
            
            DEBUG:  141+    >>>> & "git" "lfs" "pull"
            
            DEBUG:  142+   if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:  144+    >>>> echo ""
            
            
            DEBUG:  146+  >>>> echo "[32;1mSkipping Git submodules setup[0;m"
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor412466187/script593595728/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor412466187/script593595728/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            DEBUG:    2+  >>>> $ErrorActionPreference = "Stop"
            
            DEBUG:    4+  >>>> $FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION="false"
            
            DEBUG:    5+  >>>> $env:FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION=$FF_CMD_DISABLE_DELAYED_ERROR_LEVEL_EXPANSION
            
            DEBUG:    6+  >>>> $FF_NETWORK_PER_BUILD="false"
            
            DEBUG:    7+  >>>> $env:FF_NETWORK_PER_BUILD=$FF_NETWORK_PER_BUILD
            
            DEBUG:    8+  >>>> $FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY="true"
            
            DEBUG:    9+  >>>> $env:FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY=$FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY
            
            DEBUG:   10+  >>>> $FF_USE_DIRECT_DOWNLOAD="true"
            
            DEBUG:   11+  >>>> $env:FF_USE_DIRECT_DOWNLOAD=$FF_USE_DIRECT_DOWNLOAD
            
            DEBUG:   12+  >>>> $FF_SKIP_NOOP_BUILD_STAGES="true"
            
            DEBUG:   13+  >>>> $env:FF_SKIP_NOOP_BUILD_STAGES=$FF_SKIP_NOOP_BUILD_STAGES
            
            DEBUG:   14+  >>>> $FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL="false"
            
            DEBUG:   15+  >>>> $env:FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL=$FF_SHELL_EXECUTOR_USE_LEGACY_PROCESS_KILL
            
            DEBUG:   16+  >>>> $FF_RESET_HELPER_IMAGE_ENTRYPOINT="true"
            
            DEBUG:   17+  >>>> $env:FF_RESET_HELPER_IMAGE_ENTRYPOINT=$FF_RESET_HELPER_IMAGE_ENTRYPOINT
            
            DEBUG:   18+  >>>> $FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER="true"
            
            DEBUG:   19+  >>>> $env:FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER=$FF_USE_GO_CLOUD_WITH_CACHE_ARCHIVER
            
            DEBUG:   20+  >>>> $FF_USE_FASTZIP="false"
            
            DEBUG:   21+  >>>> $env:FF_USE_FASTZIP=$FF_USE_FASTZIP
            
            DEBUG:   22+  >>>> $FF_GITLAB_REGISTRY_HELPER_IMAGE="false"
            
            DEBUG:   23+  >>>> $env:FF_GITLAB_REGISTRY_HELPER_IMAGE=$FF_GITLAB_REGISTRY_HELPER_IMAGE
            
            DEBUG:   24+  >>>> $FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR="false"
            
            DEBUG:   25+  >>>> $env:FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR=$FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR
            
            DEBUG:   26+  >>>> $FF_ENABLE_BASH_EXIT_CODE_CHECK="false"
            
            DEBUG:   27+  >>>> $env:FF_ENABLE_BASH_EXIT_CODE_CHECK=$FF_ENABLE_BASH_EXIT_CODE_CHECK
            
            DEBUG:   28+  >>>> $FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY="true"
            
            DEBUG:   29+  >>>> $env:FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY=$FF_USE_WINDOWS_LEGACY_PROCESS_STRATEGY
            
            DEBUG:   30+  >>>> $FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE="false"
            
            DEBUG:   31+  >>>> $env:FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE=$FF_SKIP_DOCKER_MACHINE_PROVISION_ON_CREATION_FAILURE
            
            DEBUG:   32+  >>>> $FF_USE_NEW_BASH_EVAL_STRATEGY="false"
            
            DEBUG:   33+  >>>> $env:FF_USE_NEW_BASH_EVAL_STRATEGY=$FF_USE_NEW_BASH_EVAL_STRATEGY
            
            DEBUG:   34+  >>>> $FF_USE_POWERSHELL_PATH_RESOLVER="false"
            
            DEBUG:   35+  >>>> $env:FF_USE_POWERSHELL_PATH_RESOLVER=$FF_USE_POWERSHELL_PATH_RESOLVER
            
            DEBUG:   36+  >>>> $CI_RUNNER_SHORT_TOKEN=""
            
            DEBUG:   37+  >>>> $env:CI_RUNNER_SHORT_TOKEN=$CI_RUNNER_SHORT_TOKEN
            
            DEBUG:   38+  >>>> $CI_BUILDS_DIR="/tmp/gitlab-runner-custom-executor-test012996188/builds"
            
            DEBUG:   39+  >>>> $env:CI_BUILDS_DIR=$CI_BUILDS_DIR
            
            DEBUG:   40+  >>>> $CI_PROJECT_DIR="/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0"
            
            DEBUG:   41+  >>>> $env:CI_PROJECT_DIR=$CI_PROJECT_DIR
            
            DEBUG:   42+  >>>> $CI_CONCURRENT_ID="0"
            
            DEBUG:   43+  >>>> $env:CI_CONCURRENT_ID=$CI_CONCURRENT_ID
            
            DEBUG:   44+  >>>> $CI_CONCURRENT_PROJECT_ID="0"
            
            DEBUG:   45+  >>>> $env:CI_CONCURRENT_PROJECT_ID=$CI_CONCURRENT_PROJECT_ID
            
            DEBUG:   46+  >>>> $CI_SERVER="yes"
            
            DEBUG:   47+  >>>> $env:CI_SERVER=$CI_SERVER
            
            DEBUG:   48+  >>>> $CI_JOB_STATUS="running"
            
            DEBUG:   49+  >>>> $env:CI_JOB_STATUS=$CI_JOB_STATUS
            
            DEBUG:   50+  >>>> $CI_DEBUG_TRACE="true"
            
            DEBUG:   51+  >>>> $env:CI_DEBUG_TRACE=$CI_DEBUG_TRACE
            
            DEBUG:   52+  >>>> $CI_SHARED_ENVIRONMENT="true"
            
            DEBUG:   53+  >>>> $env:CI_SHARED_ENVIRONMENT=$CI_SHARED_ENVIRONMENT
            
            DEBUG:   54+  >>>> $CI_RUNNER_VERSION="13.12.0"
            
            DEBUG:   55+  >>>> $env:CI_RUNNER_VERSION=$CI_RUNNER_VERSION
            
            DEBUG:   56+  >>>> $CI_RUNNER_REVISION="7a6612da"
            
            DEBUG:   57+  >>>> $env:CI_RUNNER_REVISION=$CI_RUNNER_REVISION
            
            DEBUG:   58+  >>>> $CI_RUNNER_EXECUTABLE_ARCH="linux/amd64"
            
            DEBUG:   59+  >>>> $env:CI_RUNNER_EXECUTABLE_ARCH=$CI_RUNNER_EXECUTABLE_ARCH
            
            DEBUG:   60+  >>>> cd "/tmp/gitlab-runner-custom-executor-test012996188/builds/project-0"
            
            DEBUG:   61+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            DEBUG:   63+  >>>> echo "[32;1m`$ echo Hello World[0;m"
            
            [32;1m$ echo Hello World[0;m
            DEBUG:   64+  >>>> echo Hello World
            
            Hello
            World
            DEBUG:   65+ if( >>>> !$?) { Exit &{if($LASTEXITCODE) {$LASTEXITCODE} else {1}} }
            
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildMultilineCommand
=== RUN   TestBuildMultilineCommand/bash
time="2021-05-20T15:29:49Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:49Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:49Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildMultilineCommand/cmd
=== RUN   TestBuildMultilineCommand/powershell
=== RUN   TestBuildMultilineCommand/pwsh
time="2021-05-20T15:29:51Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:51Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:51Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildMultilineCommand (3.01s)
    --- PASS: TestBuildMultilineCommand/bash (0.50s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test011575919
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor405722370/script887707257/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor405722370/script887707257/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor405722370/script452117380/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor405722370/script452117380/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test011575919/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor405722370/script655711507/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor405722370/script655711507/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ if true; then # collapsed multi-line command[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildMultilineCommand/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildMultilineCommand/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildMultilineCommand/pwsh (2.51s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test444466518
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor348172989/script080834296/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor348172989/script080834296/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007e1b0), Stderr:(*bytes.Buffer)(0xc00007e1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor348172989/script028039671/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor348172989/script028039671/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test444466518/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor348172989/script006671082/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor348172989/script006671082/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ if (0 -eq 0) { # collapsed multi-line command[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildWithGoodGitSSLCAInfo
=== RUN   TestBuildWithGoodGitSSLCAInfo/bash
time="2021-05-20T15:29:53Z" level=warning msg="Error while executing file based variables removal script" error="exit status 2" job=0 project=0
time="2021-05-20T15:29:53Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:53Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:53Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithGoodGitSSLCAInfo/cmd
=== RUN   TestBuildWithGoodGitSSLCAInfo/powershell
=== RUN   TestBuildWithGoodGitSSLCAInfo/pwsh
time="2021-05-20T15:29:56Z" level=warning msg="Error while executing file based variables removal script" error="exit status 2" job=0 project=0
time="2021-05-20T15:29:56Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:56Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:56Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithGoodGitSSLCAInfo (4.53s)
    --- PASS: TestBuildWithGoodGitSSLCAInfo/bash (1.35s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test454277953
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor800890284/script899775771/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor800890284/script899775771/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor800890284/script233339838/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor800890284/script233339838/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00008c1b0), Stderr:(*bytes.Buffer)(0xc00008c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test454277953/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mUpdating/initializing submodules...[0;m
            Submodule 'gitlab-grack' (https://gitlab.com/gitlab-org/gitlab-grack.git) registered for path 'gitlab-grack'
            Cloning into '/tmp/gitlab-runner-custom-executor-test454277953/builds/gitlab-org/ci-cd/tests/gitlab-test/gitlab-grack'...
            Submodule path 'gitlab-grack': checked out '645f6c4c82fd3f5e06f67134450a570b795e55a6'
            Entering 'gitlab-grack'
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor800890284/script194240517/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor800890284/script194240517/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [0K[36;1mCleaning up file based variables[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor800890284/script036389280/script. cleanup_file_variables]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            setting system failure
            
            Unknown build stage "cleanup_file_variables"
            Exitting with code 2
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithGoodGitSSLCAInfo/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithGoodGitSSLCAInfo/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithGoodGitSSLCAInfo/pwsh (3.18s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test625421951
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor342353362/script317454601/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor342353362/script317454601/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00008c1b0), Stderr:(*bytes.Buffer)(0xc00008c1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor342353362/script681240788/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor342353362/script681240788/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test625421951/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mUpdating/initializing submodules...[0;m
            Submodule 'gitlab-grack' (https://gitlab.com/gitlab-org/gitlab-grack.git) registered for path 'gitlab-grack'
            Cloning into '/tmp/gitlab-runner-custom-executor-test625421951/builds/gitlab-org/ci-cd/tests/gitlab-test/gitlab-grack'...
            Submodule path 'gitlab-grack': checked out '645f6c4c82fd3f5e06f67134450a570b795e55a6'
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            Entering 'gitlab-grack'
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor342353362/script790462499/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor342353362/script790462499/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [0K[36;1mCleaning up file based variables[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor342353362/script848759078/script.ps1 cleanup_file_variables]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            setting system failure
            
            Unknown build stage "cleanup_file_variables"
            Exitting with code 2
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildWithGitSSLAndStrategyFetch
=== RUN   TestBuildWithGitSSLAndStrategyFetch/bash
time="2021-05-20T15:29:57Z" level=warning msg="Error while executing file based variables removal script" error="exit status 2" job=0 project=0
time="2021-05-20T15:29:57Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:57Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:57Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:29:57Z" level=warning msg="Error while executing file based variables removal script" error="exit status 2" job=0 project=0
time="2021-05-20T15:29:57Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:57Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:29:57Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildWithGitSSLAndStrategyFetch/cmd
=== RUN   TestBuildWithGitSSLAndStrategyFetch/powershell
=== RUN   TestBuildWithGitSSLAndStrategyFetch/pwsh
time="2021-05-20T15:30:01Z" level=warning msg="Error while executing file based variables removal script" error="exit status 2" job=0 project=0
time="2021-05-20T15:30:01Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:01Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:01Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:30:03Z" level=warning msg="Error while executing file based variables removal script" error="exit status 2" job=0 project=0
time="2021-05-20T15:30:03Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:03Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:03Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildWithGitSSLAndStrategyFetch (6.93s)
    --- PASS: TestBuildWithGitSSLAndStrategyFetch/bash (1.55s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test679367757
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor690260808/script302587399/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor690260808/script302587399/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor690260808/script287891898/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor690260808/script287891898/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000a01b0), Stderr:(*bytes.Buffer)(0xc0000a01b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test679367757/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mUpdating/initializing submodules...[0;m
            Submodule 'gitlab-grack' (https://gitlab.com/gitlab-org/gitlab-grack.git) registered for path 'gitlab-grack'
            Cloning into '/tmp/gitlab-runner-custom-executor-test679367757/builds/gitlab-org/ci-cd/tests/gitlab-test/gitlab-grack'...
            Submodule path 'gitlab-grack': checked out '645f6c4c82fd3f5e06f67134450a570b795e55a6'
            Entering 'gitlab-grack'
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor690260808/script637373905/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor690260808/script637373905/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [0K[36;1mCleaning up file based variables[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor690260808/script171535612/script. cleanup_file_variables]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            setting system failure
            
            Unknown build stage "cleanup_file_variables"
            Exitting with code 2
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor197597739/script629386126/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor197597739/script629386126/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor197597739/script532444053/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor197597739/script532444053/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test679367757/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mUpdating/initializing submodules...[0;m
            Synchronizing submodule url for 'gitlab-grack'
            Entering 'gitlab-grack'
            Entering 'gitlab-grack'
            HEAD is now at 645f6c4 CHANGELOG
            Entering 'gitlab-grack'
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor197597739/script784195056/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor197597739/script784195056/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [0K[36;1mCleaning up file based variables[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor197597739/script382795407/script. cleanup_file_variables]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            setting system failure
            
            Unknown build stage "cleanup_file_variables"
            Exitting with code 2
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildWithGitSSLAndStrategyFetch/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildWithGitSSLAndStrategyFetch/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildWithGitSSLAndStrategyFetch/pwsh (5.38s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test464011938
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor019665817/script686217252/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor019665817/script686217252/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor019665817/script081788723/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor019665817/script081788723/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test464011938/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mUpdating/initializing submodules...[0;m
            Submodule 'gitlab-grack' (https://gitlab.com/gitlab-org/gitlab-grack.git) registered for path 'gitlab-grack'
            Cloning into '/tmp/gitlab-runner-custom-executor-test464011938/builds/gitlab-org/ci-cd/tests/gitlab-test/gitlab-grack'...
            Submodule path 'gitlab-grack': checked out '645f6c4c82fd3f5e06f67134450a570b795e55a6'
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            Entering 'gitlab-grack'
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor019665817/script349207798/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor019665817/script349207798/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [0K[36;1mCleaning up file based variables[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor019665817/script429898717/script.ps1 cleanup_file_variables]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            setting system failure
            
            Unknown build stage "cleanup_file_variables"
            Exitting with code 2
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor638600600/script761065495/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor638600600/script761065495/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor638600600/script276646538/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor638600600/script276646538/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo pre-clone-script[0;m
            pre-clone-script
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test464011938/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mUpdating/initializing submodules...[0;m
            Synchronizing submodule url for 'gitlab-grack'
            Entering 'gitlab-grack'
            Entering 'gitlab-grack'
            HEAD is now at 645f6c4 CHANGELOG
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            Entering 'gitlab-grack'
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor638600600/script008428641/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor638600600/script008428641/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [0K[36;1mCleaning up file based variables[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor638600600/script247943244/script.ps1 cleanup_file_variables]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            setting system failure
            
            Unknown build stage "cleanup_file_variables"
            Exitting with code 2
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildChangesBranchesWhenFetchingRepo
=== RUN   TestBuildChangesBranchesWhenFetchingRepo/bash
time="2021-05-20T15:30:03Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:03Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:03Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:30:04Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:04Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:04Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildChangesBranchesWhenFetchingRepo/cmd
=== RUN   TestBuildChangesBranchesWhenFetchingRepo/powershell
=== RUN   TestBuildChangesBranchesWhenFetchingRepo/pwsh
time="2021-05-20T15:30:07Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:07Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:07Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:30:09Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:09Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:09Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildChangesBranchesWhenFetchingRepo (6.19s)
    --- PASS: TestBuildChangesBranchesWhenFetchingRepo/bash (1.37s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test039683387
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor241138526/script245213989/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor241138526/script245213989/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000901b0), Stderr:(*bytes.Buffer)(0xc0000901b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor241138526/script201903680/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor241138526/script201903680/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test039683387/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor241138526/script509912735/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor241138526/script509912735/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000ac060), Stderr:(*bytes.Buffer)(0xc0000ac060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor496529778/script764927017/script. prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor496529778/script764927017/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor496529778/script231444852/script. get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor496529778/script231444852/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000ac060), Stderr:(*bytes.Buffer)(0xc0000ac060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test039683387/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 2371dd05 as add-lfs-object...[0;m
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor496529778/script117665347/script. build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor496529778/script117665347/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
    --- SKIP: TestBuildChangesBranchesWhenFetchingRepo/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildChangesBranchesWhenFetchingRepo/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildChangesBranchesWhenFetchingRepo/pwsh (4.81s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test870022342
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor009324397/script737048040/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor009324397/script737048040/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc00007e1b0), Stderr:(*bytes.Buffer)(0xc00007e1b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor009324397/script638420519/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor009324397/script638420519/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test870022342/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor009324397/script033483610/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor009324397/script033483610/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor572274417/script845184412/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor572274417/script845184412/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor572274417/script009082443/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor572274417/script009082443/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test870022342/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 2371dd05 as add-lfs-object...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor572274417/script725492014/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor572274417/script725492014/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildPowerShellCatchesExceptions
=== RUN   TestBuildPowerShellCatchesExceptions/powershell
=== RUN   TestBuildPowerShellCatchesExceptions/pwsh
time="2021-05-20T15:30:11Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:11Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:11Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:30:13Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:13Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:13Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:30:15Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:15Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:15Z" level=warning cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildPowerShellCatchesExceptions (7.99s)
    --- SKIP: TestBuildPowerShellCatchesExceptions/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildPowerShellCatchesExceptions/pwsh (7.99s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test042294965
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor145139344/script465043119/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor145139344/script465043119/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000aa060), Stderr:(*bytes.Buffer)(0xc0000aa060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor145139344/script085267522/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor145139344/script085267522/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test042294965/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mCreated fresh repository.[0;m
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor145139344/script281198265/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor145139344/script281198265/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor149503172/script584681811/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor149503172/script584681811/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor149503172/script599456406/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor149503172/script599456406/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test042294965/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor149503172/script925427965/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor149503172/script925427965/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor221201464/script093418551/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor221201464/script093418551/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor221201464/script071056426/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor221201464/script071056426/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test042294965/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor221201464/script236495233/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor221201464/script236495233/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
        test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
            [0;m[0K[36;1mPreparing the "custom" executor[0;m
            [0;mCustom Executor binary - "config" stage
            Mocking execution of: []
            
            [0KUsing Custom executor...
            [0;mCustom Executor binary - "prepare" stage
            Mocking execution of: []
            
            PREPARE doesn't accept any arguments. It just does its job
            
            [0K[36;1mPreparing environment[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor517600492/script626709339/script.ps1 prepare_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor517600492/script626709339/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            Running on runner-pvr9xbdq-project-250833-concurrent-0...
            
            <<<<<<<<<<
            
            [0K[36;1mGetting source from Git repository[0;m
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor517600492/script043183358/script.ps1 get_sources]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor517600492/script043183358/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000821b0), Stderr:(*bytes.Buffer)(0xc0000821b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1mFetching changes...[0;m
            Reinitialized existing Git repository in /tmp/gitlab-runner-custom-executor-test042294965/builds/gitlab-org/ci-cd/tests/gitlab-test/.git/
            [32;1mChecking out 91956efe as master...[0;m
            git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
            
            [32;1mSkipping Git submodules setup[0;m
            
            <<<<<<<<<<
            
            [0K[36;1mExecuting "step_script" stage of the job script[0;m
            [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
            [0;mCustom Executor binary - "run" stage
            Mocking execution of: [/tmp/custom-executor517600492/script054713925/script.ps1 build_script]
            
            RUN accepts two arguments: the path to the script to execute and the stage of the job
            
            Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor517600492/script054713925/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000ac060), Stderr:(*bytes.Buffer)(0xc0000ac060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
            
            >>>>>>>>>>
            [32;1m$ echo Hello World[0;m
            Hello
            World
            
            <<<<<<<<<<
            
            [32;1mJob succeeded
            [0;m
=== RUN   TestBuildOnCustomDirectory
=== RUN   TestBuildOnCustomDirectory/bash
=== RUN   TestBuildOnCustomDirectory/bash/custom_directory_defined
time="2021-05-20T15:30:17Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildOnCustomDirectory/bash/custom_directory_not_defined
time="2021-05-20T15:30:17Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:17Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildOnCustomDirectory/cmd
=== RUN   TestBuildOnCustomDirectory/powershell
=== RUN   TestBuildOnCustomDirectory/pwsh
=== RUN   TestBuildOnCustomDirectory/pwsh/custom_directory_defined
time="2021-05-20T15:30:19Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:19Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:19Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildOnCustomDirectory/pwsh/custom_directory_not_defined
time="2021-05-20T15:30:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildOnCustomDirectory (3.88s)
    --- PASS: TestBuildOnCustomDirectory/bash (0.16s)
        --- PASS: TestBuildOnCustomDirectory/bash/custom_directory_defined (0.07s)
            integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test597404384
            test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor617009343/script399873810/script. prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor617009343/script399873810/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor617009343/script669732681/script. get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor617009343/script669732681/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000b8060), Stderr:(*bytes.Buffer)(0xc0000b8060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/custom/directory/0/project-0/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor617009343/script273265172/script. build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor617009343/script273265172/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1m$ pwd[0;m
                /tmp/custom/directory/0/project-0
                
                <<<<<<<<<<
                
                [32;1mJob succeeded
                [0;m
        --- PASS: TestBuildOnCustomDirectory/bash/custom_directory_not_defined (0.08s)
            integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test421379171
            test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor249272422/script790070925/script. prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor249272422/script790070925/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor249272422/script273109640/script. get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor249272422/script273109640/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test421379171/builds/project-0/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor249272422/script067015239/script. build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/bin/bash", Args:[]string{"bash", "/tmp/custom-executor249272422/script067015239/script."}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1m$ pwd[0;m
                /tmp/gitlab-runner-custom-executor-test421379171/builds/project-0
                
                <<<<<<<<<<
                
                [32;1mJob succeeded
                [0;m
    --- SKIP: TestBuildOnCustomDirectory/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildOnCustomDirectory/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildOnCustomDirectory/pwsh (3.73s)
        --- PASS: TestBuildOnCustomDirectory/pwsh/custom_directory_defined (1.59s)
            integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test498489594
            test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor047476753/script900980284/script.ps1 prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor047476753/script900980284/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor047476753/script799647851/script.ps1 get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor047476753/script799647851/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/custom/directory/0/project-0/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor047476753/script013223118/script.ps1 build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor047476753/script013223118/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1m$ pwd[0;m
                
                Path
                ----
                /tmp/custom/directory/0/project-0
                
                
                <<<<<<<<<<
                
                [32;1mJob succeeded
                [0;m
        --- PASS: TestBuildOnCustomDirectory/pwsh/custom_directory_not_defined (1.63s)
            integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test725535701
            test.go:24: [0KRunning with gitlab-runner 13.12.0 (7a6612da)
                [0;m[0K[36;1mPreparing the "custom" executor[0;m
                [0;mCustom Executor binary - "config" stage
                Mocking execution of: []
                
                [0KUsing Custom executor...
                [0;mCustom Executor binary - "prepare" stage
                Mocking execution of: []
                
                PREPARE doesn't accept any arguments. It just does its job
                
                [0K[36;1mPreparing environment[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor537420080/script513623247/script.ps1 prepare_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor537420080/script513623247/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                Running on runner-pvr9xbdq-project-250833-concurrent-0...
                
                <<<<<<<<<<
                
                [0K[36;1mGetting source from Git repository[0;m
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor537420080/script739044322/script.ps1 get_sources]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor537420080/script739044322/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000801b0), Stderr:(*bytes.Buffer)(0xc0000801b0), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1mFetching changes...[0;m
                Initialized empty Git repository in /tmp/gitlab-runner-custom-executor-test725535701/builds/project-0/.git/
                [32;1mCreated fresh repository.[0;m
                [32;1mChecking out 91956efe as master...[0;m
                git-lfs/2.11.0 (GitHub; linux amd64; go 1.14.1; git 48b28d97)
                
                [32;1mSkipping Git submodules setup[0;m
                
                <<<<<<<<<<
                
                [0K[36;1mExecuting "step_script" stage of the job script[0;m
                [0;m[0;33mWARNING: Starting with version 14.0 the 'build_script' stage will be replaced with 'step_script': https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26426
                [0;mCustom Executor binary - "run" stage
                Mocking execution of: [/tmp/custom-executor537420080/script820995545/script.ps1 build_script]
                
                RUN accepts two arguments: the path to the script to execute and the stage of the job
                
                Executing: &exec.Cmd{Path:"/usr/bin/pwsh", Args:[]string{"pwsh", "-NoProfile", "-NonInteractive", "-ExecutionPolicy", "Bypass", "-Command", "/tmp/custom-executor537420080/script820995545/script.ps1"}, Env:[]string(nil), Dir:"", Stdin:io.Reader(nil), Stdout:(*bytes.Buffer)(0xc0000aa060), Stderr:(*bytes.Buffer)(0xc0000aa060), ExtraFiles:[]*os.File(nil), SysProcAttr:(*syscall.SysProcAttr)(nil), Process:(*os.Process)(nil), ProcessState:(*os.ProcessState)(nil), ctx:context.Context(nil), lookPathErr:error(nil), finished:false, childFiles:[]*os.File(nil), closeAfterStart:[]io.Closer(nil), closeAfterWait:[]io.Closer(nil), goroutine:[]func() error(nil), errch:(chan error)(nil), waitDone:(chan struct {})(nil)}
                
                >>>>>>>>>>
                [32;1m$ pwd[0;m
                
                Path
                ----
                /tmp/gitlab-runner-custom-executor-test725535701/builds/project-0
                
                
                <<<<<<<<<<
                
                [32;1mJob succeeded
                [0;m
=== RUN   TestBuildLogLimitExceeded
=== RUN   TestBuildLogLimitExceeded/bash
=== RUN   TestBuildLogLimitExceeded/bash/canceled_job
time="2021-05-20T15:30:21Z" level=warning msg="Error while executing file based variables removal script" error="context canceled" job=0 project=0
time="2021-05-20T15:30:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildLogLimitExceeded/bash/successful_job
time="2021-05-20T15:30:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildLogLimitExceeded/bash/failed_job
time="2021-05-20T15:30:21Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:21Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildLogLimitExceeded/cmd
=== RUN   TestBuildLogLimitExceeded/powershell
=== RUN   TestBuildLogLimitExceeded/pwsh
=== RUN   TestBuildLogLimitExceeded/pwsh/successful_job
time="2021-05-20T15:30:23Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:23Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:23Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildLogLimitExceeded/pwsh/failed_job
time="2021-05-20T15:30:25Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:25Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:25Z" level=warning cleanup_std=err job=0 project=0
=== RUN   TestBuildLogLimitExceeded/pwsh/canceled_job
time="2021-05-20T15:30:25Z" level=warning msg="Custom Executor binary - \"cleanup\" stage" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:25Z" level=warning msg="Mocking execution of: []" cleanup_std=err job=0 project=0
time="2021-05-20T15:30:25Z" level=warning cleanup_std=err job=0 project=0
--- PASS: TestBuildLogLimitExceeded (3.91s)
    --- PASS: TestBuildLogLimitExceeded/bash (0.21s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test893172580
        --- PASS: TestBuildLogLimitExceeded/bash/canceled_job (0.05s)
        --- PASS: TestBuildLogLimitExceeded/bash/successful_job (0.07s)
        --- PASS: TestBuildLogLimitExceeded/bash/failed_job (0.08s)
    --- SKIP: TestBuildLogLimitExceeded/cmd (0.00s)
        integration_tests.go:14: cmd failed exec: "cmd": executable file not found in $PATH
    --- SKIP: TestBuildLogLimitExceeded/powershell (0.00s)
        integration_tests.go:14: powershell failed exec: "powershell": executable file not found in $PATH
    --- PASS: TestBuildLogLimitExceeded/pwsh (3.70s)
        integration_test.go:49: Build directory: /tmp/gitlab-runner-custom-executor-test945681513
        --- PASS: TestBuildLogLimitExceeded/pwsh/successful_job (1.59s)
        --- PASS: TestBuildLogLimitExceeded/pwsh/failed_job (1.60s)
        --- PASS: TestBuildLogLimitExceeded/pwsh/canceled_job (0.00s)
PASS
coverage: 27.6% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/custom	43.389s	coverage: 27.6% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 0 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/custom/command' package with coverprofile in 'count' mode:
[0m
=== RUN   TestCommand_Run
=== RUN   TestCommand_Run/error_on_cmd_start()
=== RUN   TestCommand_Run/command_ends_with_a_build_failure
=== RUN   TestCommand_Run/command_ends_with_a_system_failure
=== RUN   TestCommand_Run/command_ends_with_a_unknown_failure
=== RUN   TestCommand_Run/command_times_out
--- PASS: TestCommand_Run (1.50s)
    --- PASS: TestCommand_Run/error_on_cmd_start() (0.00s)
        command_test.go:34: PASS:	Start()
        command_test.go:34: PASS:	Wait()
    --- PASS: TestCommand_Run/command_ends_with_a_build_failure (0.50s)
        command_test.go:34: PASS:	Start()
        command_test.go:34: PASS:	Wait()
    --- PASS: TestCommand_Run/command_ends_with_a_system_failure (0.50s)
        command_test.go:34: PASS:	Start()
        command_test.go:34: PASS:	Wait()
    --- PASS: TestCommand_Run/command_ends_with_a_unknown_failure (0.50s)
        command_test.go:34: PASS:	Start()
        command_test.go:34: PASS:	Wait()
    --- PASS: TestCommand_Run/command_times_out (0.00s)
        command_test.go:34: PASS:	Start()
        command_test.go:34: PASS:	Wait()
        command_test.go:35: PASS:	KillAndWait(*process.MockCommander,string)
PASS
coverage: 1.4% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/custom/command	1.518s	coverage: 1.4% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 0 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/docker' package with coverprofile in 'count' mode:
[0m
go: downloading github.com/docker/cli v20.10.2+incompatible
go: downloading gitlab.com/gitlab-org/gitlab-terminal v0.0.0-20210104151801-2a71b03b4462
go: downloading github.com/bmatcuk/doublestar v1.3.0
go: downloading github.com/kardianos/osext v0.0.0-20160811001526-c2c54e542fb7
go: downloading github.com/hashicorp/go-version v1.2.1
go: extracting github.com/hashicorp/go-version v1.2.1
go: extracting github.com/kardianos/osext v0.0.0-20160811001526-c2c54e542fb7
go: extracting github.com/bmatcuk/doublestar v1.3.0
go: extracting gitlab.com/gitlab-org/gitlab-terminal v0.0.0-20210104151801-2a71b03b4462
go: extracting github.com/docker/cli v20.10.2+incompatible
go: downloading github.com/docker/docker-credential-helpers v0.4.1
go: extracting github.com/docker/docker-credential-helpers v0.4.1
go: finding github.com/bmatcuk/doublestar v1.3.0
go: finding github.com/docker/cli v20.10.2+incompatible
go: finding github.com/kardianos/osext v0.0.0-20160811001526-c2c54e542fb7
go: finding gitlab.com/gitlab-org/gitlab-terminal v0.0.0-20210104151801-2a71b03b4462
go: finding github.com/docker/docker-credential-helpers v0.4.1
go: finding github.com/hashicorp/go-version v1.2.1
=== RUN   TestParseDeviceStringOne
--- PASS: TestParseDeviceStringOne (0.00s)
=== RUN   TestParseDeviceStringTwo
--- PASS: TestParseDeviceStringTwo (0.00s)
=== RUN   TestParseDeviceStringThree
--- PASS: TestParseDeviceStringThree (0.00s)
=== RUN   TestParseDeviceStringFour
--- PASS: TestParseDeviceStringFour (0.00s)
=== RUN   TestBindDeviceRequests
=== RUN   TestBindDeviceRequests/all
=== RUN   TestBindDeviceRequests/#00
=== RUN   TestBindDeviceRequests/somestring=thatshouldtriggeranerror
--- PASS: TestBindDeviceRequests (0.00s)
    --- PASS: TestBindDeviceRequests/all (0.00s)
    --- PASS: TestBindDeviceRequests/#00 (0.00s)
    --- PASS: TestBindDeviceRequests/somestring=thatshouldtriggeranerror (0.00s)
=== RUN   TestVerifyAllowedImage
--- PASS: TestVerifyAllowedImage (0.00s)
=== RUN   TestServiceFromNamedImage
=== RUN   TestServiceFromNamedImage/service
=== RUN   TestServiceFromNamedImage/service:version
=== RUN   TestServiceFromNamedImage/namespace/service
=== RUN   TestServiceFromNamedImage/namespace/service:version
=== RUN   TestServiceFromNamedImage/domain.tld/service
=== RUN   TestServiceFromNamedImage/domain.tld/service:version
=== RUN   TestServiceFromNamedImage/domain.tld/namespace/service
=== RUN   TestServiceFromNamedImage/domain.tld/namespace/service:version
=== RUN   TestServiceFromNamedImage/domain.tld:8080/service
=== RUN   TestServiceFromNamedImage/domain.tld:8080/service:version
=== RUN   TestServiceFromNamedImage/domain.tld:8080/namespace/service
=== RUN   TestServiceFromNamedImage/domain.tld:8080/namespace/service:version
=== RUN   TestServiceFromNamedImage/subdomain.domain.tld:8080/service
=== RUN   TestServiceFromNamedImage/subdomain.domain.tld:8080/service:version
=== RUN   TestServiceFromNamedImage/subdomain.domain.tld:8080/namespace/service
=== RUN   TestServiceFromNamedImage/subdomain.domain.tld:8080/namespace/service:version
--- PASS: TestServiceFromNamedImage (0.01s)
    --- PASS: TestServiceFromNamedImage/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/namespace/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/namespace/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld/namespace/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld/namespace/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld:8080/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld:8080/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld:8080/namespace/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/domain.tld:8080/namespace/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/subdomain.domain.tld:8080/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/subdomain.domain.tld:8080/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/subdomain.domain.tld:8080/namespace/service (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
    --- PASS: TestServiceFromNamedImage/subdomain.domain.tld:8080/namespace/service:version (0.00s)
        docker_test.go:288: PASS:	GetDockerImage(string)
        docker_test.go:288: PASS:	ContainerRemove(*context.emptyCtx,mock.argumentMatcher,types.ContainerRemoveOptions)
        docker_test.go:288: PASS:	NetworkList(*context.emptyCtx,types.NetworkListOptions)
        docker_test.go:288: PASS:	NetworkDisconnect(*context.emptyCtx,string,mock.argumentMatcher,bool)
        docker_test.go:288: PASS:	ContainerCreate(string,string,string,string,string)
        docker_test.go:288: PASS:	ContainerStart(*context.emptyCtx,string,string)
=== RUN   TestHelperImageWithVariable
--- PASS: TestHelperImageWithVariable (0.00s)
    docker_test.go:330: PASS:	GetDockerImage(string)
=== RUN   TestPrepareBuildsDir
=== RUN   TestPrepareBuildsDir/rootDir's_parent_mounted_as_volume
=== RUN   TestPrepareBuildsDir/rootDir_is_not_an_absolute_path
=== RUN   TestPrepareBuildsDir/rootDir_is_/
=== RUN   TestPrepareBuildsDir/error_on_volume_parsing
=== RUN   TestPrepareBuildsDir/error_on_volume_parser_creation
=== RUN   TestPrepareBuildsDir/rootDir_mounted_as_host_based_volume
=== RUN   TestPrepareBuildsDir/rootDir_mounted_as_container_based_volume
=== RUN   TestPrepareBuildsDir/rootDir_not_mounted_as_volume
--- PASS: TestPrepareBuildsDir (0.00s)
    --- PASS: TestPrepareBuildsDir/rootDir's_parent_mounted_as_volume (0.00s)
    --- PASS: TestPrepareBuildsDir/rootDir_is_not_an_absolute_path (0.00s)
    --- PASS: TestPrepareBuildsDir/rootDir_is_/ (0.00s)
    --- PASS: TestPrepareBuildsDir/error_on_volume_parsing (0.00s)
    --- PASS: TestPrepareBuildsDir/error_on_volume_parser_creation (0.00s)
    --- PASS: TestPrepareBuildsDir/rootDir_mounted_as_host_based_volume (0.00s)
    --- PASS: TestPrepareBuildsDir/rootDir_mounted_as_container_based_volume (0.00s)
    --- PASS: TestPrepareBuildsDir/rootDir_not_mounted_as_volume (0.00s)
=== RUN   TestCreateVolumes
=== RUN   TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_other_error_on_user_volume
=== RUN   TestCreateVolumes/volumes_manager_not_created
=== RUN   TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_no_errors_on_user_volume
=== RUN   TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_cache_containers_disabled_wrapped_error_on_user_volume
=== RUN   TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_duplicated_error_on_user_volume
=== RUN   TestCreateVolumes/no_volumes_defined,_empty_buildsDir,_clone_strategy,_no_errors
=== RUN   TestCreateVolumes/no_volumes_defined,_defined_buildsDir,_clone_strategy,_no_errors
=== RUN   TestCreateVolumes/no_volumes_defined,_defined_buildsDir,_fetch_strategy,_no_errors
=== RUN   TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_cache_containers_disabled_error_on_user_volume
--- PASS: TestCreateVolumes (0.00s)
    --- PASS: TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_other_error_on_user_volume (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/volumes_manager_not_created (0.00s)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_no_errors_on_user_volume (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_cache_containers_disabled_wrapped_error_on_user_volume (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_duplicated_error_on_user_volume (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/no_volumes_defined,_empty_buildsDir,_clone_strategy,_no_errors (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/no_volumes_defined,_defined_buildsDir,_clone_strategy,_no_errors (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/no_volumes_defined,_defined_buildsDir,_fetch_strategy,_no_errors (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateVolumes/volumes_defined,_empty_buildsDir,_clone_strategy,_cache_containers_disabled_error_on_user_volume (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
PASS
coverage: 8.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/docker	0.038s	coverage: 8.7% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 1 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/docker' package with coverprofile in 'count' mode:
[0m
=== RUN   TestCreateBuildVolume
=== RUN   TestCreateBuildVolume/volumes_manager_not_created
=== RUN   TestCreateBuildVolume/git_strategy_clone,_empty_buildsDir,_other_error
=== RUN   TestCreateBuildVolume/git_strategy_clone,_empty_buildsDir,_duplicated_error
=== RUN   TestCreateBuildVolume/git_strategy_clone,_non-empty_buildsDir,_other_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_other_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_cache_volumes_disabled_wrapped_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_cache_volumes_disabled,_duplicated_error
=== RUN   TestCreateBuildVolume/git_strategy_clone,_non-empty_buildsDir,_duplicated_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_empty_buildsDir,_duplicated_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_wrapped_duplicated_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_empty_buildsDir,_other_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_no_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_duplicated_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_cache_volumes_disabled
=== RUN   TestCreateBuildVolume/git_strategy_clone,_empty_buildsDir,_no_error
=== RUN   TestCreateBuildVolume/git_strategy_clone,_non-empty_buildsDir,_no_error
=== RUN   TestCreateBuildVolume/git_strategy_fetch,_empty_buildsDir,_no_error
--- PASS: TestCreateBuildVolume (0.01s)
    --- PASS: TestCreateBuildVolume/volumes_manager_not_created (0.00s)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_clone,_empty_buildsDir,_other_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_clone,_empty_buildsDir,_duplicated_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_clone,_non-empty_buildsDir,_other_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_other_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_cache_volumes_disabled_wrapped_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_cache_volumes_disabled,_duplicated_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_clone,_non-empty_buildsDir,_duplicated_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_empty_buildsDir,_duplicated_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_wrapped_duplicated_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_empty_buildsDir,_other_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_no_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_duplicated_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_non-empty_buildsDir,_cache_volumes_disabled (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_clone,_empty_buildsDir,_no_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_clone,_non-empty_buildsDir,_no_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	CreateTemporary(string,string)
        docker_test.go:452: PASS:	Close()
    --- PASS: TestCreateBuildVolume/git_strategy_fetch,_empty_buildsDir,_no_error (0.00s)
        docker_test.go:451: PASS:	RemoveTemporary(string)
        docker_test.go:451: PASS:	Create(string,string)
        docker_test.go:452: PASS:	Close()
=== RUN   TestCreateDependencies
--- PASS: TestCreateDependencies (0.00s)
    docker_test.go:451: PASS:	RemoveTemporary(string)
    docker_test.go:451: PASS:	CreateTemporary(string,string)
    docker_test.go:451: PASS:	Create(string,string)
    docker_test.go:451: PASS:	Binds()
    docker_test.go:452: PASS:	Close()
    docker_test.go:452: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:452: PASS:	NetworkList(string,string)
    docker_test.go:452: PASS:	ContainerRemove(string,mock.argumentMatcher,string)
    docker_test.go:452: PASS:	ContainerRemove(string,string,string)
    docker_test.go:452: PASS:	ContainerCreate(string,string,mock.argumentMatcher,string,mock.argumentMatcher)
    docker_test.go:452: PASS:	ContainerStart(string,string,string)
=== RUN   TestDockerMemorySetting
--- PASS: TestDockerMemorySetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerMemorySwapSetting
--- PASS: TestDockerMemorySwapSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerMemoryReservationSetting
--- PASS: TestDockerMemoryReservationSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerCPUSSetting
=== RUN   TestDockerCPUSSetting/0.5
=== RUN   TestDockerCPUSSetting/0.25
=== RUN   TestDockerCPUSSetting/1/3
=== RUN   TestDockerCPUSSetting/1/8
=== RUN   TestDockerCPUSSetting/0.0001
--- PASS: TestDockerCPUSSetting (0.00s)
    --- PASS: TestDockerCPUSSetting/0.5 (0.00s)
        docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
        docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
        docker_test.go:967: PASS:	NetworkList(string,string)
        docker_test.go:967: PASS:	ContainerRemove(string,string,string)
        docker_test.go:967: PASS:	ContainerInspect(string,string)
    --- PASS: TestDockerCPUSSetting/0.25 (0.00s)
        docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
        docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
        docker_test.go:967: PASS:	NetworkList(string,string)
        docker_test.go:967: PASS:	ContainerRemove(string,string,string)
        docker_test.go:967: PASS:	ContainerInspect(string,string)
    --- PASS: TestDockerCPUSSetting/1/3 (0.00s)
        docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
        docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
        docker_test.go:967: PASS:	NetworkList(string,string)
        docker_test.go:967: PASS:	ContainerRemove(string,string,string)
        docker_test.go:967: PASS:	ContainerInspect(string,string)
    --- PASS: TestDockerCPUSSetting/1/8 (0.00s)
        docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
        docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
        docker_test.go:967: PASS:	NetworkList(string,string)
        docker_test.go:967: PASS:	ContainerRemove(string,string,string)
        docker_test.go:967: PASS:	ContainerInspect(string,string)
    --- PASS: TestDockerCPUSSetting/0.0001 (0.00s)
        docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
        docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
        docker_test.go:967: PASS:	NetworkList(string,string)
        docker_test.go:967: PASS:	ContainerRemove(string,string,string)
        docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerCPUSetCPUsSetting
--- PASS: TestDockerCPUSetCPUsSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerServicesTmpfsSetting
--- PASS: TestDockerServicesTmpfsSetting (0.00s)
    docker_test.go:995: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:995: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:995: PASS:	NetworkList(string,string)
    docker_test.go:995: PASS:	ContainerRemove(string,string,string)
    docker_test.go:995: PASS:	ContainerStart(string,string,string)
=== RUN   TestDockerTmpfsSetting
--- PASS: TestDockerTmpfsSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerServicesDNSSetting
--- PASS: TestDockerServicesDNSSetting (0.00s)
    docker_test.go:995: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:995: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:995: PASS:	NetworkList(string,string)
    docker_test.go:995: PASS:	ContainerRemove(string,string,string)
    docker_test.go:995: PASS:	ContainerStart(string,string,string)
PASS
coverage: 11.3% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/docker	0.037s	coverage: 11.3% of statements in gitlab.com/gitlab-org/gitlab-runner/...
[1m

--- Starting part 2 of go tests of 'gitlab.com/gitlab-org/gitlab-runner/executors/docker' package with coverprofile in 'count' mode:
[0m
=== RUN   TestDockerServicesDNSSearchSetting
--- PASS: TestDockerServicesDNSSearchSetting (0.00s)
    docker_test.go:995: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:995: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:995: PASS:	NetworkList(string,string)
    docker_test.go:995: PASS:	ContainerRemove(string,string,string)
    docker_test.go:995: PASS:	ContainerStart(string,string,string)
=== RUN   TestDockerServicesExtraHostsSetting
--- PASS: TestDockerServicesExtraHostsSetting (0.00s)
    docker_test.go:995: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:995: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:995: PASS:	NetworkList(string,string)
    docker_test.go:995: PASS:	ContainerRemove(string,string,string)
    docker_test.go:995: PASS:	ContainerStart(string,string,string)
=== RUN   TestDockerServiceUserNSSetting
--- PASS: TestDockerServiceUserNSSetting (0.00s)
    docker_test.go:995: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:995: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:995: PASS:	NetworkList(string,string)
    docker_test.go:995: PASS:	ContainerRemove(string,string,string)
    docker_test.go:995: PASS:	ContainerStart(string,string,string)
    docker_test.go:995: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:995: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:995: PASS:	NetworkList(string,string)
    docker_test.go:995: PASS:	ContainerRemove(string,string,string)
    docker_test.go:995: PASS:	ContainerStart(string,string,string)
=== RUN   TestDockerUserNSSetting
--- PASS: TestDockerUserNSSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerRuntimeSetting
--- PASS: TestDockerRuntimeSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerSysctlsSetting
--- PASS: TestDockerSysctlsSetting (0.00s)
    docker_test.go:967: PASS:	ImageInspectWithRaw(string,string)
    docker_test.go:967: PASS:	ImagePullBlocking(string,string,string)
    docker_test.go:967: PASS:	NetworkList(string,string)
    docker_test.go:967: PASS:	ContainerRemove(string,string,string)
    docker_test.go:967: PASS:	ContainerInspect(string,string)
=== RUN   TestDockerCreateNetwork
=== RUN   TestDockerCreateNetwork/network_cleanup_failed
=== RUN   TestDockerCreateNetwork/networks_manager_not_created
=== RUN   TestDockerCreateNetwork/network_not_created
=== RUN   TestDockerCreateNetwork/network_created
=== RUN   TestDockerCreateNetwork/network_creation_failed
=== RUN   TestDockerCreateNetwork/network_inspect_failed
=== RUN   TestDockerCreateNetwork/removing_container_failed
--- PASS: TestDockerCreateNetwork (0.00s)
    --- PASS: TestDockerCreateNetwork/network_cleanup_failed (0.00s)
        docker_test.go:1340: PASS:	Create(string,string)
        docker_test.go:1340: PASS:	Inspect(string)
        docker_test.go:1340: PASS:	Cleanup(string)
    --- PASS: TestDockerCreateNetwork/networks_manager_not_created (0.00s)
    --- PASS: TestDockerCreateNetwork/network_not_created (0.00s)
        docker_test.go:1340: PASS:	Create(string,string)
        docker_test.go:1340: PASS:	Inspect(string)
        docker_test.go:1340: PASS:	Cleanup(string)
    --- PASS: TestDockerCreateNetwork/network_created (0.00s)
        docker_test.go:1340: PASS:	Create(string,string)
        docker_test.go:1340: PASS:	Inspect(string)
        docker_test.go:1340: PASS:	Cleanup(string)
    --- PASS: TestDockerCreateNetwork/network_creation_failed (0.00s)
        docker_test.go:1340: PASS:	Create(string,string)
    --- PASS: TestDockerCreateNetwork/network_inspect_failed (0.00s)
        docker_test.go:1340: PASS:	Create(string,string)
        docker_test.go:1340: PASS:	Inspect(string)
    --- PASS: TestDockerCreateNetwork/removing_container_failed (0.00s)
        docker_test.go:1340: PASS:	Create(string,string)
        docker_test.go:1340: PASS:	Inspect(string)
        docker_test.go:1340: PASS:	Cleanup(string)
        docker_test.go:1341: PASS:	NetworkList(string,string)
        docker_test.go:1341: PASS:	ContainerRemove(string,string,string)
=== RUN   TestCheckOSType
=== RUN   TestCheckOSType/executor_and_docker_info_match
=== RUN   TestCheckOSType/executor_OSType_not_defined
=== RUN   TestCheckOSType/executor_and_docker_info_mismatch
--- PASS: TestCheckOSType (0.00s)
    --- PASS: TestCheckOSType/executor_and_docker_info_match (0.00s)
    --- PASS: TestCheckOSType/executor_OSType_not_defined (0.00s)
    --- PASS: TestCheckOSType/executor_and_docker_info_mismatch (0.00s)
=== RUN   TestGetServiceDefinitions
=== RUN   TestGetServiceDefinitions/all_services_with_proper_name_and_alias
=== RUN   TestGetServiceDefinitions/build_service_not_in_internal_images_but_empty_allowed_services
=== RUN   TestGetServiceDefinitions/build_service_not_in_internal_images
=== RUN   TestGetServiceDefinitions/build_service_not_in_allowed_services_but_in_internal_images
=== RUN   TestGetServiceDefinitions/empty_service_name
--- PASS: TestGetServiceDefinitions (0.00s)
    --- PASS: TestGetServiceDefinitions/all_services_with_proper_name_and_alias (0.00s)
    --- PASS: TestGetServiceDefinitions/build_service_not_in_internal_images_but_empty_allowed_services (0.00s)
    --- PASS: TestGetServiceDefinitions/build_service_not_in_internal_images (0.00s)
    --- PASS: TestGetServiceDefinitions/build_service_not_in_allowed_services_but_in_internal_images (0.00s)
    --- PASS: TestGetServiceDefinitions/empty_service_name (0.00s)
=== RUN   TestAddServiceHealthCheck
=== RUN   TestAddServiceHealthCheck/network_mode_not_defined
=== RUN   TestAddServiceHealthCheck/get_ports_via_environment
=== RUN   TestAddServiceHealthCheck/get_port_from_many
=== RUN   TestAddServiceHealthCheck/no_ports_defined
=== RUN   TestAddServiceHealthCheck/container_inspect_error
--- PASS: TestAddServiceHealthCheck (0.00s)
    --- PASS: TestAddServiceHealthCheck/network_mode_not_defined (0.00s)
    --- PASS: TestAddServiceHealthCheck/get_ports_via_environment (0.00s)
        docker_test.go:1694: PASS:	ContainerInspect(string,string)
    --- PASS: TestAddServiceHealthCheck/get_port_from_many (0.00s)
        docker_test.go:1694: PASS:	ContainerInspect(string,string)
    --- PASS: TestAddServiceHealthCheck/no_ports_defined (0.00s)
        docker_test.go:1694: PASS:	ContainerInspect(string,string)
    --- PASS: TestAddServiceHealthCheck/container_inspect_error (0.00s)
        docker_test.go:1694: PASS:	ContainerInspect(string,string)
PASS
coverage: 8.8% of statements in gitlab.com/gitlab-org/gitlab-runner/...
ok  	gitlab.com/gitlab-org/gitlab-runner/executors/docker	0.027s	coverage: 8.8% of statements in gitlab.com/gitlab-org/gitlab-runner/...
section_end:1621524638:step_script
[0Ksection_start:1621524638:archive_cache
[0K[0K[36;1mSaving cache for successful job[0;m
[0;m[32;1mCreating cache unit test 2/8-v13-12-0-2...[0;m
[0;33mWARNING: /builds/gitlab-org/gitlab-runner/.gocache-false/: no matching files[0;m 
Uploading cache.zip to https://storage.googleapis.com/gitlab-org-ci-runners-cache/project/250833/unit%20test%202/8-v13-12-0-2[0;m 
[32;1mCreated cache[0;m
section_end:1621524638:archive_cache
[0Ksection_start:1621524638:upload_artifacts_on_success
[0K[0K[36;1mUploading artifacts for successful job[0;m
[0;m[32;1mUploading artifacts...[0;m
.cover/*: found 15 matching files and directories [0;m 
.testoutput/*: found 15 matching files and directories[0;m 
Uploading artifacts as "archive" to coordinator... ok[0;m  id[0;m=1280281228 responseStatus[0;m=201 Created token[0;m=wxW5PEaM
section_end:1621524640:upload_artifacts_on_success
[0Ksection_start:1621524640:cleanup_file_variables
[0K[0K[36;1mCleaning up file based variables[0;m
[0;msection_end:1621524641:cleanup_file_variables
[0K[32;1mJob succeeded
[0;m