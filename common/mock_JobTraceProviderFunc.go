// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockJobTraceProviderFunc is an autogenerated mock type for the JobTraceProviderFunc type
type MockJobTraceProviderFunc struct {
	mock.Mock
}

type MockJobTraceProviderFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobTraceProviderFunc) EXPECT() *MockJobTraceProviderFunc_Expecter {
	return &MockJobTraceProviderFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: jobManager, config, jobCredentials, startOffset
func (_m *MockJobTraceProviderFunc) Execute(jobManager JobManager, config RunnerConfig, jobCredentials *JobCredentials, startOffset int64) (JobTrace, error) {
	ret := _m.Called(jobManager, config, jobCredentials, startOffset)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 JobTrace
	var r1 error
	if rf, ok := ret.Get(0).(func(JobManager, RunnerConfig, *JobCredentials, int64) (JobTrace, error)); ok {
		return rf(jobManager, config, jobCredentials, startOffset)
	}
	if rf, ok := ret.Get(0).(func(JobManager, RunnerConfig, *JobCredentials, int64) JobTrace); ok {
		r0 = rf(jobManager, config, jobCredentials, startOffset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(JobTrace)
		}
	}

	if rf, ok := ret.Get(1).(func(JobManager, RunnerConfig, *JobCredentials, int64) error); ok {
		r1 = rf(jobManager, config, jobCredentials, startOffset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobTraceProviderFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockJobTraceProviderFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - jobManager JobManager
//   - config RunnerConfig
//   - jobCredentials *JobCredentials
//   - startOffset int64
func (_e *MockJobTraceProviderFunc_Expecter) Execute(jobManager interface{}, config interface{}, jobCredentials interface{}, startOffset interface{}) *MockJobTraceProviderFunc_Execute_Call {
	return &MockJobTraceProviderFunc_Execute_Call{Call: _e.mock.On("Execute", jobManager, config, jobCredentials, startOffset)}
}

func (_c *MockJobTraceProviderFunc_Execute_Call) Run(run func(jobManager JobManager, config RunnerConfig, jobCredentials *JobCredentials, startOffset int64)) *MockJobTraceProviderFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(JobManager), args[1].(RunnerConfig), args[2].(*JobCredentials), args[3].(int64))
	})
	return _c
}

func (_c *MockJobTraceProviderFunc_Execute_Call) Return(_a0 JobTrace, _a1 error) *MockJobTraceProviderFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobTraceProviderFunc_Execute_Call) RunAndReturn(run func(JobManager, RunnerConfig, *JobCredentials, int64) (JobTrace, error)) *MockJobTraceProviderFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobTraceProviderFunc creates a new instance of MockJobTraceProviderFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobTraceProviderFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobTraceProviderFunc {
	mock := &MockJobTraceProviderFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
