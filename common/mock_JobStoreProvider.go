// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockJobStoreProvider is an autogenerated mock type for the JobStoreProvider type
type MockJobStoreProvider struct {
	mock.Mock
}

type MockJobStoreProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobStoreProvider) EXPECT() *MockJobStoreProvider_Expecter {
	return &MockJobStoreProvider_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: config
func (_m *MockJobStoreProvider) Get(config *RunnerConfig) (JobStore, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 JobStore
	var r1 error
	if rf, ok := ret.Get(0).(func(*RunnerConfig) (JobStore, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*RunnerConfig) JobStore); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(JobStore)
		}
	}

	if rf, ok := ret.Get(1).(func(*RunnerConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobStoreProvider_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockJobStoreProvider_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - config *RunnerConfig
func (_e *MockJobStoreProvider_Expecter) Get(config interface{}) *MockJobStoreProvider_Get_Call {
	return &MockJobStoreProvider_Get_Call{Call: _e.mock.On("Get", config)}
}

func (_c *MockJobStoreProvider_Get_Call) Run(run func(config *RunnerConfig)) *MockJobStoreProvider_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*RunnerConfig))
	})
	return _c
}

func (_c *MockJobStoreProvider_Get_Call) Return(_a0 JobStore, _a1 error) *MockJobStoreProvider_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobStoreProvider_Get_Call) RunAndReturn(run func(*RunnerConfig) (JobStore, error)) *MockJobStoreProvider_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockJobStoreProvider) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockJobStoreProvider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockJobStoreProvider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockJobStoreProvider_Expecter) Name() *MockJobStoreProvider_Name_Call {
	return &MockJobStoreProvider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockJobStoreProvider_Name_Call) Run(run func()) *MockJobStoreProvider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobStoreProvider_Name_Call) Return(_a0 string) *MockJobStoreProvider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobStoreProvider_Name_Call) RunAndReturn(run func() string) *MockJobStoreProvider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobStoreProvider creates a new instance of MockJobStoreProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobStoreProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobStoreProvider {
	mock := &MockJobStoreProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
