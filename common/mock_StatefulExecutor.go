// Code generated by mockery v2.53.3. DO NOT EDIT.

package common

import mock "github.com/stretchr/testify/mock"

// MockStatefulExecutor is an autogenerated mock type for the StatefulExecutor type
type MockStatefulExecutor struct {
	mock.Mock
}

type MockStatefulExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatefulExecutor) EXPECT() *MockStatefulExecutor_Expecter {
	return &MockStatefulExecutor_Expecter{mock: &_m.Mock}
}

// GetState provides a mock function with no fields
func (_m *MockStatefulExecutor) GetState() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockStatefulExecutor_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockStatefulExecutor_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *MockStatefulExecutor_Expecter) GetState() *MockStatefulExecutor_GetState_Call {
	return &MockStatefulExecutor_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *MockStatefulExecutor_GetState_Call) Run(run func()) *MockStatefulExecutor_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStatefulExecutor_GetState_Call) Return(_a0 interface{}) *MockStatefulExecutor_GetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatefulExecutor_GetState_Call) RunAndReturn(run func() interface{}) *MockStatefulExecutor_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// Resume provides a mock function with given fields: cmd
func (_m *MockStatefulExecutor) Resume(cmd ExecutorCommand) error {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ExecutorCommand) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStatefulExecutor_Resume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resume'
type MockStatefulExecutor_Resume_Call struct {
	*mock.Call
}

// Resume is a helper method to define mock.On call
//   - cmd ExecutorCommand
func (_e *MockStatefulExecutor_Expecter) Resume(cmd interface{}) *MockStatefulExecutor_Resume_Call {
	return &MockStatefulExecutor_Resume_Call{Call: _e.mock.On("Resume", cmd)}
}

func (_c *MockStatefulExecutor_Resume_Call) Run(run func(cmd ExecutorCommand)) *MockStatefulExecutor_Resume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ExecutorCommand))
	})
	return _c
}

func (_c *MockStatefulExecutor_Resume_Call) Return(_a0 error) *MockStatefulExecutor_Resume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatefulExecutor_Resume_Call) RunAndReturn(run func(ExecutorCommand) error) *MockStatefulExecutor_Resume_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function with given fields: _a0
func (_m *MockStatefulExecutor) SetState(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockStatefulExecutor_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type MockStatefulExecutor_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockStatefulExecutor_Expecter) SetState(_a0 interface{}) *MockStatefulExecutor_SetState_Call {
	return &MockStatefulExecutor_SetState_Call{Call: _e.mock.On("SetState", _a0)}
}

func (_c *MockStatefulExecutor_SetState_Call) Run(run func(_a0 interface{})) *MockStatefulExecutor_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockStatefulExecutor_SetState_Call) Return(_a0 bool) *MockStatefulExecutor_SetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatefulExecutor_SetState_Call) RunAndReturn(run func(interface{}) bool) *MockStatefulExecutor_SetState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatefulExecutor creates a new instance of MockStatefulExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatefulExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatefulExecutor {
	mock := &MockStatefulExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
