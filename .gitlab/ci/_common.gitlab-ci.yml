variables:
  # renovate: datasource=docker depName=golang allowedVersions=/1\.21\..+/
  GO_VERSION: "1.22.5"
  # Sometimes the FIPS repo lags behind the official releases
  GO_FIPS_VERSION: "1.22.5"
  # Account for the suffix used in https://github.com/golang-fips/go/releases/tag/go1.22.3-2-openssl-fips
  GO_FIPS_VERSION_SUFFIX: "-1-openssl-fips"
  GO_CI_IMAGE: "$GO_VERSION-bookworm"
  CI_IMAGE: "registry.gitlab.com/gitlab-org/gitlab-runner/ci:$GO_CI_IMAGE-1"
  # Feature flags
  FF_SCRIPT_SECTIONS: "true"
  FF_USE_FASTZIP: "true"
  FF_USE_NEW_BASH_EVAL_STRATEGY: "true"
  # Following variables are used in some jobs to install specified software
  RELEASE_INDEX_GEN_VERSION: "latest"
  DOCKER_VERSION: 24.0.5
  DOCKER_MACHINE_VERSION: "v0.16.2-gitlab.28"
  BUILDX_VERSION: 0.10.4
  KUBECTL_VERSION: 1.23.0
  AWS_CLI_VERSION: 2.4.19
  GIT_VERSION: "2.40.1"
  GIT_VERSION_BUILD: "1"
  GIT_LFS_VERSION: "3.5.1"
  YQ_VERSION: "4.30.5"
  LICENSE_MANAGEMENT_SETUP_CMD: echo "Skip setup. Dependency already vendored"
  DOCS_GITLAB_REPO_SUFFIX: "runner"
  # We're overriding rules for the jobs that we want to run.
  # This will disable all other rules.
  DEPENDENCY_SCANNING_DISABLED: "true"
  TRANSFER_METER_FREQUENCY: "5s"
  CACHE_COMPRESSION_FORMAT: tarzstd
  GO111MODULE: "on"
  GO_FIPS_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/go-fips:$GO_FIPS_VERSION
  # Leaving the Alpine and UBI versions defined here until the renovate pattern is changed
  # to recognize the definitions as a Go variable
  # renovate: datasource=docker depName=alpine allowedVersions=/3\.16\..+/
  ALPINE_316_VERSION: "3.16.9"
  # renovate: datasource=docker depName=alpine allowedVersions=/3\.17\..+/
  ALPINE_317_VERSION: "3.17.7"
  # renovate: datasource=docker depName=alpine allowedVersions=/3\.18\..+/
  ALPINE_318_VERSION: "3.18.6"
  # renovate: datasource=docker depName=alpine allowedVersions=/3\.19\..+/
  ALPINE_319_VERSION: "3.19.1"
  # renovate: datasource=docker depName=ubuntu allowedVersions=/20\..+/
  UBUNTU_VERSION: "20.04"
  # renovate: datasource=docker depName=redhat/ubi9-minimal versioning=redhat allowedVersions=/9\.4-.+/
  UBI_FIPS_VERSION: "9.4-1227"
  UBI_FIPS_BASE_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ubi-fips-base
  PACKAGES_ITERATION: "1"

default:
  image: $CI_IMAGE
  tags:
    - gitlab-org
  retry:
    max: 2
    when:
      - runner_system_failure

.no_cache:
  cache: {}

.no_dependencies:
  dependencies: []

.no_cache_and_dependencies:
  extends:
    - .no_cache
    - .no_dependencies

.docker:
  services:
    - docker:${DOCKER_VERSION}-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "/certs/client"
  tags:
    - gitlab-org-docker

.docker_qemu-before_script: &docker_qemu-before_script
  - docker run --privileged --rm tonistiigi/binfmt --install all

.docker_qemu:
  before_script:
    - *docker_qemu-before_script

.go-cache:
  variables:
    GOCACHE: $CI_PROJECT_DIR/.gocache-$CI_COMMIT_REF_PROTECTED
  before_script:
    - mkdir -p "$GOCACHE"
  cache:
    paths:
      - $CI_PROJECT_DIR/.gocache-false/
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"

.go-cache-docker-qemu:
  extends:
    - .go-cache
  before_script:
    - *docker_qemu-before_script
    - mkdir -p "$GOCACHE"

.go-cache-windows:
  variables:
    GOCACHE: $CI_PROJECT_DIR\.gocache-$CI_COMMIT_REF_PROTECTED
  before_script:
    - New-Item -Path "$Env:GOCACHE" -Type Directory -Force
  cache:
    paths:
      - $CI_PROJECT_DIR\.gocache-false\
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"

.windows-dependency-checksums:
  variables:
    GIT_WINDOWS_AMD64_CHECKSUM: "36498716572394918625476ca207df3d5f8b535a669e9aad7a99919d0179848c"
    GIT_LFS_WINDOWS_AMD64_CHECKSUM: "94435072f6b3a6f9064b277760c8340e432b5ede0db8205d369468b9be52c6b6"
    PWSH_WINDOWS_AMD64_CHECKSUM: "CF0C8BD757EEC6434A5830352EA6F15ACE237296BB7E4AE778F7707583023AC3"

.windows1809_variables:
  variables:
    WINDOWS_VERSION: servercore1809

.windows1809:
  extends:
    - .windows1809_variables
  tags:
    - windows
    - windows-1809

.windows1809_nano:
  extends:
    - .windows1809
  variables:
    WINDOWS_VERSION: nanoserver1809

.windows21H2_variables:
  variables:
    WINDOWS_VERSION: servercore21H2

.windows21H2:
  extends:
    - .windows21H2_variables
  tags:
    - windows
    - windows-21h1 # todo: use windows-2022 when ready (https://gitlab.com/gitlab-org/ci-cd/shared-runners/infrastructure/-/issues/61)

.windows21H2_nano:
  extends:
    - .windows21H2
  variables:
    WINDOWS_VERSION: nanoserver21H2

# .stage_done is used as a sentinel at stage n for stage n-1 completion, so we can kick off builds in later stages
# without explicitly waiting for the completion of the n-1 stage
.stage_done:
  extends:
    - .no_cache_and_dependencies
    - .rules:merge_request_pipelines
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  script:
    - exit 0
