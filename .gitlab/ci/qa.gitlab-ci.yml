check version definition:
  stage: qa
  extends:
    - .rules:merge_request_pipelines
    - .kubernetes runner
  needs: []
  script:
    - grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' VERSION

check modules:
  stage: qa
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs:
    - "prepare done"
  script:
    - make check_modules

check generated files:
  stage: qa
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_cache_and_dependencies
    - .kubernetes runner
    - .check generated files kubernetes limits
  needs:
    - "prepare done"
  script:
    - make check_generated_files

check magefiles:
  stage: qa
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs:
    - "prepare done"
  script:
    - make check_magefiles

check test directives:
  stage: qa
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs:
    - "prepare done"
  script:
    - make check_test_directives

code_quality:
  stage: qa
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .no_dependencies
    # Use GOCACHE instead of GOLANGCI_LINT_CACHE
    # to avoid [false lint positives](https://gitlab.com/gitlab-org/gitlab-runner/-/merge_requests/2187#note_373008672)
    - .go-cache
  image: registry.gitlab.com/gitlab-org/ci-cd/runner-tools/runner-linters:2.3.1-go${GO_VERSION}
  needs: []
  allow_failure: true
  variables:
    REPORT_FILE: gl-code-quality-report.json
    LINT_FLAGS: "--color=never --timeout=15m"
    OUT_FORMAT: "--output.code-climate.path=gl-code-quality-report.json"
    GOLANGLINT_VERSION: "" # Don't add version suffix to Makefile's GOLANGLINT (use plain golangci-lint from image)
  before_script:
    - !reference [.go-cache, before_script]
    # Ensure the goargs linter plugin is available at .tmp/bin/goargs.so to suit .golangci.yml
    - mkdir -p .tmp/bin && ln -s /usr/lib/goargs.so .tmp/bin/goargs.so
    # Copy the Docker image's golangci-lint to the location expected by `make lint` so that it is not built
    - cp $(which golangci-lint) .tmp/bin/golangci-lint
  script:
    - make --silent lint
  timeout: 20 minutes
  artifacts:
    reports:
      codequality: ${REPORT_FILE}
    paths:
      - ${REPORT_FILE}
    when: always
    expire_in: 7d

mage tests:
  extends:
    - .rules:merge_request_pipelines:no_docs
    - .kubernetes runner
  stage: qa
  needs:
    - "prepare done"
  script:
    - make mage-test

# Perform documentation linting and link checking on Markdown files
docs:lint markdown:
  image: $DOCS_LINT_IMAGE
  stage: qa
  extends:
    - .rules:merge_request_pipelines:docs
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs: []
  script:
    # Makefiles in this project expect Go to be available
    - apk add --quiet go
    # Lint content and Markdown, and check links
    - make lint-docs VALE_MIN_ALERT_LEVEL=error

docs:lint i18n markdown:
  image: $DOCS_LINT_IMAGE
  stage: qa
  extends:
    - .rules:merge_request_pipelines:docs-i18n
    - .no_cache_and_dependencies
  needs: []
  script:
    # Makefiles in this project expect Go to be available
    - apk add --quiet go
    # Lint i18n content and Markdown
    - make lint-i18n-docs VALE_MIN_ALERT_LEVEL=error

# Verify localized documentation files have corresponding English versions
docs:lint i18n paths:
  image: $DOCS_LINT_IMAGE
  stage: qa
  extends:
    - .rules:merge_request_pipelines:docs-i18n
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs: []
  script:
    # Run the i18n path verification script
    - ./scripts/docs_i18n_verify_paths

docs:check feature flags:
  stage: qa
  extends:
    - .rules:merge_request_pipelines
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs: []
  script:
    - cp docs/configuration/feature-flags.md docs/configuration/feature-flags.md.orig
    - make update_feature_flags_docs
    - |
      diff docs/configuration/feature-flags.md.orig docs/configuration/feature-flags.md || (
        echo
        echo "Feature Flags list in documentation is not up-to-date"
        echo "Run 'make update_feature_flags_docs' to update it"
        echo
        exit 1
      )

docs:check development docs Go version:
  extends:
    - .rules:merge_request_pipelines:docs
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs: []
  stage: qa
  script:
    - export GO_VERSION=$(cat .gitlab/ci/_common.gitlab-ci.yml | yq '.variables.GO_VERSION')
    - export EXIT_CODE=0
    - grep $GO_VERSION docs/development/_index.md || EXIT_CODE=$?
    - if [ $EXIT_CODE -ne 0 ]; then echo "Make sure to update all Go versions in docs/development/_index.md to $GO_VERSION"; exit 1; fi

docs:check Kubernetes API docs:
  extends:
    - .rules:merge_request_pipelines:docs
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs: []
  stage: qa
  script:
    - cp docs/executors/kubernetes/_index.md docs/executors/kubernetes/_index.md.orig
    - mage k8s:generatePermissionsDocs
    - |
      diff docs/executors/kubernetes/_index.md.orig docs/executors/kubernetes/_index.md || (
        echo
        echo "Kubernetes API list in documentation is not up-to-date"
        echo "Run 'mage k8s:generatePermissionsDocs' to update it"
        echo
        exit 1
      )

# This jobs is triggered weekly and needs the PACKAGECLOUD_TOKEN variable scope to the autogen/docs environment to run.
docs:check supported distros package docs:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_PATH == "gitlab-org/gitlab-runner"
  stage: qa
  environment:
    name: autogen/docs
    url: https://packages.gitlab.com/runner/gitlab-runner
  script:
    - cp docs/install/linux-repository.md docs/install/linux-repository.md.orig
    - mage package:docs
    - |
      diff docs/install/linux-repository.md.orig docs/install/linux-repository.md || (
        echo
        echo "Supported distributions documentation is not up-to-date"
        echo "Run 'mage package:docs' to update it"
        echo
        exit 1
      )

docs:check Hugo build:
  image: registry.gitlab.com/gitlab-org/technical-writing/docs-gitlab-com/docs-gitlab-com-builder:hugo-0.150.1
  extends:
    - .rules:merge_request_pipelines:docs-all
    - .no_cache_and_dependencies
    - .kubernetes runner
  needs: []
  stage: qa
  variables:
    DOCS_BRANCH: "main"
  before_script:
    # Check if this a release branch, which would be the case for a backport.
    # If this is a backport MR, we need to checkout the appropriate version
    # of the Docs website.
    - |
      if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ [0-9]+-[0-9]+-stable ]]; then
        BRANCH_NAME=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        echo "Detected merge request to stable branch: $BRANCH_NAME"
      # Check if we're directly on a stable branch (direct push/commit)
      elif [[ $CI_COMMIT_BRANCH =~ [0-9]+-[0-9]+-stable ]]; then
        BRANCH_NAME=$CI_COMMIT_BRANCH
        echo "Detected direct commit to stable branch: $BRANCH_NAME"
      fi

      # Extract version info if we found a stable branch
      if [[ -n $BRANCH_NAME ]]; then
        MAJOR=$(echo $BRANCH_NAME | cut -d '-' -f 1)
        MINOR=$(echo $BRANCH_NAME | cut -d '-' -f 2)
        # Convert GitLab Runner style (17-9-stable) to GitLab Docs style (17.9)
        DOCS_BRANCH_CANDIDATE="$MAJOR.$MINOR"

        # Check if the branch exists in the Docs website repo, fallback to main if not
        if git ls-remote --heads --exit-code https://gitlab.com/gitlab-org/technical-writing/docs-gitlab-com.git "refs/heads/$DOCS_BRANCH_CANDIDATE" >/dev/null 2>&1; then
          DOCS_BRANCH="$DOCS_BRANCH_CANDIDATE"
          echo "Using docs-gitlab-com branch $DOCS_BRANCH for release branch"
        else
          DOCS_BRANCH="main"
          echo "Branch $DOCS_BRANCH_CANDIDATE does not exist, falling back to main"
        fi
      fi
    # Clone the GitLab Docs project
    - echo "Cloning Docs site $DOCS_BRANCH branch..."
    - git clone --depth 1 --filter=tree:0 --branch $DOCS_BRANCH https://gitlab.com/gitlab-org/technical-writing/docs-gitlab-com.git
    - cd docs-gitlab-com
    - make add-latest-icons
  script:
    # Test that Hugo will build
    - hugo --gc --printPathWarnings --panicOnWarning --environment test
    # Test for invalid index pages
    # See https://gitlab.com/gitlab-org/technical-writing/docs-gitlab-com/-/blob/main/scripts/check-index-filenames.sh
    - make check-index-pages SEARCH_DIR="../docs"
    - make check-index-pages SEARCH_DIR="../docs-locale"

yaml:lint:
  stage: qa
  image: node:18-alpine
  needs: []
  extends:
    - .rules:merge_request_pipelines
    - .kubernetes runner
  script:
    - npm install -g prettier@3.0.3
    - echo "Checking YAML formatting in .gitlab/ci/ directory..."
    - prettier --check ".gitlab/ci/**/*.{yml,yaml}" --log-level warn
