// Code generated by mockery v2.53.3. DO NOT EDIT.

package terminal

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

type MockConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConn) EXPECT() *MockConn_Expecter {
	return &MockConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConn_Expecter) Close() *MockConn_Close_Call {
	return &MockConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConn_Close_Call) Run(run func()) *MockConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Close_Call) Return(_a0 error) *MockConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_Close_Call) RunAndReturn(run func() error) *MockConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: w, r, timeoutCh, disconnectCh
func (_m *MockConn) Start(w http.ResponseWriter, r *http.Request, timeoutCh chan error, disconnectCh chan error) {
	_m.Called(w, r, timeoutCh, disconnectCh)
}

// MockConn_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockConn_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - timeoutCh chan error
//   - disconnectCh chan error
func (_e *MockConn_Expecter) Start(w interface{}, r interface{}, timeoutCh interface{}, disconnectCh interface{}) *MockConn_Start_Call {
	return &MockConn_Start_Call{Call: _e.mock.On("Start", w, r, timeoutCh, disconnectCh)}
}

func (_c *MockConn_Start_Call) Run(run func(w http.ResponseWriter, r *http.Request, timeoutCh chan error, disconnectCh chan error)) *MockConn_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(chan error), args[3].(chan error))
	})
	return _c
}

func (_c *MockConn_Start_Call) Return() *MockConn_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_Start_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, chan error, chan error)) *MockConn_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
