// Code generated by mockery v2.53.3. DO NOT EDIT.

package terminal

import mock "github.com/stretchr/testify/mock"

// MockInteractiveTerminal is an autogenerated mock type for the InteractiveTerminal type
type MockInteractiveTerminal struct {
	mock.Mock
}

type MockInteractiveTerminal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInteractiveTerminal) EXPECT() *MockInteractiveTerminal_Expecter {
	return &MockInteractiveTerminal_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with no fields
func (_m *MockInteractiveTerminal) Connect() (Conn, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 Conn
	var r1 error
	if rf, ok := ret.Get(0).(func() (Conn, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Conn)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInteractiveTerminal_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockInteractiveTerminal_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockInteractiveTerminal_Expecter) Connect() *MockInteractiveTerminal_Connect_Call {
	return &MockInteractiveTerminal_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockInteractiveTerminal_Connect_Call) Run(run func()) *MockInteractiveTerminal_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInteractiveTerminal_Connect_Call) Return(_a0 Conn, _a1 error) *MockInteractiveTerminal_Connect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInteractiveTerminal_Connect_Call) RunAndReturn(run func() (Conn, error)) *MockInteractiveTerminal_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInteractiveTerminal creates a new instance of MockInteractiveTerminal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInteractiveTerminal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInteractiveTerminal {
	mock := &MockInteractiveTerminal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
