// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package terminal

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockInteractiveTerminal creates a new instance of MockInteractiveTerminal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInteractiveTerminal(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInteractiveTerminal {
	mock := &MockInteractiveTerminal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInteractiveTerminal is an autogenerated mock type for the InteractiveTerminal type
type MockInteractiveTerminal struct {
	mock.Mock
}

type MockInteractiveTerminal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInteractiveTerminal) EXPECT() *MockInteractiveTerminal_Expecter {
	return &MockInteractiveTerminal_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockInteractiveTerminal
func (_mock *MockInteractiveTerminal) Connect() (Conn, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 Conn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (Conn, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Conn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInteractiveTerminal_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockInteractiveTerminal_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockInteractiveTerminal_Expecter) Connect() *MockInteractiveTerminal_Connect_Call {
	return &MockInteractiveTerminal_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockInteractiveTerminal_Connect_Call) Run(run func()) *MockInteractiveTerminal_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInteractiveTerminal_Connect_Call) Return(conn Conn, err error) *MockInteractiveTerminal_Connect_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *MockInteractiveTerminal_Connect_Call) RunAndReturn(run func() (Conn, error)) *MockInteractiveTerminal_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

type MockConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConn) EXPECT() *MockConn_Expecter {
	return &MockConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockConn
func (_mock *MockConn) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConn_Expecter) Close() *MockConn_Close_Call {
	return &MockConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConn_Close_Call) Run(run func()) *MockConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Close_Call) Return(err error) *MockConn_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_Close_Call) RunAndReturn(run func() error) *MockConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockConn
func (_mock *MockConn) Start(w http.ResponseWriter, r *http.Request, timeoutCh chan error, disconnectCh chan error) {
	_mock.Called(w, r, timeoutCh, disconnectCh)
	return
}

// MockConn_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockConn_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - timeoutCh chan error
//   - disconnectCh chan error
func (_e *MockConn_Expecter) Start(w interface{}, r interface{}, timeoutCh interface{}, disconnectCh interface{}) *MockConn_Start_Call {
	return &MockConn_Start_Call{Call: _e.mock.On("Start", w, r, timeoutCh, disconnectCh)}
}

func (_c *MockConn_Start_Call) Run(run func(w http.ResponseWriter, r *http.Request, timeoutCh chan error, disconnectCh chan error)) *MockConn_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 chan error
		if args[2] != nil {
			arg2 = args[2].(chan error)
		}
		var arg3 chan error
		if args[3] != nil {
			arg3 = args[3].(chan error)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockConn_Start_Call) Return() *MockConn_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_Start_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, timeoutCh chan error, disconnectCh chan error)) *MockConn_Start_Call {
	_c.Run(run)
	return _c
}
