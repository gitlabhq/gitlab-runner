// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package proxy

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPooler creates a new instance of MockPooler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPooler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPooler {
	mock := &MockPooler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPooler is an autogenerated mock type for the Pooler type
type MockPooler struct {
	mock.Mock
}

type MockPooler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPooler) EXPECT() *MockPooler_Expecter {
	return &MockPooler_Expecter{mock: &_m.Mock}
}

// Pool provides a mock function for the type MockPooler
func (_mock *MockPooler) Pool() Pool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pool")
	}

	var r0 Pool
	if returnFunc, ok := ret.Get(0).(func() Pool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pool)
		}
	}
	return r0
}

// MockPooler_Pool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pool'
type MockPooler_Pool_Call struct {
	*mock.Call
}

// Pool is a helper method to define mock.On call
func (_e *MockPooler_Expecter) Pool() *MockPooler_Pool_Call {
	return &MockPooler_Pool_Call{Call: _e.mock.On("Pool")}
}

func (_c *MockPooler_Pool_Call) Run(run func()) *MockPooler_Pool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPooler_Pool_Call) Return(pool Pool) *MockPooler_Pool_Call {
	_c.Call.Return(pool)
	return _c
}

func (_c *MockPooler_Pool_Call) RunAndReturn(run func() Pool) *MockPooler_Pool_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequester creates a new instance of MockRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequester {
	mock := &MockRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRequester is an autogenerated mock type for the Requester type
type MockRequester struct {
	mock.Mock
}

type MockRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequester) EXPECT() *MockRequester_Expecter {
	return &MockRequester_Expecter{mock: &_m.Mock}
}

// ProxyRequest provides a mock function for the type MockRequester
func (_mock *MockRequester) ProxyRequest(w http.ResponseWriter, r *http.Request, requestedURI string, port string, settings *Settings) {
	_mock.Called(w, r, requestedURI, port, settings)
	return
}

// MockRequester_ProxyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProxyRequest'
type MockRequester_ProxyRequest_Call struct {
	*mock.Call
}

// ProxyRequest is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - requestedURI string
//   - port string
//   - settings *Settings
func (_e *MockRequester_Expecter) ProxyRequest(w interface{}, r interface{}, requestedURI interface{}, port interface{}, settings interface{}) *MockRequester_ProxyRequest_Call {
	return &MockRequester_ProxyRequest_Call{Call: _e.mock.On("ProxyRequest", w, r, requestedURI, port, settings)}
}

func (_c *MockRequester_ProxyRequest_Call) Run(run func(w http.ResponseWriter, r *http.Request, requestedURI string, port string, settings *Settings)) *MockRequester_ProxyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 *Settings
		if args[4] != nil {
			arg4 = args[4].(*Settings)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockRequester_ProxyRequest_Call) Return() *MockRequester_ProxyRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequester_ProxyRequest_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, requestedURI string, port string, settings *Settings)) *MockRequester_ProxyRequest_Call {
	_c.Run(run)
	return _c
}
