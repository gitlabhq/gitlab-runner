// Code generated by mockery v2.53.3. DO NOT EDIT.

package proxy

import mock "github.com/stretchr/testify/mock"

// MockPooler is an autogenerated mock type for the Pooler type
type MockPooler struct {
	mock.Mock
}

type MockPooler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPooler) EXPECT() *MockPooler_Expecter {
	return &MockPooler_Expecter{mock: &_m.Mock}
}

// Pool provides a mock function with no fields
func (_m *MockPooler) Pool() Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pool")
	}

	var r0 Pool
	if rf, ok := ret.Get(0).(func() Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Pool)
		}
	}

	return r0
}

// MockPooler_Pool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pool'
type MockPooler_Pool_Call struct {
	*mock.Call
}

// Pool is a helper method to define mock.On call
func (_e *MockPooler_Expecter) Pool() *MockPooler_Pool_Call {
	return &MockPooler_Pool_Call{Call: _e.mock.On("Pool")}
}

func (_c *MockPooler_Pool_Call) Run(run func()) *MockPooler_Pool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPooler_Pool_Call) Return(_a0 Pool) *MockPooler_Pool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPooler_Pool_Call) RunAndReturn(run func() Pool) *MockPooler_Pool_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPooler creates a new instance of MockPooler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPooler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPooler {
	mock := &MockPooler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
