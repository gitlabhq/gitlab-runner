// Code generated by mockery v2.53.3. DO NOT EDIT.

package session

import mock "github.com/stretchr/testify/mock"

// mockSessionFinderFn is an autogenerated mock type for the sessionFinderFn type
type mockSessionFinderFn struct {
	mock.Mock
}

type mockSessionFinderFn_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSessionFinderFn) EXPECT() *mockSessionFinderFn_Expecter {
	return &mockSessionFinderFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: url
func (_m *mockSessionFinderFn) Execute(url string) *Session {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *Session
	if rf, ok := ret.Get(0).(func(string) *Session); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	return r0
}

// mockSessionFinderFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockSessionFinderFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - url string
func (_e *mockSessionFinderFn_Expecter) Execute(url interface{}) *mockSessionFinderFn_Execute_Call {
	return &mockSessionFinderFn_Execute_Call{Call: _e.mock.On("Execute", url)}
}

func (_c *mockSessionFinderFn_Execute_Call) Run(run func(url string)) *mockSessionFinderFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockSessionFinderFn_Execute_Call) Return(_a0 *Session) *mockSessionFinderFn_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionFinderFn_Execute_Call) RunAndReturn(run func(string) *Session) *mockSessionFinderFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSessionFinderFn creates a new instance of mockSessionFinderFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSessionFinderFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSessionFinderFn {
	mock := &mockSessionFinderFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
