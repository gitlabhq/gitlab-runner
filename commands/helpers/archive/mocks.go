// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package archive

import (
	"context"
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockArchiver creates a new instance of MockArchiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArchiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArchiver {
	mock := &MockArchiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArchiver is an autogenerated mock type for the Archiver type
type MockArchiver struct {
	mock.Mock
}

type MockArchiver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArchiver) EXPECT() *MockArchiver_Expecter {
	return &MockArchiver_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function for the type MockArchiver
func (_mock *MockArchiver) Archive(ctx context.Context, files map[string]os.FileInfo) error {
	ret := _mock.Called(ctx, files)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]os.FileInfo) error); ok {
		r0 = returnFunc(ctx, files)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArchiver_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockArchiver_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx context.Context
//   - files map[string]os.FileInfo
func (_e *MockArchiver_Expecter) Archive(ctx interface{}, files interface{}) *MockArchiver_Archive_Call {
	return &MockArchiver_Archive_Call{Call: _e.mock.On("Archive", ctx, files)}
}

func (_c *MockArchiver_Archive_Call) Run(run func(ctx context.Context, files map[string]os.FileInfo)) *MockArchiver_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]os.FileInfo
		if args[1] != nil {
			arg1 = args[1].(map[string]os.FileInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockArchiver_Archive_Call) Return(err error) *MockArchiver_Archive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArchiver_Archive_Call) RunAndReturn(run func(ctx context.Context, files map[string]os.FileInfo) error) *MockArchiver_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExtractor creates a new instance of MockExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtractor {
	mock := &MockExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExtractor is an autogenerated mock type for the Extractor type
type MockExtractor struct {
	mock.Mock
}

type MockExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtractor) EXPECT() *MockExtractor_Expecter {
	return &MockExtractor_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function for the type MockExtractor
func (_mock *MockExtractor) Extract(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExtractor_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type MockExtractor_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExtractor_Expecter) Extract(ctx interface{}) *MockExtractor_Extract_Call {
	return &MockExtractor_Extract_Call{Call: _e.mock.On("Extract", ctx)}
}

func (_c *MockExtractor_Extract_Call) Run(run func(ctx context.Context)) *MockExtractor_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExtractor_Extract_Call) Return(err error) *MockExtractor_Extract_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExtractor_Extract_Call) RunAndReturn(run func(ctx context.Context) error) *MockExtractor_Extract_Call {
	_c.Call.Return(run)
	return _c
}
