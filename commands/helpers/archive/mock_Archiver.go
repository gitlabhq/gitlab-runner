// Code generated by mockery v2.53.3. DO NOT EDIT.

package archive

import (
	context "context"
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockArchiver is an autogenerated mock type for the Archiver type
type MockArchiver struct {
	mock.Mock
}

type MockArchiver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArchiver) EXPECT() *MockArchiver_Expecter {
	return &MockArchiver_Expecter{mock: &_m.Mock}
}

// Archive provides a mock function with given fields: ctx, files
func (_m *MockArchiver) Archive(ctx context.Context, files map[string]fs.FileInfo) error {
	ret := _m.Called(ctx, files)

	if len(ret) == 0 {
		panic("no return value specified for Archive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]fs.FileInfo) error); ok {
		r0 = rf(ctx, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArchiver_Archive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Archive'
type MockArchiver_Archive_Call struct {
	*mock.Call
}

// Archive is a helper method to define mock.On call
//   - ctx context.Context
//   - files map[string]fs.FileInfo
func (_e *MockArchiver_Expecter) Archive(ctx interface{}, files interface{}) *MockArchiver_Archive_Call {
	return &MockArchiver_Archive_Call{Call: _e.mock.On("Archive", ctx, files)}
}

func (_c *MockArchiver_Archive_Call) Run(run func(ctx context.Context, files map[string]fs.FileInfo)) *MockArchiver_Archive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]fs.FileInfo))
	})
	return _c
}

func (_c *MockArchiver_Archive_Call) Return(_a0 error) *MockArchiver_Archive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArchiver_Archive_Call) RunAndReturn(run func(context.Context, map[string]fs.FileInfo) error) *MockArchiver_Archive_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArchiver creates a new instance of MockArchiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArchiver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArchiver {
	mock := &MockArchiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
