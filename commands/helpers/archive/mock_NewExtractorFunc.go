// Code generated by mockery v2.53.3. DO NOT EDIT.

package archive

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockNewExtractorFunc is an autogenerated mock type for the NewExtractorFunc type
type MockNewExtractorFunc struct {
	mock.Mock
}

type MockNewExtractorFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNewExtractorFunc) EXPECT() *MockNewExtractorFunc_Expecter {
	return &MockNewExtractorFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: r, size, dir
func (_m *MockNewExtractorFunc) Execute(r io.ReaderAt, size int64, dir string) (Extractor, error) {
	ret := _m.Called(r, size, dir)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 Extractor
	var r1 error
	if rf, ok := ret.Get(0).(func(io.ReaderAt, int64, string) (Extractor, error)); ok {
		return rf(r, size, dir)
	}
	if rf, ok := ret.Get(0).(func(io.ReaderAt, int64, string) Extractor); ok {
		r0 = rf(r, size, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Extractor)
		}
	}

	if rf, ok := ret.Get(1).(func(io.ReaderAt, int64, string) error); ok {
		r1 = rf(r, size, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNewExtractorFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockNewExtractorFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - r io.ReaderAt
//   - size int64
//   - dir string
func (_e *MockNewExtractorFunc_Expecter) Execute(r interface{}, size interface{}, dir interface{}) *MockNewExtractorFunc_Execute_Call {
	return &MockNewExtractorFunc_Execute_Call{Call: _e.mock.On("Execute", r, size, dir)}
}

func (_c *MockNewExtractorFunc_Execute_Call) Run(run func(r io.ReaderAt, size int64, dir string)) *MockNewExtractorFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.ReaderAt), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockNewExtractorFunc_Execute_Call) Return(_a0 Extractor, _a1 error) *MockNewExtractorFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNewExtractorFunc_Execute_Call) RunAndReturn(run func(io.ReaderAt, int64, string) (Extractor, error)) *MockNewExtractorFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNewExtractorFunc creates a new instance of MockNewExtractorFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNewExtractorFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNewExtractorFunc {
	mock := &MockNewExtractorFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
