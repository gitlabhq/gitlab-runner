// Code generated by mockery v2.53.3. DO NOT EDIT.

package meter

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockUpdateCallback is an autogenerated mock type for the UpdateCallback type
type MockUpdateCallback struct {
	mock.Mock
}

type MockUpdateCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateCallback) EXPECT() *MockUpdateCallback_Expecter {
	return &MockUpdateCallback_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: written, since, done
func (_m *MockUpdateCallback) Execute(written uint64, since time.Duration, done bool) {
	_m.Called(written, since, done)
}

// MockUpdateCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockUpdateCallback_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - written uint64
//   - since time.Duration
//   - done bool
func (_e *MockUpdateCallback_Expecter) Execute(written interface{}, since interface{}, done interface{}) *MockUpdateCallback_Execute_Call {
	return &MockUpdateCallback_Execute_Call{Call: _e.mock.On("Execute", written, since, done)}
}

func (_c *MockUpdateCallback_Execute_Call) Run(run func(written uint64, since time.Duration, done bool)) *MockUpdateCallback_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(time.Duration), args[2].(bool))
	})
	return _c
}

func (_c *MockUpdateCallback_Execute_Call) Return() *MockUpdateCallback_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUpdateCallback_Execute_Call) RunAndReturn(run func(uint64, time.Duration, bool)) *MockUpdateCallback_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockUpdateCallback creates a new instance of MockUpdateCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateCallback {
	mock := &MockUpdateCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
