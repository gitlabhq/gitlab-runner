// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package helpers

import (
	mock "github.com/stretchr/testify/mock"
)

// newMockLogStreamProvider creates a new instance of mockLogStreamProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogStreamProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogStreamProvider {
	mock := &mockLogStreamProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogStreamProvider is an autogenerated mock type for the logStreamProvider type
type mockLogStreamProvider struct {
	mock.Mock
}

type mockLogStreamProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogStreamProvider) EXPECT() *mockLogStreamProvider_Expecter {
	return &mockLogStreamProvider_Expecter{mock: &_m.Mock}
}

// Open provides a mock function for the type mockLogStreamProvider
func (_mock *mockLogStreamProvider) Open() (readSeekCloser, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 readSeekCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (readSeekCloser, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() readSeekCloser); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(readSeekCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockLogStreamProvider_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type mockLogStreamProvider_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *mockLogStreamProvider_Expecter) Open() *mockLogStreamProvider_Open_Call {
	return &mockLogStreamProvider_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *mockLogStreamProvider_Open_Call) Run(run func()) *mockLogStreamProvider_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLogStreamProvider_Open_Call) Return(readSeekCloserMoqParam readSeekCloser, err error) *mockLogStreamProvider_Open_Call {
	_c.Call.Return(readSeekCloserMoqParam, err)
	return _c
}

func (_c *mockLogStreamProvider_Open_Call) RunAndReturn(run func() (readSeekCloser, error)) *mockLogStreamProvider_Open_Call {
	_c.Call.Return(run)
	return _c
}

// newMockReadSeekCloser creates a new instance of mockReadSeekCloser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockReadSeekCloser(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockReadSeekCloser {
	mock := &mockReadSeekCloser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockReadSeekCloser is an autogenerated mock type for the readSeekCloser type
type mockReadSeekCloser struct {
	mock.Mock
}

type mockReadSeekCloser_Expecter struct {
	mock *mock.Mock
}

func (_m *mockReadSeekCloser) EXPECT() *mockReadSeekCloser_Expecter {
	return &mockReadSeekCloser_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type mockReadSeekCloser
func (_mock *mockReadSeekCloser) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockReadSeekCloser_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockReadSeekCloser_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockReadSeekCloser_Expecter) Close() *mockReadSeekCloser_Close_Call {
	return &mockReadSeekCloser_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockReadSeekCloser_Close_Call) Run(run func()) *mockReadSeekCloser_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockReadSeekCloser_Close_Call) Return(err error) *mockReadSeekCloser_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockReadSeekCloser_Close_Call) RunAndReturn(run func() error) *mockReadSeekCloser_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type mockReadSeekCloser
func (_mock *mockReadSeekCloser) Read(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockReadSeekCloser_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type mockReadSeekCloser_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *mockReadSeekCloser_Expecter) Read(p interface{}) *mockReadSeekCloser_Read_Call {
	return &mockReadSeekCloser_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *mockReadSeekCloser_Read_Call) Run(run func(p []byte)) *mockReadSeekCloser_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockReadSeekCloser_Read_Call) Return(n int, err error) *mockReadSeekCloser_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mockReadSeekCloser_Read_Call) RunAndReturn(run func(p []byte) (int, error)) *mockReadSeekCloser_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function for the type mockReadSeekCloser
func (_mock *mockReadSeekCloser) Seek(offset int64, whence int) (int64, error) {
	ret := _mock.Called(offset, whence)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return returnFunc(offset, whence)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = returnFunc(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = returnFunc(offset, whence)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockReadSeekCloser_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type mockReadSeekCloser_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - offset int64
//   - whence int
func (_e *mockReadSeekCloser_Expecter) Seek(offset interface{}, whence interface{}) *mockReadSeekCloser_Seek_Call {
	return &mockReadSeekCloser_Seek_Call{Call: _e.mock.On("Seek", offset, whence)}
}

func (_c *mockReadSeekCloser_Seek_Call) Run(run func(offset int64, whence int)) *mockReadSeekCloser_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockReadSeekCloser_Seek_Call) Return(n int64, err error) *mockReadSeekCloser_Seek_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *mockReadSeekCloser_Seek_Call) RunAndReturn(run func(offset int64, whence int) (int64, error)) *mockReadSeekCloser_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogOutputWriter creates a new instance of mockLogOutputWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogOutputWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogOutputWriter {
	mock := &mockLogOutputWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogOutputWriter is an autogenerated mock type for the logOutputWriter type
type mockLogOutputWriter struct {
	mock.Mock
}

type mockLogOutputWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogOutputWriter) EXPECT() *mockLogOutputWriter_Expecter {
	return &mockLogOutputWriter_Expecter{mock: &_m.Mock}
}

// Write provides a mock function for the type mockLogOutputWriter
func (_mock *mockLogOutputWriter) Write(s string) {
	_mock.Called(s)
	return
}

// mockLogOutputWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type mockLogOutputWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - s string
func (_e *mockLogOutputWriter_Expecter) Write(s interface{}) *mockLogOutputWriter_Write_Call {
	return &mockLogOutputWriter_Write_Call{Call: _e.mock.On("Write", s)}
}

func (_c *mockLogOutputWriter_Write_Call) Run(run func(s string)) *mockLogOutputWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockLogOutputWriter_Write_Call) Return() *mockLogOutputWriter_Write_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogOutputWriter_Write_Call) RunAndReturn(run func(s string)) *mockLogOutputWriter_Write_Call {
	_c.Run(run)
	return _c
}
