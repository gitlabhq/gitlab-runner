// Code generated by mockery v2.53.3. DO NOT EDIT.

package kubernetes

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// mockLogStreamer is an autogenerated mock type for the logStreamer type
type mockLogStreamer struct {
	mock.Mock
}

type mockLogStreamer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogStreamer) EXPECT() *mockLogStreamer_Expecter {
	return &mockLogStreamer_Expecter{mock: &_m.Mock}
}

// Stream provides a mock function with given fields: ctx, offset, output
func (_m *mockLogStreamer) Stream(ctx context.Context, offset int64, output io.Writer) error {
	ret := _m.Called(ctx, offset, output)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, io.Writer) error); ok {
		r0 = rf(ctx, offset, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLogStreamer_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type mockLogStreamer_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int64
//   - output io.Writer
func (_e *mockLogStreamer_Expecter) Stream(ctx interface{}, offset interface{}, output interface{}) *mockLogStreamer_Stream_Call {
	return &mockLogStreamer_Stream_Call{Call: _e.mock.On("Stream", ctx, offset, output)}
}

func (_c *mockLogStreamer_Stream_Call) Run(run func(ctx context.Context, offset int64, output io.Writer)) *mockLogStreamer_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(io.Writer))
	})
	return _c
}

func (_c *mockLogStreamer_Stream_Call) Return(_a0 error) *mockLogStreamer_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLogStreamer_Stream_Call) RunAndReturn(run func(context.Context, int64, io.Writer) error) *mockLogStreamer_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *mockLogStreamer) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLogStreamer_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type mockLogStreamer_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *mockLogStreamer_Expecter) String() *mockLogStreamer_String_Call {
	return &mockLogStreamer_String_Call{Call: _e.mock.On("String")}
}

func (_c *mockLogStreamer_String_Call) Run(run func()) *mockLogStreamer_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLogStreamer_String_Call) Return(_a0 string) *mockLogStreamer_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLogStreamer_String_Call) RunAndReturn(run func() string) *mockLogStreamer_String_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogStreamer creates a new instance of mockLogStreamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogStreamer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogStreamer {
	mock := &mockLogStreamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
