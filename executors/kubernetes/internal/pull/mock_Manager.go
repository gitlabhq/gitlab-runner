// Code generated by mockery v2.53.3. DO NOT EDIT.

package pull

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetPullPolicyFor provides a mock function with given fields: container
func (_m *MockManager) GetPullPolicyFor(container string) (v1.PullPolicy, error) {
	ret := _m.Called(container)

	if len(ret) == 0 {
		panic("no return value specified for GetPullPolicyFor")
	}

	var r0 v1.PullPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (v1.PullPolicy, error)); ok {
		return rf(container)
	}
	if rf, ok := ret.Get(0).(func(string) v1.PullPolicy); ok {
		r0 = rf(container)
	} else {
		r0 = ret.Get(0).(v1.PullPolicy)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetPullPolicyFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullPolicyFor'
type MockManager_GetPullPolicyFor_Call struct {
	*mock.Call
}

// GetPullPolicyFor is a helper method to define mock.On call
//   - container string
func (_e *MockManager_Expecter) GetPullPolicyFor(container interface{}) *MockManager_GetPullPolicyFor_Call {
	return &MockManager_GetPullPolicyFor_Call{Call: _e.mock.On("GetPullPolicyFor", container)}
}

func (_c *MockManager_GetPullPolicyFor_Call) Run(run func(container string)) *MockManager_GetPullPolicyFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetPullPolicyFor_Call) Return(_a0 v1.PullPolicy, _a1 error) *MockManager_GetPullPolicyFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetPullPolicyFor_Call) RunAndReturn(run func(string) (v1.PullPolicy, error)) *MockManager_GetPullPolicyFor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyForContainer provides a mock function with given fields: attempt, imagePullErr
func (_m *MockManager) UpdatePolicyForContainer(attempt int, imagePullErr *ImagePullError) bool {
	ret := _m.Called(attempt, imagePullErr)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyForContainer")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, *ImagePullError) bool); ok {
		r0 = rf(attempt, imagePullErr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockManager_UpdatePolicyForContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyForContainer'
type MockManager_UpdatePolicyForContainer_Call struct {
	*mock.Call
}

// UpdatePolicyForContainer is a helper method to define mock.On call
//   - attempt int
//   - imagePullErr *ImagePullError
func (_e *MockManager_Expecter) UpdatePolicyForContainer(attempt interface{}, imagePullErr interface{}) *MockManager_UpdatePolicyForContainer_Call {
	return &MockManager_UpdatePolicyForContainer_Call{Call: _e.mock.On("UpdatePolicyForContainer", attempt, imagePullErr)}
}

func (_c *MockManager_UpdatePolicyForContainer_Call) Run(run func(attempt int, imagePullErr *ImagePullError)) *MockManager_UpdatePolicyForContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*ImagePullError))
	})
	return _c
}

func (_c *MockManager_UpdatePolicyForContainer_Call) Return(_a0 bool) *MockManager_UpdatePolicyForContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_UpdatePolicyForContainer_Call) RunAndReturn(run func(int, *ImagePullError) bool) *MockManager_UpdatePolicyForContainer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
