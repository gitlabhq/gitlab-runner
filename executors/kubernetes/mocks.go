// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package kubernetes

import (
	"context"
	"io"
	"net/url"
	"time"

	mock "github.com/stretchr/testify/mock"
	v10 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/rest"
)

// NewMockRemoteExecutor creates a new instance of MockRemoteExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteExecutor {
	mock := &MockRemoteExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRemoteExecutor is an autogenerated mock type for the RemoteExecutor type
type MockRemoteExecutor struct {
	mock.Mock
}

type MockRemoteExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteExecutor) EXPECT() *MockRemoteExecutor_Expecter {
	return &MockRemoteExecutor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockRemoteExecutor
func (_mock *MockRemoteExecutor) Execute(ctx context.Context, method string, url1 *url.URL, config *rest.Config, stdin io.Reader, stdout io.Writer, stderr io.Writer, tty bool) error {
	ret := _mock.Called(ctx, method, url1, config, stdin, stdout, stderr, tty)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *url.URL, *rest.Config, io.Reader, io.Writer, io.Writer, bool) error); ok {
		r0 = returnFunc(ctx, method, url1, config, stdin, stdout, stderr, tty)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRemoteExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRemoteExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - url1 *url.URL
//   - config *rest.Config
//   - stdin io.Reader
//   - stdout io.Writer
//   - stderr io.Writer
//   - tty bool
func (_e *MockRemoteExecutor_Expecter) Execute(ctx interface{}, method interface{}, url1 interface{}, config interface{}, stdin interface{}, stdout interface{}, stderr interface{}, tty interface{}) *MockRemoteExecutor_Execute_Call {
	return &MockRemoteExecutor_Execute_Call{Call: _e.mock.On("Execute", ctx, method, url1, config, stdin, stdout, stderr, tty)}
}

func (_c *MockRemoteExecutor_Execute_Call) Run(run func(ctx context.Context, method string, url1 *url.URL, config *rest.Config, stdin io.Reader, stdout io.Writer, stderr io.Writer, tty bool)) *MockRemoteExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *url.URL
		if args[2] != nil {
			arg2 = args[2].(*url.URL)
		}
		var arg3 *rest.Config
		if args[3] != nil {
			arg3 = args[3].(*rest.Config)
		}
		var arg4 io.Reader
		if args[4] != nil {
			arg4 = args[4].(io.Reader)
		}
		var arg5 io.Writer
		if args[5] != nil {
			arg5 = args[5].(io.Writer)
		}
		var arg6 io.Writer
		if args[6] != nil {
			arg6 = args[6].(io.Writer)
		}
		var arg7 bool
		if args[7] != nil {
			arg7 = args[7].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
		)
	})
	return _c
}

func (_c *MockRemoteExecutor_Execute_Call) Return(err error) *MockRemoteExecutor_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRemoteExecutor_Execute_Call) RunAndReturn(run func(ctx context.Context, method string, url1 *url.URL, config *rest.Config, stdin io.Reader, stdout io.Writer, stderr io.Writer, tty bool) error) *MockRemoteExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFeatureChecker creates a new instance of mockFeatureChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFeatureChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFeatureChecker {
	mock := &mockFeatureChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockFeatureChecker is an autogenerated mock type for the featureChecker type
type mockFeatureChecker struct {
	mock.Mock
}

type mockFeatureChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFeatureChecker) EXPECT() *mockFeatureChecker_Expecter {
	return &mockFeatureChecker_Expecter{mock: &_m.Mock}
}

// IsHostAliasSupported provides a mock function for the type mockFeatureChecker
func (_mock *mockFeatureChecker) IsHostAliasSupported() (bool, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHostAliasSupported")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (bool, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockFeatureChecker_IsHostAliasSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHostAliasSupported'
type mockFeatureChecker_IsHostAliasSupported_Call struct {
	*mock.Call
}

// IsHostAliasSupported is a helper method to define mock.On call
func (_e *mockFeatureChecker_Expecter) IsHostAliasSupported() *mockFeatureChecker_IsHostAliasSupported_Call {
	return &mockFeatureChecker_IsHostAliasSupported_Call{Call: _e.mock.On("IsHostAliasSupported")}
}

func (_c *mockFeatureChecker_IsHostAliasSupported_Call) Run(run func()) *mockFeatureChecker_IsHostAliasSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFeatureChecker_IsHostAliasSupported_Call) Return(b bool, err error) *mockFeatureChecker_IsHostAliasSupported_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *mockFeatureChecker_IsHostAliasSupported_Call) RunAndReturn(run func() (bool, error)) *mockFeatureChecker_IsHostAliasSupported_Call {
	_c.Call.Return(run)
	return _c
}

// IsResourceVerbAllowed provides a mock function for the type mockFeatureChecker
func (_mock *mockFeatureChecker) IsResourceVerbAllowed(context1 context.Context, groupVersionResource v1.GroupVersionResource, s string, s1 string) (bool, string, error) {
	ret := _mock.Called(context1, groupVersionResource, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for IsResourceVerbAllowed")
	}

	var r0 bool
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.GroupVersionResource, string, string) (bool, string, error)); ok {
		return returnFunc(context1, groupVersionResource, s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.GroupVersionResource, string, string) bool); ok {
		r0 = returnFunc(context1, groupVersionResource, s, s1)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.GroupVersionResource, string, string) string); ok {
		r1 = returnFunc(context1, groupVersionResource, s, s1)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, v1.GroupVersionResource, string, string) error); ok {
		r2 = returnFunc(context1, groupVersionResource, s, s1)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockFeatureChecker_IsResourceVerbAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsResourceVerbAllowed'
type mockFeatureChecker_IsResourceVerbAllowed_Call struct {
	*mock.Call
}

// IsResourceVerbAllowed is a helper method to define mock.On call
//   - context1 context.Context
//   - groupVersionResource v1.GroupVersionResource
//   - s string
//   - s1 string
func (_e *mockFeatureChecker_Expecter) IsResourceVerbAllowed(context1 interface{}, groupVersionResource interface{}, s interface{}, s1 interface{}) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	return &mockFeatureChecker_IsResourceVerbAllowed_Call{Call: _e.mock.On("IsResourceVerbAllowed", context1, groupVersionResource, s, s1)}
}

func (_c *mockFeatureChecker_IsResourceVerbAllowed_Call) Run(run func(context1 context.Context, groupVersionResource v1.GroupVersionResource, s string, s1 string)) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.GroupVersionResource
		if args[1] != nil {
			arg1 = args[1].(v1.GroupVersionResource)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockFeatureChecker_IsResourceVerbAllowed_Call) Return(b bool, s2 string, err error) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	_c.Call.Return(b, s2, err)
	return _c
}

func (_c *mockFeatureChecker_IsResourceVerbAllowed_Call) RunAndReturn(run func(context1 context.Context, groupVersionResource v1.GroupVersionResource, s string, s1 string) (bool, string, error)) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPodWatcher creates a new instance of mockPodWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPodWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPodWatcher {
	mock := &mockPodWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockPodWatcher is an autogenerated mock type for the podWatcher type
type mockPodWatcher struct {
	mock.Mock
}

type mockPodWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPodWatcher) EXPECT() *mockPodWatcher_Expecter {
	return &mockPodWatcher_Expecter{mock: &_m.Mock}
}

// Errors provides a mock function for the type mockPodWatcher
func (_mock *mockPodWatcher) Errors() <-chan error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 <-chan error
	if returnFunc, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}
	return r0
}

// mockPodWatcher_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type mockPodWatcher_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *mockPodWatcher_Expecter) Errors() *mockPodWatcher_Errors_Call {
	return &mockPodWatcher_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *mockPodWatcher_Errors_Call) Run(run func()) *mockPodWatcher_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockPodWatcher_Errors_Call) Return(errCh <-chan error) *mockPodWatcher_Errors_Call {
	_c.Call.Return(errCh)
	return _c
}

func (_c *mockPodWatcher_Errors_Call) RunAndReturn(run func() <-chan error) *mockPodWatcher_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type mockPodWatcher
func (_mock *mockPodWatcher) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockPodWatcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type mockPodWatcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *mockPodWatcher_Expecter) Start() *mockPodWatcher_Start_Call {
	return &mockPodWatcher_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *mockPodWatcher_Start_Call) Run(run func()) *mockPodWatcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockPodWatcher_Start_Call) Return(err error) *mockPodWatcher_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockPodWatcher_Start_Call) RunAndReturn(run func() error) *mockPodWatcher_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type mockPodWatcher
func (_mock *mockPodWatcher) Stop() {
	_mock.Called()
	return
}

// mockPodWatcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockPodWatcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *mockPodWatcher_Expecter) Stop() *mockPodWatcher_Stop_Call {
	return &mockPodWatcher_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *mockPodWatcher_Stop_Call) Run(run func()) *mockPodWatcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockPodWatcher_Stop_Call) Return() *mockPodWatcher_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockPodWatcher_Stop_Call) RunAndReturn(run func()) *mockPodWatcher_Stop_Call {
	_c.Run(run)
	return _c
}

// UpdatePodName provides a mock function for the type mockPodWatcher
func (_mock *mockPodWatcher) UpdatePodName(s string) {
	_mock.Called(s)
	return
}

// mockPodWatcher_UpdatePodName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePodName'
type mockPodWatcher_UpdatePodName_Call struct {
	*mock.Call
}

// UpdatePodName is a helper method to define mock.On call
//   - s string
func (_e *mockPodWatcher_Expecter) UpdatePodName(s interface{}) *mockPodWatcher_UpdatePodName_Call {
	return &mockPodWatcher_UpdatePodName_Call{Call: _e.mock.On("UpdatePodName", s)}
}

func (_c *mockPodWatcher_UpdatePodName_Call) Run(run func(s string)) *mockPodWatcher_UpdatePodName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockPodWatcher_UpdatePodName_Call) Return() *mockPodWatcher_UpdatePodName_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockPodWatcher_UpdatePodName_Call) RunAndReturn(run func(s string)) *mockPodWatcher_UpdatePodName_Call {
	_c.Run(run)
	return _c
}

// newMockPodStatusChecker creates a new instance of mockPodStatusChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPodStatusChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPodStatusChecker {
	mock := &mockPodStatusChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockPodStatusChecker is an autogenerated mock type for the podStatusChecker type
type mockPodStatusChecker struct {
	mock.Mock
}

type mockPodStatusChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPodStatusChecker) EXPECT() *mockPodStatusChecker_Expecter {
	return &mockPodStatusChecker_Expecter{mock: &_m.Mock}
}

// check provides a mock function for the type mockPodStatusChecker
func (_mock *mockPodStatusChecker) check(context1 context.Context, pod *v10.Pod) error {
	ret := _mock.Called(context1, pod)

	if len(ret) == 0 {
		panic("no return value specified for check")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v10.Pod) error); ok {
		r0 = returnFunc(context1, pod)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockPodStatusChecker_check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'check'
type mockPodStatusChecker_check_Call struct {
	*mock.Call
}

// check is a helper method to define mock.On call
//   - context1 context.Context
//   - pod *v10.Pod
func (_e *mockPodStatusChecker_Expecter) check(context1 interface{}, pod interface{}) *mockPodStatusChecker_check_Call {
	return &mockPodStatusChecker_check_Call{Call: _e.mock.On("check", context1, pod)}
}

func (_c *mockPodStatusChecker_check_Call) Run(run func(context1 context.Context, pod *v10.Pod)) *mockPodStatusChecker_check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v10.Pod
		if args[1] != nil {
			arg1 = args[1].(*v10.Pod)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockPodStatusChecker_check_Call) Return(err error) *mockPodStatusChecker_check_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockPodStatusChecker_check_Call) RunAndReturn(run func(context1 context.Context, pod *v10.Pod) error) *mockPodStatusChecker_check_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogStreamer creates a new instance of mockLogStreamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogStreamer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogStreamer {
	mock := &mockLogStreamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogStreamer is an autogenerated mock type for the logStreamer type
type mockLogStreamer struct {
	mock.Mock
}

type mockLogStreamer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogStreamer) EXPECT() *mockLogStreamer_Expecter {
	return &mockLogStreamer_Expecter{mock: &_m.Mock}
}

// Stream provides a mock function for the type mockLogStreamer
func (_mock *mockLogStreamer) Stream(ctx context.Context, offset int64, output io.Writer) error {
	ret := _mock.Called(ctx, offset, output)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, io.Writer) error); ok {
		r0 = returnFunc(ctx, offset, output)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockLogStreamer_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type mockLogStreamer_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - offset int64
//   - output io.Writer
func (_e *mockLogStreamer_Expecter) Stream(ctx interface{}, offset interface{}, output interface{}) *mockLogStreamer_Stream_Call {
	return &mockLogStreamer_Stream_Call{Call: _e.mock.On("Stream", ctx, offset, output)}
}

func (_c *mockLogStreamer_Stream_Call) Run(run func(ctx context.Context, offset int64, output io.Writer)) *mockLogStreamer_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 io.Writer
		if args[2] != nil {
			arg2 = args[2].(io.Writer)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockLogStreamer_Stream_Call) Return(err error) *mockLogStreamer_Stream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockLogStreamer_Stream_Call) RunAndReturn(run func(ctx context.Context, offset int64, output io.Writer) error) *mockLogStreamer_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type mockLogStreamer
func (_mock *mockLogStreamer) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// mockLogStreamer_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type mockLogStreamer_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *mockLogStreamer_Expecter) String() *mockLogStreamer_String_Call {
	return &mockLogStreamer_String_Call{Call: _e.mock.On("String")}
}

func (_c *mockLogStreamer_String_Call) Run(run func()) *mockLogStreamer_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLogStreamer_String_Call) Return(s string) *mockLogStreamer_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *mockLogStreamer_String_Call) RunAndReturn(run func() string) *mockLogStreamer_String_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogProcessor creates a new instance of mockLogProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogProcessor {
	mock := &mockLogProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockLogProcessor is an autogenerated mock type for the logProcessor type
type mockLogProcessor struct {
	mock.Mock
}

type mockLogProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogProcessor) EXPECT() *mockLogProcessor_Expecter {
	return &mockLogProcessor_Expecter{mock: &_m.Mock}
}

// Finalize provides a mock function for the type mockLogProcessor
func (_mock *mockLogProcessor) Finalize() {
	_mock.Called()
	return
}

// mockLogProcessor_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type mockLogProcessor_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
func (_e *mockLogProcessor_Expecter) Finalize() *mockLogProcessor_Finalize_Call {
	return &mockLogProcessor_Finalize_Call{Call: _e.mock.On("Finalize")}
}

func (_c *mockLogProcessor_Finalize_Call) Run(run func()) *mockLogProcessor_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLogProcessor_Finalize_Call) Return() *mockLogProcessor_Finalize_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogProcessor_Finalize_Call) RunAndReturn(run func()) *mockLogProcessor_Finalize_Call {
	_c.Run(run)
	return _c
}

// Process provides a mock function for the type mockLogProcessor
func (_mock *mockLogProcessor) Process(ctx context.Context) (<-chan string, <-chan error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 <-chan string
	var r1 <-chan error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (<-chan string, <-chan error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) <-chan error); ok {
		r1 = returnFunc(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}
	return r0, r1
}

// mockLogProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type mockLogProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockLogProcessor_Expecter) Process(ctx interface{}) *mockLogProcessor_Process_Call {
	return &mockLogProcessor_Process_Call{Call: _e.mock.On("Process", ctx)}
}

func (_c *mockLogProcessor_Process_Call) Run(run func(ctx context.Context)) *mockLogProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockLogProcessor_Process_Call) Return(stringCh <-chan string, errCh <-chan error) *mockLogProcessor_Process_Call {
	_c.Call.Return(stringCh, errCh)
	return _c
}

func (_c *mockLogProcessor_Process_Call) RunAndReturn(run func(ctx context.Context) (<-chan string, <-chan error)) *mockLogProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBackoffCalculator creates a new instance of mockBackoffCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBackoffCalculator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBackoffCalculator {
	mock := &mockBackoffCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockBackoffCalculator is an autogenerated mock type for the backoffCalculator type
type mockBackoffCalculator struct {
	mock.Mock
}

type mockBackoffCalculator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBackoffCalculator) EXPECT() *mockBackoffCalculator_Expecter {
	return &mockBackoffCalculator_Expecter{mock: &_m.Mock}
}

// ForAttempt provides a mock function for the type mockBackoffCalculator
func (_mock *mockBackoffCalculator) ForAttempt(attempt float64) time.Duration {
	ret := _mock.Called(attempt)

	if len(ret) == 0 {
		panic("no return value specified for ForAttempt")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func(float64) time.Duration); ok {
		r0 = returnFunc(attempt)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// mockBackoffCalculator_ForAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForAttempt'
type mockBackoffCalculator_ForAttempt_Call struct {
	*mock.Call
}

// ForAttempt is a helper method to define mock.On call
//   - attempt float64
func (_e *mockBackoffCalculator_Expecter) ForAttempt(attempt interface{}) *mockBackoffCalculator_ForAttempt_Call {
	return &mockBackoffCalculator_ForAttempt_Call{Call: _e.mock.On("ForAttempt", attempt)}
}

func (_c *mockBackoffCalculator_ForAttempt_Call) Run(run func(attempt float64)) *mockBackoffCalculator_ForAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockBackoffCalculator_ForAttempt_Call) Return(duration time.Duration) *mockBackoffCalculator_ForAttempt_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *mockBackoffCalculator_ForAttempt_Call) RunAndReturn(run func(attempt float64) time.Duration) *mockBackoffCalculator_ForAttempt_Call {
	_c.Call.Return(run)
	return _c
}
