// Code generated by mockery v2.53.3. DO NOT EDIT.

package kubernetes

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockLogProcessor is an autogenerated mock type for the logProcessor type
type mockLogProcessor struct {
	mock.Mock
}

type mockLogProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogProcessor) EXPECT() *mockLogProcessor_Expecter {
	return &mockLogProcessor_Expecter{mock: &_m.Mock}
}

// Finalize provides a mock function with no fields
func (_m *mockLogProcessor) Finalize() {
	_m.Called()
}

// mockLogProcessor_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type mockLogProcessor_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
func (_e *mockLogProcessor_Expecter) Finalize() *mockLogProcessor_Finalize_Call {
	return &mockLogProcessor_Finalize_Call{Call: _e.mock.On("Finalize")}
}

func (_c *mockLogProcessor_Finalize_Call) Run(run func()) *mockLogProcessor_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLogProcessor_Finalize_Call) Return() *mockLogProcessor_Finalize_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogProcessor_Finalize_Call) RunAndReturn(run func()) *mockLogProcessor_Finalize_Call {
	_c.Run(run)
	return _c
}

// Process provides a mock function with given fields: ctx
func (_m *mockLogProcessor) Process(ctx context.Context) (<-chan string, <-chan error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 <-chan string
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan string, <-chan error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) <-chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// mockLogProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type mockLogProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockLogProcessor_Expecter) Process(ctx interface{}) *mockLogProcessor_Process_Call {
	return &mockLogProcessor_Process_Call{Call: _e.mock.On("Process", ctx)}
}

func (_c *mockLogProcessor_Process_Call) Run(run func(ctx context.Context)) *mockLogProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockLogProcessor_Process_Call) Return(_a0 <-chan string, _a1 <-chan error) *mockLogProcessor_Process_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLogProcessor_Process_Call) RunAndReturn(run func(context.Context) (<-chan string, <-chan error)) *mockLogProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogProcessor creates a new instance of mockLogProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogProcessor {
	mock := &mockLogProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
