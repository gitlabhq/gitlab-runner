// Code generated by mockery v2.53.3. DO NOT EDIT.

package kubernetes

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// mockFeatureChecker is an autogenerated mock type for the featureChecker type
type mockFeatureChecker struct {
	mock.Mock
}

type mockFeatureChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFeatureChecker) EXPECT() *mockFeatureChecker_Expecter {
	return &mockFeatureChecker_Expecter{mock: &_m.Mock}
}

// IsHostAliasSupported provides a mock function with no fields
func (_m *mockFeatureChecker) IsHostAliasSupported() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsHostAliasSupported")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFeatureChecker_IsHostAliasSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHostAliasSupported'
type mockFeatureChecker_IsHostAliasSupported_Call struct {
	*mock.Call
}

// IsHostAliasSupported is a helper method to define mock.On call
func (_e *mockFeatureChecker_Expecter) IsHostAliasSupported() *mockFeatureChecker_IsHostAliasSupported_Call {
	return &mockFeatureChecker_IsHostAliasSupported_Call{Call: _e.mock.On("IsHostAliasSupported")}
}

func (_c *mockFeatureChecker_IsHostAliasSupported_Call) Run(run func()) *mockFeatureChecker_IsHostAliasSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFeatureChecker_IsHostAliasSupported_Call) Return(_a0 bool, _a1 error) *mockFeatureChecker_IsHostAliasSupported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFeatureChecker_IsHostAliasSupported_Call) RunAndReturn(run func() (bool, error)) *mockFeatureChecker_IsHostAliasSupported_Call {
	_c.Call.Return(run)
	return _c
}

// IsResourceVerbAllowed provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *mockFeatureChecker) IsResourceVerbAllowed(_a0 context.Context, _a1 v1.GroupVersionResource, _a2 string, _a3 string) (bool, string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for IsResourceVerbAllowed")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.GroupVersionResource, string, string) (bool, string, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.GroupVersionResource, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.GroupVersionResource, string, string) string); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, v1.GroupVersionResource, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockFeatureChecker_IsResourceVerbAllowed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsResourceVerbAllowed'
type mockFeatureChecker_IsResourceVerbAllowed_Call struct {
	*mock.Call
}

// IsResourceVerbAllowed is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 v1.GroupVersionResource
//   - _a2 string
//   - _a3 string
func (_e *mockFeatureChecker_Expecter) IsResourceVerbAllowed(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	return &mockFeatureChecker_IsResourceVerbAllowed_Call{Call: _e.mock.On("IsResourceVerbAllowed", _a0, _a1, _a2, _a3)}
}

func (_c *mockFeatureChecker_IsResourceVerbAllowed_Call) Run(run func(_a0 context.Context, _a1 v1.GroupVersionResource, _a2 string, _a3 string)) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.GroupVersionResource), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockFeatureChecker_IsResourceVerbAllowed_Call) Return(_a0 bool, _a1 string, _a2 error) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockFeatureChecker_IsResourceVerbAllowed_Call) RunAndReturn(run func(context.Context, v1.GroupVersionResource, string, string) (bool, string, error)) *mockFeatureChecker_IsResourceVerbAllowed_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFeatureChecker creates a new instance of mockFeatureChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFeatureChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFeatureChecker {
	mock := &mockFeatureChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
