// Code generated by mockery v2.53.3. DO NOT EDIT.

package kubernetes

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockBackoffCalculator is an autogenerated mock type for the backoffCalculator type
type mockBackoffCalculator struct {
	mock.Mock
}

type mockBackoffCalculator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBackoffCalculator) EXPECT() *mockBackoffCalculator_Expecter {
	return &mockBackoffCalculator_Expecter{mock: &_m.Mock}
}

// ForAttempt provides a mock function with given fields: attempt
func (_m *mockBackoffCalculator) ForAttempt(attempt float64) time.Duration {
	ret := _m.Called(attempt)

	if len(ret) == 0 {
		panic("no return value specified for ForAttempt")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(float64) time.Duration); ok {
		r0 = rf(attempt)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockBackoffCalculator_ForAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForAttempt'
type mockBackoffCalculator_ForAttempt_Call struct {
	*mock.Call
}

// ForAttempt is a helper method to define mock.On call
//   - attempt float64
func (_e *mockBackoffCalculator_Expecter) ForAttempt(attempt interface{}) *mockBackoffCalculator_ForAttempt_Call {
	return &mockBackoffCalculator_ForAttempt_Call{Call: _e.mock.On("ForAttempt", attempt)}
}

func (_c *mockBackoffCalculator_ForAttempt_Call) Run(run func(attempt float64)) *mockBackoffCalculator_ForAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *mockBackoffCalculator_ForAttempt_Call) Return(_a0 time.Duration) *mockBackoffCalculator_ForAttempt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBackoffCalculator_ForAttempt_Call) RunAndReturn(run func(float64) time.Duration) *mockBackoffCalculator_ForAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBackoffCalculator creates a new instance of mockBackoffCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBackoffCalculator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBackoffCalculator {
	mock := &mockBackoffCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
