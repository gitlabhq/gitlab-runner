// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package docker

import (
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/network"
	mock "github.com/stretchr/testify/mock"
)

// newMockContainerConfigurator creates a new instance of mockContainerConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockContainerConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockContainerConfigurator {
	mock := &mockContainerConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockContainerConfigurator is an autogenerated mock type for the containerConfigurator type
type mockContainerConfigurator struct {
	mock.Mock
}

type mockContainerConfigurator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockContainerConfigurator) EXPECT() *mockContainerConfigurator_Expecter {
	return &mockContainerConfigurator_Expecter{mock: &_m.Mock}
}

// ContainerConfig provides a mock function for the type mockContainerConfigurator
func (_mock *mockContainerConfigurator) ContainerConfig(image *types.ImageInspect) (*container.Config, error) {
	ret := _mock.Called(image)

	if len(ret) == 0 {
		panic("no return value specified for ContainerConfig")
	}

	var r0 *container.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*types.ImageInspect) (*container.Config, error)); ok {
		return returnFunc(image)
	}
	if returnFunc, ok := ret.Get(0).(func(*types.ImageInspect) *container.Config); ok {
		r0 = returnFunc(image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*types.ImageInspect) error); ok {
		r1 = returnFunc(image)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockContainerConfigurator_ContainerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerConfig'
type mockContainerConfigurator_ContainerConfig_Call struct {
	*mock.Call
}

// ContainerConfig is a helper method to define mock.On call
//   - image *types.ImageInspect
func (_e *mockContainerConfigurator_Expecter) ContainerConfig(image interface{}) *mockContainerConfigurator_ContainerConfig_Call {
	return &mockContainerConfigurator_ContainerConfig_Call{Call: _e.mock.On("ContainerConfig", image)}
}

func (_c *mockContainerConfigurator_ContainerConfig_Call) Run(run func(image *types.ImageInspect)) *mockContainerConfigurator_ContainerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.ImageInspect
		if args[0] != nil {
			arg0 = args[0].(*types.ImageInspect)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockContainerConfigurator_ContainerConfig_Call) Return(config *container.Config, err error) *mockContainerConfigurator_ContainerConfig_Call {
	_c.Call.Return(config, err)
	return _c
}

func (_c *mockContainerConfigurator_ContainerConfig_Call) RunAndReturn(run func(image *types.ImageInspect) (*container.Config, error)) *mockContainerConfigurator_ContainerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// HostConfig provides a mock function for the type mockContainerConfigurator
func (_mock *mockContainerConfigurator) HostConfig() (*container.HostConfig, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HostConfig")
	}

	var r0 *container.HostConfig
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*container.HostConfig, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *container.HostConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.HostConfig)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockContainerConfigurator_HostConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostConfig'
type mockContainerConfigurator_HostConfig_Call struct {
	*mock.Call
}

// HostConfig is a helper method to define mock.On call
func (_e *mockContainerConfigurator_Expecter) HostConfig() *mockContainerConfigurator_HostConfig_Call {
	return &mockContainerConfigurator_HostConfig_Call{Call: _e.mock.On("HostConfig")}
}

func (_c *mockContainerConfigurator_HostConfig_Call) Run(run func()) *mockContainerConfigurator_HostConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockContainerConfigurator_HostConfig_Call) Return(hostConfig *container.HostConfig, err error) *mockContainerConfigurator_HostConfig_Call {
	_c.Call.Return(hostConfig, err)
	return _c
}

func (_c *mockContainerConfigurator_HostConfig_Call) RunAndReturn(run func() (*container.HostConfig, error)) *mockContainerConfigurator_HostConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkConfig provides a mock function for the type mockContainerConfigurator
func (_mock *mockContainerConfigurator) NetworkConfig(aliases []string) *network.NetworkingConfig {
	ret := _mock.Called(aliases)

	if len(ret) == 0 {
		panic("no return value specified for NetworkConfig")
	}

	var r0 *network.NetworkingConfig
	if returnFunc, ok := ret.Get(0).(func([]string) *network.NetworkingConfig); ok {
		r0 = returnFunc(aliases)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.NetworkingConfig)
		}
	}
	return r0
}

// mockContainerConfigurator_NetworkConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkConfig'
type mockContainerConfigurator_NetworkConfig_Call struct {
	*mock.Call
}

// NetworkConfig is a helper method to define mock.On call
//   - aliases []string
func (_e *mockContainerConfigurator_Expecter) NetworkConfig(aliases interface{}) *mockContainerConfigurator_NetworkConfig_Call {
	return &mockContainerConfigurator_NetworkConfig_Call{Call: _e.mock.On("NetworkConfig", aliases)}
}

func (_c *mockContainerConfigurator_NetworkConfig_Call) Run(run func(aliases []string)) *mockContainerConfigurator_NetworkConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockContainerConfigurator_NetworkConfig_Call) Return(networkingConfig *network.NetworkingConfig) *mockContainerConfigurator_NetworkConfig_Call {
	_c.Call.Return(networkingConfig)
	return _c
}

func (_c *mockContainerConfigurator_NetworkConfig_Call) RunAndReturn(run func(aliases []string) *network.NetworkingConfig) *mockContainerConfigurator_NetworkConfig_Call {
	_c.Call.Return(run)
	return _c
}
