// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package wait

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockWaiter creates a new instance of MockWaiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWaiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWaiter {
	mock := &MockWaiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWaiter is an autogenerated mock type for the Waiter type
type MockWaiter struct {
	mock.Mock
}

type MockWaiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWaiter) EXPECT() *MockWaiter_Expecter {
	return &MockWaiter_Expecter{mock: &_m.Mock}
}

// Wait provides a mock function for the type MockWaiter
func (_mock *MockWaiter) Wait(ctx context.Context, containerID string) error {
	ret := _mock.Called(ctx, containerID)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWaiter_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockWaiter_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
func (_e *MockWaiter_Expecter) Wait(ctx interface{}, containerID interface{}) *MockWaiter_Wait_Call {
	return &MockWaiter_Wait_Call{Call: _e.mock.On("Wait", ctx, containerID)}
}

func (_c *MockWaiter_Wait_Call) Run(run func(ctx context.Context, containerID string)) *MockWaiter_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWaiter_Wait_Call) Return(err error) *MockWaiter_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWaiter_Wait_Call) RunAndReturn(run func(ctx context.Context, containerID string) error) *MockWaiter_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKillWaiter creates a new instance of MockKillWaiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKillWaiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKillWaiter {
	mock := &MockKillWaiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKillWaiter is an autogenerated mock type for the KillWaiter type
type MockKillWaiter struct {
	mock.Mock
}

type MockKillWaiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKillWaiter) EXPECT() *MockKillWaiter_Expecter {
	return &MockKillWaiter_Expecter{mock: &_m.Mock}
}

// StopKillWait provides a mock function for the type MockKillWaiter
func (_mock *MockKillWaiter) StopKillWait(ctx context.Context, containerID string, timeout *int, gracefulExitFunc GracefulExitFunc) error {
	ret := _mock.Called(ctx, containerID, timeout, gracefulExitFunc)

	if len(ret) == 0 {
		panic("no return value specified for StopKillWait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *int, GracefulExitFunc) error); ok {
		r0 = returnFunc(ctx, containerID, timeout, gracefulExitFunc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKillWaiter_StopKillWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopKillWait'
type MockKillWaiter_StopKillWait_Call struct {
	*mock.Call
}

// StopKillWait is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - timeout *int
//   - gracefulExitFunc GracefulExitFunc
func (_e *MockKillWaiter_Expecter) StopKillWait(ctx interface{}, containerID interface{}, timeout interface{}, gracefulExitFunc interface{}) *MockKillWaiter_StopKillWait_Call {
	return &MockKillWaiter_StopKillWait_Call{Call: _e.mock.On("StopKillWait", ctx, containerID, timeout, gracefulExitFunc)}
}

func (_c *MockKillWaiter_StopKillWait_Call) Run(run func(ctx context.Context, containerID string, timeout *int, gracefulExitFunc GracefulExitFunc)) *MockKillWaiter_StopKillWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *int
		if args[2] != nil {
			arg2 = args[2].(*int)
		}
		var arg3 GracefulExitFunc
		if args[3] != nil {
			arg3 = args[3].(GracefulExitFunc)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockKillWaiter_StopKillWait_Call) Return(err error) *MockKillWaiter_StopKillWait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKillWaiter_StopKillWait_Call) RunAndReturn(run func(ctx context.Context, containerID string, timeout *int, gracefulExitFunc GracefulExitFunc) error) *MockKillWaiter_StopKillWait_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type MockKillWaiter
func (_mock *MockKillWaiter) Wait(ctx context.Context, containerID string) error {
	ret := _mock.Called(ctx, containerID)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockKillWaiter_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockKillWaiter_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
func (_e *MockKillWaiter_Expecter) Wait(ctx interface{}, containerID interface{}) *MockKillWaiter_Wait_Call {
	return &MockKillWaiter_Wait_Call{Call: _e.mock.On("Wait", ctx, containerID)}
}

func (_c *MockKillWaiter_Wait_Call) Run(run func(ctx context.Context, containerID string)) *MockKillWaiter_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockKillWaiter_Wait_Call) Return(err error) *MockKillWaiter_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockKillWaiter_Wait_Call) RunAndReturn(run func(ctx context.Context, containerID string) error) *MockKillWaiter_Wait_Call {
	_c.Call.Return(run)
	return _c
}
