// Code generated by mockery v2.43.0. DO NOT EDIT.

package pull

import (
	mock "github.com/stretchr/testify/mock"
	common "gitlab.com/gitlab-org/gitlab-runner/common"

	types "github.com/docker/docker/api/types"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// GetDockerImage provides a mock function with given fields: imageName, options, imagePullPolicies
func (_m *MockManager) GetDockerImage(imageName string, options common.ImageDockerOptions, imagePullPolicies []common.DockerPullPolicy) (*types.ImageInspect, error) {
	ret := _m.Called(imageName, options, imagePullPolicies)

	if len(ret) == 0 {
		panic("no return value specified for GetDockerImage")
	}

	var r0 *types.ImageInspect
	var r1 error
	if rf, ok := ret.Get(0).(func(string, common.ImageDockerOptions, []common.DockerPullPolicy) (*types.ImageInspect, error)); ok {
		return rf(imageName, options, imagePullPolicies)
	}
	if rf, ok := ret.Get(0).(func(string, common.ImageDockerOptions, []common.DockerPullPolicy) *types.ImageInspect); ok {
		r0 = rf(imageName, options, imagePullPolicies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ImageInspect)
		}
	}

	if rf, ok := ret.Get(1).(func(string, common.ImageDockerOptions, []common.DockerPullPolicy) error); ok {
		r1 = rf(imageName, options, imagePullPolicies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
