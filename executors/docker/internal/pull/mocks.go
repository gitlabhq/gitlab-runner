// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pull

import (
	"github.com/docker/docker/api/types"
	mock "github.com/stretchr/testify/mock"
	"gitlab.com/gitlab-org/gitlab-runner/common"
)

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetDockerImage provides a mock function for the type MockManager
func (_mock *MockManager) GetDockerImage(imageName string, options common.ImageDockerOptions, imagePullPolicies []common.DockerPullPolicy) (*types.ImageInspect, error) {
	ret := _mock.Called(imageName, options, imagePullPolicies)

	if len(ret) == 0 {
		panic("no return value specified for GetDockerImage")
	}

	var r0 *types.ImageInspect
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, common.ImageDockerOptions, []common.DockerPullPolicy) (*types.ImageInspect, error)); ok {
		return returnFunc(imageName, options, imagePullPolicies)
	}
	if returnFunc, ok := ret.Get(0).(func(string, common.ImageDockerOptions, []common.DockerPullPolicy) *types.ImageInspect); ok {
		r0 = returnFunc(imageName, options, imagePullPolicies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ImageInspect)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, common.ImageDockerOptions, []common.DockerPullPolicy) error); ok {
		r1 = returnFunc(imageName, options, imagePullPolicies)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManager_GetDockerImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDockerImage'
type MockManager_GetDockerImage_Call struct {
	*mock.Call
}

// GetDockerImage is a helper method to define mock.On call
//   - imageName string
//   - options common.ImageDockerOptions
//   - imagePullPolicies []common.DockerPullPolicy
func (_e *MockManager_Expecter) GetDockerImage(imageName interface{}, options interface{}, imagePullPolicies interface{}) *MockManager_GetDockerImage_Call {
	return &MockManager_GetDockerImage_Call{Call: _e.mock.On("GetDockerImage", imageName, options, imagePullPolicies)}
}

func (_c *MockManager_GetDockerImage_Call) Run(run func(imageName string, options common.ImageDockerOptions, imagePullPolicies []common.DockerPullPolicy)) *MockManager_GetDockerImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 common.ImageDockerOptions
		if args[1] != nil {
			arg1 = args[1].(common.ImageDockerOptions)
		}
		var arg2 []common.DockerPullPolicy
		if args[2] != nil {
			arg2 = args[2].([]common.DockerPullPolicy)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManager_GetDockerImage_Call) Return(imageInspect *types.ImageInspect, err error) *MockManager_GetDockerImage_Call {
	_c.Call.Return(imageInspect, err)
	return _c
}

func (_c *MockManager_GetDockerImage_Call) RunAndReturn(run func(imageName string, options common.ImageDockerOptions, imagePullPolicies []common.DockerPullPolicy) (*types.ImageInspect, error)) *MockManager_GetDockerImage_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPullLogger creates a new instance of mockPullLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPullLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPullLogger {
	mock := &mockPullLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockPullLogger is an autogenerated mock type for the pullLogger type
type mockPullLogger struct {
	mock.Mock
}

type mockPullLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPullLogger) EXPECT() *mockPullLogger_Expecter {
	return &mockPullLogger_Expecter{mock: &_m.Mock}
}

// Debugln provides a mock function for the type mockPullLogger
func (_mock *mockPullLogger) Debugln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// mockPullLogger_Debugln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugln'
type mockPullLogger_Debugln_Call struct {
	*mock.Call
}

// Debugln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *mockPullLogger_Expecter) Debugln(args ...interface{}) *mockPullLogger_Debugln_Call {
	return &mockPullLogger_Debugln_Call{Call: _e.mock.On("Debugln",
		append([]interface{}{}, args...)...)}
}

func (_c *mockPullLogger_Debugln_Call) Run(run func(args ...interface{})) *mockPullLogger_Debugln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockPullLogger_Debugln_Call) Return() *mockPullLogger_Debugln_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockPullLogger_Debugln_Call) RunAndReturn(run func(args ...interface{})) *mockPullLogger_Debugln_Call {
	_c.Run(run)
	return _c
}

// Infoln provides a mock function for the type mockPullLogger
func (_mock *mockPullLogger) Infoln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// mockPullLogger_Infoln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infoln'
type mockPullLogger_Infoln_Call struct {
	*mock.Call
}

// Infoln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *mockPullLogger_Expecter) Infoln(args ...interface{}) *mockPullLogger_Infoln_Call {
	return &mockPullLogger_Infoln_Call{Call: _e.mock.On("Infoln",
		append([]interface{}{}, args...)...)}
}

func (_c *mockPullLogger_Infoln_Call) Run(run func(args ...interface{})) *mockPullLogger_Infoln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockPullLogger_Infoln_Call) Return() *mockPullLogger_Infoln_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockPullLogger_Infoln_Call) RunAndReturn(run func(args ...interface{})) *mockPullLogger_Infoln_Call {
	_c.Run(run)
	return _c
}

// Println provides a mock function for the type mockPullLogger
func (_mock *mockPullLogger) Println(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// mockPullLogger_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type mockPullLogger_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - args ...interface{}
func (_e *mockPullLogger_Expecter) Println(args ...interface{}) *mockPullLogger_Println_Call {
	return &mockPullLogger_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, args...)...)}
}

func (_c *mockPullLogger_Println_Call) Run(run func(args ...interface{})) *mockPullLogger_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockPullLogger_Println_Call) Return() *mockPullLogger_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockPullLogger_Println_Call) RunAndReturn(run func(args ...interface{})) *mockPullLogger_Println_Call {
	_c.Run(run)
	return _c
}

// Warningln provides a mock function for the type mockPullLogger
func (_mock *mockPullLogger) Warningln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_mock.Called(_ca...)
	return
}

// mockPullLogger_Warningln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningln'
type mockPullLogger_Warningln_Call struct {
	*mock.Call
}

// Warningln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *mockPullLogger_Expecter) Warningln(args ...interface{}) *mockPullLogger_Warningln_Call {
	return &mockPullLogger_Warningln_Call{Call: _e.mock.On("Warningln",
		append([]interface{}{}, args...)...)}
}

func (_c *mockPullLogger_Warningln_Call) Run(run func(args ...interface{})) *mockPullLogger_Warningln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockPullLogger_Warningln_Call) Return() *mockPullLogger_Warningln_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockPullLogger_Warningln_Call) RunAndReturn(run func(args ...interface{})) *mockPullLogger_Warningln_Call {
	_c.Run(run)
	return _c
}
