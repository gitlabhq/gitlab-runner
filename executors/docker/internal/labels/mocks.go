// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package labels

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockLabeler creates a new instance of MockLabeler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLabeler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLabeler {
	mock := &MockLabeler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLabeler is an autogenerated mock type for the Labeler type
type MockLabeler struct {
	mock.Mock
}

type MockLabeler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLabeler) EXPECT() *MockLabeler_Expecter {
	return &MockLabeler_Expecter{mock: &_m.Mock}
}

// Labels provides a mock function for the type MockLabeler
func (_mock *MockLabeler) Labels(otherLabels map[string]string) map[string]string {
	ret := _mock.Called(otherLabels)

	if len(ret) == 0 {
		panic("no return value specified for Labels")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func(map[string]string) map[string]string); ok {
		r0 = returnFunc(otherLabels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockLabeler_Labels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Labels'
type MockLabeler_Labels_Call struct {
	*mock.Call
}

// Labels is a helper method to define mock.On call
//   - otherLabels map[string]string
func (_e *MockLabeler_Expecter) Labels(otherLabels interface{}) *MockLabeler_Labels_Call {
	return &MockLabeler_Labels_Call{Call: _e.mock.On("Labels", otherLabels)}
}

func (_c *MockLabeler_Labels_Call) Run(run func(otherLabels map[string]string)) *MockLabeler_Labels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLabeler_Labels_Call) Return(stringToString map[string]string) *MockLabeler_Labels_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockLabeler_Labels_Call) RunAndReturn(run func(otherLabels map[string]string) map[string]string) *MockLabeler_Labels_Call {
	_c.Call.Return(run)
	return _c
}
