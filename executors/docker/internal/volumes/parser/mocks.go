// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package parser

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// ParseVolume provides a mock function for the type MockParser
func (_mock *MockParser) ParseVolume(spec string) (*Volume, error) {
	ret := _mock.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for ParseVolume")
	}

	var r0 *Volume
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Volume, error)); ok {
		return returnFunc(spec)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Volume); ok {
		r0 = returnFunc(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Volume)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(spec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockParser_ParseVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseVolume'
type MockParser_ParseVolume_Call struct {
	*mock.Call
}

// ParseVolume is a helper method to define mock.On call
//   - spec string
func (_e *MockParser_Expecter) ParseVolume(spec interface{}) *MockParser_ParseVolume_Call {
	return &MockParser_ParseVolume_Call{Call: _e.mock.On("ParseVolume", spec)}
}

func (_c *MockParser_ParseVolume_Call) Run(run func(spec string)) *MockParser_ParseVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockParser_ParseVolume_Call) Return(volume *Volume, err error) *MockParser_ParseVolume_Call {
	_c.Call.Return(volume, err)
	return _c
}

func (_c *MockParser_ParseVolume_Call) RunAndReturn(run func(spec string) (*Volume, error)) *MockParser_ParseVolume_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function for the type MockParser
func (_mock *MockParser) Path() Path {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 Path
	if returnFunc, ok := ret.Get(0).(func() Path); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Path)
		}
	}
	return r0
}

// MockParser_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockParser_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockParser_Expecter) Path() *MockParser_Path_Call {
	return &MockParser_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockParser_Path_Call) Run(run func()) *MockParser_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_Path_Call) Return(path Path) *MockParser_Path_Call {
	_c.Call.Return(path)
	return _c
}

func (_c *MockParser_Path_Call) RunAndReturn(run func() Path) *MockParser_Path_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPath creates a new instance of MockPath. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPath(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPath {
	mock := &MockPath{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPath is an autogenerated mock type for the Path type
type MockPath struct {
	mock.Mock
}

type MockPath_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPath) EXPECT() *MockPath_Expecter {
	return &MockPath_Expecter{mock: &_m.Mock}
}

// Contains provides a mock function for the type MockPath
func (_mock *MockPath) Contains(basePath string, targetPath string) bool {
	ret := _mock.Called(basePath, targetPath)

	if len(ret) == 0 {
		panic("no return value specified for Contains")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(basePath, targetPath)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPath_Contains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contains'
type MockPath_Contains_Call struct {
	*mock.Call
}

// Contains is a helper method to define mock.On call
//   - basePath string
//   - targetPath string
func (_e *MockPath_Expecter) Contains(basePath interface{}, targetPath interface{}) *MockPath_Contains_Call {
	return &MockPath_Contains_Call{Call: _e.mock.On("Contains", basePath, targetPath)}
}

func (_c *MockPath_Contains_Call) Run(run func(basePath string, targetPath string)) *MockPath_Contains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPath_Contains_Call) Return(b bool) *MockPath_Contains_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPath_Contains_Call) RunAndReturn(run func(basePath string, targetPath string) bool) *MockPath_Contains_Call {
	_c.Call.Return(run)
	return _c
}

// IsAbs provides a mock function for the type MockPath
func (_mock *MockPath) IsAbs(path string) bool {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsAbs")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPath_IsAbs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAbs'
type MockPath_IsAbs_Call struct {
	*mock.Call
}

// IsAbs is a helper method to define mock.On call
//   - path string
func (_e *MockPath_Expecter) IsAbs(path interface{}) *MockPath_IsAbs_Call {
	return &MockPath_IsAbs_Call{Call: _e.mock.On("IsAbs", path)}
}

func (_c *MockPath_IsAbs_Call) Run(run func(path string)) *MockPath_IsAbs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPath_IsAbs_Call) Return(b bool) *MockPath_IsAbs_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPath_IsAbs_Call) RunAndReturn(run func(path string) bool) *MockPath_IsAbs_Call {
	_c.Call.Return(run)
	return _c
}

// IsRoot provides a mock function for the type MockPath
func (_mock *MockPath) IsRoot(path string) bool {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsRoot")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockPath_IsRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRoot'
type MockPath_IsRoot_Call struct {
	*mock.Call
}

// IsRoot is a helper method to define mock.On call
//   - path string
func (_e *MockPath_Expecter) IsRoot(path interface{}) *MockPath_IsRoot_Call {
	return &MockPath_IsRoot_Call{Call: _e.mock.On("IsRoot", path)}
}

func (_c *MockPath_IsRoot_Call) Run(run func(path string)) *MockPath_IsRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPath_IsRoot_Call) Return(b bool) *MockPath_IsRoot_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockPath_IsRoot_Call) RunAndReturn(run func(path string) bool) *MockPath_IsRoot_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function for the type MockPath
func (_mock *MockPath) Join(elem ...string) string {
	// string
	_va := make([]interface{}, len(elem))
	for _i := range elem {
		_va[_i] = elem[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(...string) string); ok {
		r0 = returnFunc(elem...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPath_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockPath_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - elem ...string
func (_e *MockPath_Expecter) Join(elem ...interface{}) *MockPath_Join_Call {
	return &MockPath_Join_Call{Call: _e.mock.On("Join",
		append([]interface{}{}, elem...)...)}
}

func (_c *MockPath_Join_Call) Run(run func(elem ...string)) *MockPath_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockPath_Join_Call) Return(s string) *MockPath_Join_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPath_Join_Call) RunAndReturn(run func(elem ...string) string) *MockPath_Join_Call {
	_c.Call.Return(run)
	return _c
}
