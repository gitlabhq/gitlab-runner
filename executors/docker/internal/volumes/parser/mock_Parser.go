// Code generated by mockery v2.53.3. DO NOT EDIT.

package parser

import mock "github.com/stretchr/testify/mock"

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// ParseVolume provides a mock function with given fields: spec
func (_m *MockParser) ParseVolume(spec string) (*Volume, error) {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for ParseVolume")
	}

	var r0 *Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Volume, error)); ok {
		return rf(spec)
	}
	if rf, ok := ret.Get(0).(func(string) *Volume); ok {
		r0 = rf(spec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ParseVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseVolume'
type MockParser_ParseVolume_Call struct {
	*mock.Call
}

// ParseVolume is a helper method to define mock.On call
//   - spec string
func (_e *MockParser_Expecter) ParseVolume(spec interface{}) *MockParser_ParseVolume_Call {
	return &MockParser_ParseVolume_Call{Call: _e.mock.On("ParseVolume", spec)}
}

func (_c *MockParser_ParseVolume_Call) Run(run func(spec string)) *MockParser_ParseVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockParser_ParseVolume_Call) Return(_a0 *Volume, _a1 error) *MockParser_ParseVolume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParser_ParseVolume_Call) RunAndReturn(run func(string) (*Volume, error)) *MockParser_ParseVolume_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with no fields
func (_m *MockParser) Path() Path {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 Path
	if rf, ok := ret.Get(0).(func() Path); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Path)
		}
	}

	return r0
}

// MockParser_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockParser_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockParser_Expecter) Path() *MockParser_Path_Call {
	return &MockParser_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockParser_Path_Call) Run(run func()) *MockParser_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockParser_Path_Call) Return(_a0 Path) *MockParser_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_Path_Call) RunAndReturn(run func() Path) *MockParser_Path_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
