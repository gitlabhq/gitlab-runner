// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package log

import (
	"github.com/kardianos/service"
	mock "github.com/stretchr/testify/mock"
)

// newMockSystemLogger creates a new instance of mockSystemLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSystemLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSystemLogger {
	mock := &mockSystemLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockSystemLogger is an autogenerated mock type for the systemLogger type
type mockSystemLogger struct {
	mock.Mock
}

type mockSystemLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSystemLogger) EXPECT() *mockSystemLogger_Expecter {
	return &mockSystemLogger_Expecter{mock: &_m.Mock}
}

// Error provides a mock function for the type mockSystemLogger
func (_mock *mockSystemLogger) Error(v ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, v...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = returnFunc(v...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type mockSystemLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - v ...interface{}
func (_e *mockSystemLogger_Expecter) Error(v ...interface{}) *mockSystemLogger_Error_Call {
	return &mockSystemLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, v...)...)}
}

func (_c *mockSystemLogger_Error_Call) Run(run func(v ...interface{})) *mockSystemLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockSystemLogger_Error_Call) Return(err error) *mockSystemLogger_Error_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemLogger_Error_Call) RunAndReturn(run func(v ...interface{}) error) *mockSystemLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Errorf provides a mock function for the type mockSystemLogger
func (_mock *mockSystemLogger) Errorf(format string, a ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Errorf")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type mockSystemLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *mockSystemLogger_Expecter) Errorf(format interface{}, a ...interface{}) *mockSystemLogger_Errorf_Call {
	return &mockSystemLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, a...)...)}
}

func (_c *mockSystemLogger_Errorf_Call) Run(run func(format string, a ...interface{})) *mockSystemLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockSystemLogger_Errorf_Call) Return(err error) *mockSystemLogger_Errorf_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemLogger_Errorf_Call) RunAndReturn(run func(format string, a ...interface{}) error) *mockSystemLogger_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type mockSystemLogger
func (_mock *mockSystemLogger) Info(v ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, v...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = returnFunc(v...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type mockSystemLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - v ...interface{}
func (_e *mockSystemLogger_Expecter) Info(v ...interface{}) *mockSystemLogger_Info_Call {
	return &mockSystemLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, v...)...)}
}

func (_c *mockSystemLogger_Info_Call) Run(run func(v ...interface{})) *mockSystemLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockSystemLogger_Info_Call) Return(err error) *mockSystemLogger_Info_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemLogger_Info_Call) RunAndReturn(run func(v ...interface{}) error) *mockSystemLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function for the type mockSystemLogger
func (_mock *mockSystemLogger) Infof(format string, a ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Infof")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type mockSystemLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *mockSystemLogger_Expecter) Infof(format interface{}, a ...interface{}) *mockSystemLogger_Infof_Call {
	return &mockSystemLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, a...)...)}
}

func (_c *mockSystemLogger_Infof_Call) Run(run func(format string, a ...interface{})) *mockSystemLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockSystemLogger_Infof_Call) Return(err error) *mockSystemLogger_Infof_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemLogger_Infof_Call) RunAndReturn(run func(format string, a ...interface{}) error) *mockSystemLogger_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// Warning provides a mock function for the type mockSystemLogger
func (_mock *mockSystemLogger) Warning(v ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, v...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Warning")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = returnFunc(v...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemLogger_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type mockSystemLogger_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - v ...interface{}
func (_e *mockSystemLogger_Expecter) Warning(v ...interface{}) *mockSystemLogger_Warning_Call {
	return &mockSystemLogger_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{}, v...)...)}
}

func (_c *mockSystemLogger_Warning_Call) Run(run func(v ...interface{})) *mockSystemLogger_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *mockSystemLogger_Warning_Call) Return(err error) *mockSystemLogger_Warning_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemLogger_Warning_Call) RunAndReturn(run func(v ...interface{}) error) *mockSystemLogger_Warning_Call {
	_c.Call.Return(run)
	return _c
}

// Warningf provides a mock function for the type mockSystemLogger
func (_mock *mockSystemLogger) Warningf(format string, a ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Warningf")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = returnFunc(format, a...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemLogger_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type mockSystemLogger_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *mockSystemLogger_Expecter) Warningf(format interface{}, a ...interface{}) *mockSystemLogger_Warningf_Call {
	return &mockSystemLogger_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{format}, a...)...)}
}

func (_c *mockSystemLogger_Warningf_Call) Run(run func(format string, a ...interface{})) *mockSystemLogger_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *mockSystemLogger_Warningf_Call) Return(err error) *mockSystemLogger_Warningf_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemLogger_Warningf_Call) RunAndReturn(run func(format string, a ...interface{}) error) *mockSystemLogger_Warningf_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSystemService creates a new instance of mockSystemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSystemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSystemService {
	mock := &mockSystemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockSystemService is an autogenerated mock type for the systemService type
type mockSystemService struct {
	mock.Mock
}

type mockSystemService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSystemService) EXPECT() *mockSystemService_Expecter {
	return &mockSystemService_Expecter{mock: &_m.Mock}
}

// Install provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Install() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemService_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type mockSystemService_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Install() *mockSystemService_Install_Call {
	return &mockSystemService_Install_Call{Call: _e.mock.On("Install")}
}

func (_c *mockSystemService_Install_Call) Run(run func()) *mockSystemService_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Install_Call) Return(err error) *mockSystemService_Install_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemService_Install_Call) RunAndReturn(run func() error) *mockSystemService_Install_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Logger(errs chan<- error) (service.Logger, error) {
	ret := _mock.Called(errs)

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 service.Logger
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(chan<- error) (service.Logger, error)); ok {
		return returnFunc(errs)
	}
	if returnFunc, ok := ret.Get(0).(func(chan<- error) service.Logger); ok {
		r0 = returnFunc(errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Logger)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(chan<- error) error); ok {
		r1 = returnFunc(errs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSystemService_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type mockSystemService_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
//   - errs chan<- error
func (_e *mockSystemService_Expecter) Logger(errs interface{}) *mockSystemService_Logger_Call {
	return &mockSystemService_Logger_Call{Call: _e.mock.On("Logger", errs)}
}

func (_c *mockSystemService_Logger_Call) Run(run func(errs chan<- error)) *mockSystemService_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chan<- error
		if args[0] != nil {
			arg0 = args[0].(chan<- error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockSystemService_Logger_Call) Return(logger service.Logger, err error) *mockSystemService_Logger_Call {
	_c.Call.Return(logger, err)
	return _c
}

func (_c *mockSystemService_Logger_Call) RunAndReturn(run func(errs chan<- error) (service.Logger, error)) *mockSystemService_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// Platform provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Platform() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Platform")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// mockSystemService_Platform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Platform'
type mockSystemService_Platform_Call struct {
	*mock.Call
}

// Platform is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Platform() *mockSystemService_Platform_Call {
	return &mockSystemService_Platform_Call{Call: _e.mock.On("Platform")}
}

func (_c *mockSystemService_Platform_Call) Run(run func()) *mockSystemService_Platform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Platform_Call) Return(s string) *mockSystemService_Platform_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *mockSystemService_Platform_Call) RunAndReturn(run func() string) *mockSystemService_Platform_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Restart() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemService_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type mockSystemService_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Restart() *mockSystemService_Restart_Call {
	return &mockSystemService_Restart_Call{Call: _e.mock.On("Restart")}
}

func (_c *mockSystemService_Restart_Call) Run(run func()) *mockSystemService_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Restart_Call) Return(err error) *mockSystemService_Restart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemService_Restart_Call) RunAndReturn(run func() error) *mockSystemService_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Run() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type mockSystemService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Run() *mockSystemService_Run_Call {
	return &mockSystemService_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *mockSystemService_Run_Call) Run(run func()) *mockSystemService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Run_Call) Return(err error) *mockSystemService_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemService_Run_Call) RunAndReturn(run func() error) *mockSystemService_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type mockSystemService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Start() *mockSystemService_Start_Call {
	return &mockSystemService_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *mockSystemService_Start_Call) Run(run func()) *mockSystemService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Start_Call) Return(err error) *mockSystemService_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemService_Start_Call) RunAndReturn(run func() error) *mockSystemService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Status() (service.Status, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 service.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (service.Status, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() service.Status); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(service.Status)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSystemService_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type mockSystemService_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Status() *mockSystemService_Status_Call {
	return &mockSystemService_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *mockSystemService_Status_Call) Run(run func()) *mockSystemService_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Status_Call) Return(status service.Status, err error) *mockSystemService_Status_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *mockSystemService_Status_Call) RunAndReturn(run func() (service.Status, error)) *mockSystemService_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type mockSystemService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Stop() *mockSystemService_Stop_Call {
	return &mockSystemService_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *mockSystemService_Stop_Call) Run(run func()) *mockSystemService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Stop_Call) Return(err error) *mockSystemService_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemService_Stop_Call) RunAndReturn(run func() error) *mockSystemService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type mockSystemService
func (_mock *mockSystemService) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// mockSystemService_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type mockSystemService_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) String() *mockSystemService_String_Call {
	return &mockSystemService_String_Call{Call: _e.mock.On("String")}
}

func (_c *mockSystemService_String_Call) Run(run func()) *mockSystemService_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_String_Call) Return(s string) *mockSystemService_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *mockSystemService_String_Call) RunAndReturn(run func() string) *mockSystemService_String_Call {
	_c.Call.Return(run)
	return _c
}

// SystemLogger provides a mock function for the type mockSystemService
func (_mock *mockSystemService) SystemLogger(errs chan<- error) (service.Logger, error) {
	ret := _mock.Called(errs)

	if len(ret) == 0 {
		panic("no return value specified for SystemLogger")
	}

	var r0 service.Logger
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(chan<- error) (service.Logger, error)); ok {
		return returnFunc(errs)
	}
	if returnFunc, ok := ret.Get(0).(func(chan<- error) service.Logger); ok {
		r0 = returnFunc(errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Logger)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(chan<- error) error); ok {
		r1 = returnFunc(errs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSystemService_SystemLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SystemLogger'
type mockSystemService_SystemLogger_Call struct {
	*mock.Call
}

// SystemLogger is a helper method to define mock.On call
//   - errs chan<- error
func (_e *mockSystemService_Expecter) SystemLogger(errs interface{}) *mockSystemService_SystemLogger_Call {
	return &mockSystemService_SystemLogger_Call{Call: _e.mock.On("SystemLogger", errs)}
}

func (_c *mockSystemService_SystemLogger_Call) Run(run func(errs chan<- error)) *mockSystemService_SystemLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 chan<- error
		if args[0] != nil {
			arg0 = args[0].(chan<- error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockSystemService_SystemLogger_Call) Return(logger service.Logger, err error) *mockSystemService_SystemLogger_Call {
	_c.Call.Return(logger, err)
	return _c
}

func (_c *mockSystemService_SystemLogger_Call) RunAndReturn(run func(errs chan<- error) (service.Logger, error)) *mockSystemService_SystemLogger_Call {
	_c.Call.Return(run)
	return _c
}

// Uninstall provides a mock function for the type mockSystemService
func (_mock *mockSystemService) Uninstall() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uninstall")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockSystemService_Uninstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uninstall'
type mockSystemService_Uninstall_Call struct {
	*mock.Call
}

// Uninstall is a helper method to define mock.On call
func (_e *mockSystemService_Expecter) Uninstall() *mockSystemService_Uninstall_Call {
	return &mockSystemService_Uninstall_Call{Call: _e.mock.On("Uninstall")}
}

func (_c *mockSystemService_Uninstall_Call) Run(run func()) *mockSystemService_Uninstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSystemService_Uninstall_Call) Return(err error) *mockSystemService_Uninstall_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockSystemService_Uninstall_Call) RunAndReturn(run func() error) *mockSystemService_Uninstall_Call {
	_c.Call.Return(run)
	return _c
}
